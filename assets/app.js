/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _scenes = __webpack_require__(159);

	var _scenes2 = _interopRequireDefault(_scenes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	__webpack_require__(209); // app/index.js

	__webpack_require__(211);

	var app = _reactDom2.default.render(_react2.default.createElement(_scenes2.default, null), document.getElementById('gt-app'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);

	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);

	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);

	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);

	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(12);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var invariant = __webpack_require__(13);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);

	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(21);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var invariant = __webpack_require__(13);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);

	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(31);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(46);

	var invariant = __webpack_require__(13);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(49);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(51);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(52);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(60);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(61);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);

	var assign = __webpack_require__(39);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);

	var keyOf = __webpack_require__(79);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);

	var warning = __webpack_require__(25);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(79);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(47);

	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(28);

	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);

	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(99);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(102);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);

	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);

	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);

	var flattenChildren = __webpack_require__(116);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(50);

	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(124);

	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(25);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(127);

	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);

	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);

	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(136);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventModifierState = __webpack_require__(88);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var performanceNow = __webpack_require__(144);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(39);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(145);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(28);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);

	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(155);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);

	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _TypeWriter = __webpack_require__(160);

	var _TypeWriter2 = _interopRequireDefault(_TypeWriter);

	var _ThreeScene = __webpack_require__(162);

	var _ThreeScene2 = _interopRequireDefault(_ThreeScene);

	var _viz = __webpack_require__(165);

	var visualization = _interopRequireWildcard(_viz);

	var _sfx = __webpack_require__(187);

	var _MotionButton = __webpack_require__(188);

	var _MotionButton2 = _interopRequireDefault(_MotionButton);

	var _Navigation = __webpack_require__(203);

	var _Navigation2 = _interopRequireDefault(_Navigation);

	var _audioData = __webpack_require__(166);

	var audioData = _interopRequireWildcard(_audioData);

	var _three = __webpack_require__(163);

	var _three2 = _interopRequireDefault(_three);

	var _tween = __webpack_require__(164);

	var _tween2 = _interopRequireDefault(_tween);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	console.log(audioData);

	__webpack_require__(205);

	var Scene = function (_Component) {
	  _inherits(Scene, _Component);

	  function Scene(props) {
	    _classCallCheck(this, Scene);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Scene).call(this, props));

	    _this.state = {
	      mouseover: false,
	      author: false
	    };

	    _this.mouseOver = _this.mouseOver.bind(_this);
	    _this.mouseOut = _this.mouseOut.bind(_this);

	    _this.animate = _this.animate.bind(_this);
	    _this.renderScene = _this.renderScene.bind(_this);
	    return _this;
	  }

	  _createClass(Scene, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.typewrite();
	    }
	  }, {
	    key: 'typewrite',
	    value: function typewrite() {
	      var _this2 = this;

	      (0, _sfx.playSfx)('sfx08', 0.2);
	      setTimeout(function () {
	        _this2.setState({
	          author: !_this2.state.author
	        });
	        _this2.typewrite();
	      }, 5000);
	    }
	  }, {
	    key: 'mouseOver',
	    value: function mouseOver() {
	      (0, _sfx.playSfx)('sfx05');
	      this.setState({
	        mouseover: true
	      });
	    }
	  }, {
	    key: 'mouseOut',
	    value: function mouseOut() {
	      this.setState({
	        mouseover: false
	      });
	    }
	  }, {
	    key: 'renderScene',
	    value: function renderScene(scene, camera, renderer) {
	      var geometry = new _three2.default.IcosahedronGeometry(320);
	      //const geometry = new THREE.TorusKnotGeometry(320, 40, 120, 4)
	      var material = new _three2.default.MeshPhongMaterial({
	        color: 0xffffff,
	        wireframe: true
	      });
	      // transparent: true,
	      // opacity: 1.0
	      var mesh = new _three2.default.Mesh(geometry, material);
	      mesh.scale.x = mesh.scale.y = mesh.scale.z = 1;
	      scene.add(mesh);
	    }
	  }, {
	    key: 'animate',
	    value: function animate(scene, camera) {

	      if (this.state.mouseover) {
	        scene.rotation.x += 0.01;
	        scene.rotation.y += 0.01;
	        scene.rotation.z += 0.01;
	      }

	      //TWEEN.udpate()
	    }
	  }, {
	    key: 'launch',
	    value: function launch() {
	      visualization.init();
	      visualization.animate();
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      return _react2.default.createElement(
	        'div',
	        { className: 'gt-container' },
	        _react2.default.createElement('div', { id: 'visualization' }),
	        _react2.default.createElement(
	          'div',
	          { className: 'gt-screen gt-screen--home' },
	          _react2.default.createElement(
	            'h1',
	            { className: 'gt-screen__title' },
	            _react2.default.createElement(_TypeWriter2.default, { word: 'glasstress' })
	          ),
	          _react2.default.createElement(
	            'h2',
	            null,
	            this.state.author == 0 && _react2.default.createElement(_TypeWriter2.default, { word: 'max/casacci' }),
	            this.state.author == 1 && _react2.default.createElement(_TypeWriter2.default, { word: 'daniele/mana' })
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'gt-screen__icosahedron' },
	            _react2.default.createElement(_Navigation2.default, null)
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'gt-screen__action' },
	            _react2.default.createElement(_MotionButton2.default, {
	              onMouseOver: this.mouseOver,
	              onMouseOut: this.mouseOut,
	              onClick: this.launch.bind(this),
	              className: 'gt-button gt-button--launch',
	              label: 'launch visualization*' })
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'gt-screen__footer' },
	            _react2.default.createElement(
	              'p',
	              { className: 'gt-text gt-text--small' },
	              '*It requires a WebGl capable browser and optional access to webcam'
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Scene;
	}(_react.Component);

	exports.default = Scene;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Type = __webpack_require__(161);

	var _Type2 = _interopRequireDefault(_Type);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TypeWriter = function (_Component) {
	  _inherits(TypeWriter, _Component);

	  function TypeWriter(props) {
	    _classCallCheck(this, TypeWriter);

	    // code
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(TypeWriter).call(this, props));
	  }

	  // methods


	  _createClass(TypeWriter, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props;
	      var word = _props.word;
	      var totalTime = _props.totalTime;

	      var chars = word.split('');

	      return _react2.default.createElement(
	        'span',
	        { ref: function ref(_ref) {
	            _this2.ref = _ref;
	          } },
	        chars.map(function (char, i) {
	          return _react2.default.createElement(_Type2.default, {
	            minDelay: i * 1 + 1,
	            maxDelay: i * 1 + 100,
	            iterations: 4,
	            char: char,
	            key: i });
	        })
	      );
	    }
	  }]);

	  return TypeWriter;
	}(_react.Component);

	exports.default = TypeWriter;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var alphabet = ".cfhklpqrstwxyz01234567890!#|\$%&/=§@_-*??".split("");

	var defaultProps = {
	  char: 'a',
	  minIterations: 3,
	  maxIterations: 10,
	  minDelay: 25,
	  maxDelay: 500
	};

	var getRandomCharIndex = function getRandomCharIndex() {
	  return parseInt(alphabet.length * Math.random());
	};

	var without = function without(char) {
	  var idx = alphabet.indexOf(char.toLowerCase());
	  var randIdx = getRandomCharIndex();

	  while (randIdx == idx) {
	    randIdx = getRandomCharIndex();
	  }

	  return randIdx;
	};

	var Type = function (_Component) {
	  _inherits(Type, _Component);

	  function Type(props) {
	    _classCallCheck(this, Type);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Type).call(this, props));
	    // code


	    _this.iterations = 0;
	    _this.state = {
	      char: without(_this.props.char),
	      opacity: 0,
	      scale: 0
	    };

	    return _this;
	  }

	  _createClass(Type, [{
	    key: "typer",
	    value: function typer() {
	      var _this2 = this;

	      var _props = this.props;
	      var maxIterations = _props.maxIterations;
	      var maxDelay = _props.maxDelay;
	      var minDelay = _props.minDelay;

	      var delay = Math.random() * (maxDelay - minDelay) + minDelay;
	      var iterations = this.iterations;

	      var finalChar = this.props.char;

	      setTimeout(function () {

	        var char = finalChar;

	        if (iterations < maxIterations) {
	          char = alphabet[without(finalChar)];
	          _this2.setState({
	            char: char,
	            opacity: 0 + 1.0 / maxIterations * iterations,
	            scale: 0 + 1.0 / maxIterations * iterations
	          });
	          _this2.iterations += 1;
	          _this2.typer();
	        } else {
	          _this2.setState({ char: char, opacity: 1 });
	        }
	      }, delay);
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.typer();
	    }

	    // methods

	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement(
	        "span",
	        { style: {
	            display: 'inline-block',
	            opacity: this.state.opacity,
	            transform: 'scale(' + this.state.scale + ')'
	          } },
	        this.state.char
	      );
	    }
	  }]);

	  return Type;
	}(_react.Component);

	exports.default = Type;


	Type.defaultProps = defaultProps;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _three = __webpack_require__(163);

	var _three2 = _interopRequireDefault(_three);

	var _tween = __webpack_require__(164);

	var _tween2 = _interopRequireDefault(_tween);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultProps = {
	  width: 320,
	  height: 240,
	  fog: true,
	  fogColor: 0xffffff,
	  alpha: false,
	  ambientLightColor: 0xffffff,
	  clearColor: 0x222222,
	  fullScreen: false,
	  resize: true,
	  initScene: function initScene(scene, camera) {},
	  animate: function animate(scene, camera) {}
	};

	var ThreeScene = function (_Component) {
	  _inherits(ThreeScene, _Component);

	  function ThreeScene(props) {
	    _classCallCheck(this, ThreeScene);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ThreeScene).call(this, props));
	    // code


	    _this.scene;
	    _this.camera;
	    _this.renderer;

	    _this.animateScene = _this.animateScene.bind(_this);
	    return _this;
	  }

	  _createClass(ThreeScene, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.initScene();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      return _react2.default.createElement('div', { ref: function ref(_ref) {
	          _this2.node = _ref;
	        } });
	    }

	    // methods

	  }, {
	    key: 'initScene',
	    value: function initScene() {
	      var _props = this.props;
	      var alpha = _props.alpha;
	      var ambientLightColor = _props.ambientLightColor;
	      var clearColor = _props.clearColor;
	      var fogColor = _props.fogColor;
	      var width = _props.width;
	      var height = _props.height;


	      var scene = this.scene = new _three2.default.Scene();
	      var camera = this.camera = new _three2.default.PerspectiveCamera(70, width / height, 1, 2000);

	      camera.position.z = 1000;
	      scene.add(new _three2.default.AmbientLight(ambientLightColor));
	      scene.fog = new _three2.default.Fog(fogColor, 0.3, 1600);

	      this.props.initScene(scene, camera);

	      var renderer = this.renderer = new _three2.default.WebGLRenderer({
	        antialias: true,
	        alpha: alpha
	      });

	      renderer.setPixelRatio(window.devicePixelRatio);
	      renderer.setSize(width, height);

	      if (!this.props.alpha) {
	        renderer.setClearColor(clearColor);
	      }

	      _reactDom2.default.findDOMNode(this.node).appendChild(renderer.domElement);

	      this.animateScene();
	    }
	  }, {
	    key: 'animateScene',
	    value: function animateScene() {
	      var renderer = this.renderer;
	      var camera = this.camera;
	      var scene = this.scene;


	      requestAnimationFrame(this.animateScene);
	      this.props.animate(scene, camera);
	      renderer.render(scene, camera);
	    }
	  }]);

	  return ThreeScene;
	}(_react.Component);

	exports.default = ThreeScene;


	ThreeScene.defaultProps = defaultProps;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var self = self || {};// File:src/Three.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var THREE = { REVISION: '74' };

	//

	if ( true ) {

		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {

		module.exports = THREE;

	}

	//

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {

		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		Object.defineProperty( Object, 'assign', {

			writable: true,
			configurable: true,

			value: function ( target ) {

				'use strict';

				if ( target === undefined || target === null ) {

					throw new TypeError( "Cannot convert first argument to object" );

				}

				var to = Object( target );

				for ( var i = 1, n = arguments.length; i !== n; ++ i ) {

					var nextSource = arguments[ i ];

					if ( nextSource === undefined || nextSource === null ) continue;

					nextSource = Object( nextSource );

					var keysArray = Object.keys( nextSource );

					for ( var nextIndex = 0, len = keysArray.length; nextIndex !== len; ++ nextIndex ) {

						var nextKey = keysArray[ nextIndex ];
						var desc = Object.getOwnPropertyDescriptor( nextSource, nextKey );

						if ( desc !== undefined && desc.enumerable ) {

							to[ nextKey ] = nextSource[ nextKey ];

						}

					}

				}

				return to;

			}

		} );

	}

	// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

	THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };

	// GL STATE CONSTANTS

	THREE.CullFaceNone = 0;
	THREE.CullFaceBack = 1;
	THREE.CullFaceFront = 2;
	THREE.CullFaceFrontBack = 3;

	THREE.FrontFaceDirectionCW = 0;
	THREE.FrontFaceDirectionCCW = 1;

	// SHADOWING TYPES

	THREE.BasicShadowMap = 0;
	THREE.PCFShadowMap = 1;
	THREE.PCFSoftShadowMap = 2;

	// MATERIAL CONSTANTS

	// side

	THREE.FrontSide = 0;
	THREE.BackSide = 1;
	THREE.DoubleSide = 2;

	// shading

	THREE.FlatShading = 1;
	THREE.SmoothShading = 2;

	// colors

	THREE.NoColors = 0;
	THREE.FaceColors = 1;
	THREE.VertexColors = 2;

	// blending modes

	THREE.NoBlending = 0;
	THREE.NormalBlending = 1;
	THREE.AdditiveBlending = 2;
	THREE.SubtractiveBlending = 3;
	THREE.MultiplyBlending = 4;
	THREE.CustomBlending = 5;

	// custom blending equations
	// (numbers start from 100 not to clash with other
	// mappings to OpenGL constants defined in Texture.js)

	THREE.AddEquation = 100;
	THREE.SubtractEquation = 101;
	THREE.ReverseSubtractEquation = 102;
	THREE.MinEquation = 103;
	THREE.MaxEquation = 104;

	// custom blending destination factors

	THREE.ZeroFactor = 200;
	THREE.OneFactor = 201;
	THREE.SrcColorFactor = 202;
	THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;
	THREE.OneMinusSrcAlphaFactor = 205;
	THREE.DstAlphaFactor = 206;
	THREE.OneMinusDstAlphaFactor = 207;

	// custom blending source factors

	//THREE.ZeroFactor = 200;
	//THREE.OneFactor = 201;
	//THREE.SrcAlphaFactor = 204;
	//THREE.OneMinusSrcAlphaFactor = 205;
	//THREE.DstAlphaFactor = 206;
	//THREE.OneMinusDstAlphaFactor = 207;
	THREE.DstColorFactor = 208;
	THREE.OneMinusDstColorFactor = 209;
	THREE.SrcAlphaSaturateFactor = 210;

	// depth modes

	THREE.NeverDepth = 0;
	THREE.AlwaysDepth = 1;
	THREE.LessDepth = 2;
	THREE.LessEqualDepth = 3;
	THREE.EqualDepth = 4;
	THREE.GreaterEqualDepth = 5;
	THREE.GreaterDepth = 6;
	THREE.NotEqualDepth = 7;


	// TEXTURE CONSTANTS

	THREE.MultiplyOperation = 0;
	THREE.MixOperation = 1;
	THREE.AddOperation = 2;

	// Mapping modes

	THREE.UVMapping = 300;

	THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;

	THREE.EquirectangularReflectionMapping = 303;
	THREE.EquirectangularRefractionMapping = 304;

	THREE.SphericalReflectionMapping = 305;

	// Wrapping modes

	THREE.RepeatWrapping = 1000;
	THREE.ClampToEdgeWrapping = 1001;
	THREE.MirroredRepeatWrapping = 1002;

	// Filters

	THREE.NearestFilter = 1003;
	THREE.NearestMipMapNearestFilter = 1004;
	THREE.NearestMipMapLinearFilter = 1005;
	THREE.LinearFilter = 1006;
	THREE.LinearMipMapNearestFilter = 1007;
	THREE.LinearMipMapLinearFilter = 1008;

	// Data types

	THREE.UnsignedByteType = 1009;
	THREE.ByteType = 1010;
	THREE.ShortType = 1011;
	THREE.UnsignedShortType = 1012;
	THREE.IntType = 1013;
	THREE.UnsignedIntType = 1014;
	THREE.FloatType = 1015;
	THREE.HalfFloatType = 1025;

	// Pixel types

	//THREE.UnsignedByteType = 1009;
	THREE.UnsignedShort4444Type = 1016;
	THREE.UnsignedShort5551Type = 1017;
	THREE.UnsignedShort565Type = 1018;

	// Pixel formats

	THREE.AlphaFormat = 1019;
	THREE.RGBFormat = 1020;
	THREE.RGBAFormat = 1021;
	THREE.LuminanceFormat = 1022;
	THREE.LuminanceAlphaFormat = 1023;
	// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
	THREE.RGBEFormat = THREE.RGBAFormat; //1024;

	// DDS / ST3C Compressed texture formats

	THREE.RGB_S3TC_DXT1_Format = 2001;
	THREE.RGBA_S3TC_DXT1_Format = 2002;
	THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;


	// PVRTC compressed texture formats

	THREE.RGB_PVRTC_4BPPV1_Format = 2100;
	THREE.RGB_PVRTC_2BPPV1_Format = 2101;
	THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
	THREE.RGBA_PVRTC_2BPPV1_Format = 2103;

	// ETC compressed texture formats

	THREE.RGB_ETC1_Format = 2151;

	// Loop styles for AnimationAction

	THREE.LoopOnce = 2200;
	THREE.LoopRepeat = 2201;
	THREE.LoopPingPong = 2202;

	// Interpolation

	THREE.InterpolateDiscrete = 2300;
	THREE.InterpolateLinear = 2301;
	THREE.InterpolateSmooth = 2302;

	// Interpolant ending modes

	THREE.ZeroCurvatureEnding = 2400;
	THREE.ZeroSlopeEnding = 2401;
	THREE.WrapAroundEnding = 2402;

	// Triangle Draw modes

	THREE.TrianglesDrawMode = 0;
	THREE.TriangleStripDrawMode = 1;
	THREE.TriangleFanDrawMode = 2;

	// File:src/math/Color.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Color = function ( color ) {

		if ( arguments.length === 3 ) {

			return this.fromArray( arguments );

		}

		return this.set( color );

	};

	THREE.Color.prototype = {

		constructor: THREE.Color,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value instanceof THREE.Color ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function () {

			function hue2rgb( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			}

			return function ( h, s, l ) {

				// h,s,l ranges are in 0.0 - 1.0
				h = THREE.Math.euclideanModulo( h, 1 );
				s = THREE.Math.clamp( s, 0, 1 );
				l = THREE.Math.clamp( l, 0, 1 );

				if ( s === 0 ) {

					this.r = this.g = this.b = l;

				} else {

					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;

					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );

				}

				return this;

			};

		}(),

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				// color keywords
				var hex = THREE.ColorKeywords[ style ];

				if ( hex !== undefined ) {

					// red
					this.setHex( hex );

				} else {

					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );

				}

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) gammaFactor = 2.0;

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function () {

			var r = this.r, g = this.g, b = this.b;

			this.r = r * r;
			this.g = g * g;
			this.b = b * b;

			return this;

		},

		convertLinearToGamma: function () {

			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( optionalTarget ) {

			// h,s,l ranges are in 0.0 - 1.0

			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;

			return hsl;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			var hsl = this.getHSL();

			hsl.h += h; hsl.s += s; hsl.l += l;

			this.setHSL( hsl.h, hsl.s, hsl.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		}

	};

	THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	// File:src/math/Quaternion.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Quaternion = function ( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	};

	THREE.Quaternion.prototype = {

		constructor: THREE.Quaternion,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get w () {

			return this._w;

		},

		set w ( value ) {

			this._w = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this.onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( euler instanceof THREE.Euler === false ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );

			var order = euler.order;

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this.onChangeCallback();

			return this;

		},

		setFromUnitVectors: function () {

			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

			// assumes direction vectors vFrom and vTo are normalized

			var v1, r;

			var EPS = 0.000001;

			return function ( vFrom, vTo ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				r = vFrom.dot( vTo ) + 1;

				if ( r < EPS ) {

					r = 0;

					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

						v1.set( - vFrom.y, vFrom.x, 0 );

					} else {

						v1.set( 0, - vFrom.z, vFrom.y );

					}

				} else {

					v1.crossVectors( vFrom, vTo );

				}

				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;

				this.normalize();

				return this;

			};

		}(),

		inverse: function () {

			this.conjugate().normalize();

			return this;

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this.onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this.onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this.onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

			if ( Math.abs( sinHalfTheta ) < 0.001 ) {

				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );

				return this;

			}

			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this.onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	Object.assign( THREE.Quaternion, {

		slerp: function( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function(
				dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	// File:src/math/Vector2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.Vector2 = function ( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	};

	THREE.Vector2.prototype = {

		constructor: THREE.Vector2,

		get width() {

			return this.x;

		},

		set width( value ) {

			this.x = value;

		},

		get height() {

			return this.y;

		},

		set height( value ) {

			this.y = value;

		},

		//

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;

			} else {

				this.x = 0;
				this.y = 0;

			}

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector2();
					max = new THREE.Vector2();

				}

				min.set( minVal, minVal );
				max.set( maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			return this;

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		lengthManhattan: function() {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) angle += 2 * Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	};

	// File:src/math/Vector3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector3 = function ( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	};

	THREE.Vector3.prototype = {

		constructor: THREE.Vector3,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;

			}

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function () {

			var quaternion;

			return function applyEuler( euler ) {

				if ( euler instanceof THREE.Euler === false ) {

					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

				}

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				this.applyQuaternion( quaternion.setFromEuler( euler ) );

				return this;

			};

		}(),

		applyAxisAngle: function () {

			var quaternion;

			return function applyAxisAngle( axis, angle ) {

				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

				this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

				return this;

			};

		}(),

		applyMatrix3: function ( m ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyMatrix4: function ( m ) {

			// input: THREE.Matrix4 affine matrix

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

			return this;

		},

		applyProjection: function ( m ) {

			// input: THREE.Matrix4 projection matrix

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;

			var qx = q.x;
			var qy = q.y;
			var qz = q.z;
			var qw = q.w;

			// calculate quat * vector

			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function () {

			var matrix;

			return function project( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );

			};

		}(),

		unproject: function () {

			var matrix;

			return function unproject( camera ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );

			};

		}(),

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			this.normalize();

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector3();
					max = new THREE.Vector3();

				}

				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		clampLength: function ( min, max ) {

			var length = this.length();

			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			return this;

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			var x = this.x, y = this.y, z = this.z;

			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;

			return this;

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function () {

			var v1, dot;

			return function projectOnVector( vector ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				v1.copy( vector ).normalize();

				dot = this.dot( v1 );

				return this.copy( v1 ).multiplyScalar( dot );

			};

		}(),

		projectOnPlane: function () {

			var v1;

			return function projectOnPlane( planeNormal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				v1.copy( this ).projectOnVector( planeNormal );

				return this.sub( v1 );

			}

		}(),

		reflect: function () {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			var v1;

			return function reflect( normal ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

			}

		}(),

		angleTo: function ( v ) {

			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

			// clamp, to handle numerical problems

			return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x;
			var dy = this.y - v.y;
			var dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		setFromMatrixPosition: function ( m ) {

			this.x = m.elements[ 12 ];
			this.y = m.elements[ 13 ];
			this.z = m.elements[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();
			var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();
			var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( index, matrix ) {

			var offset = index * 4;

			var me = matrix.elements;

			this.x = me[ offset ];
			this.y = me[ offset + 1 ];
			this.z = me[ offset + 2 ];

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];

			return this;

		}

	};

	// File:src/math/Vector4.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Vector4 = function ( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	};

	THREE.Vector4.prototype = {

		constructor: THREE.Vector4,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			if ( isFinite( scalar ) ) {

				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;

			} else {

				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;

			}

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x;
			var y = this.y;
			var z = this.z;
			var w = this.w;

			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				 this.x = 1;
				 this.y = 0;
				 this.z = 0;

			} else {

				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon )
			   && ( Math.abs( m13 - m31 ) < epsilon )
			   && ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 )
				   && ( Math.abs( m13 + m31 ) < epsilon2 )
				   && ( Math.abs( m23 + m32 ) < epsilon2 )
				   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
							  + ( m13 - m31 ) * ( m13 - m31 )
							  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// This function assumes min < max, if this assumption isn't true it will not operate correctly

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function () {

			var min, max;

			return function clampScalar( minVal, maxVal ) {

				if ( min === undefined ) {

					min = new THREE.Vector4();
					max = new THREE.Vector4();

				}

				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );

				return this.clamp( min, max );

			};

		}(),

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		lengthManhattan: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() );

		},

		setLength: function ( length ) {

			return this.multiplyScalar( length / this.length() );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			return this;

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromAttribute: function ( attribute, index, offset ) {

			if ( offset === undefined ) offset = 0;

			index = index * attribute.itemSize + offset;

			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];

			return this;

		}

	};

	// File:src/math/Euler.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Euler = function ( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || THREE.Euler.DefaultOrder;

	};

	THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	THREE.Euler.DefaultOrder = 'XYZ';

	THREE.Euler.prototype = {

		constructor: THREE.Euler,

		get x () {

			return this._x;

		},

		set x ( value ) {

			this._x = value;
			this.onChangeCallback();

		},

		get y () {

			return this._y;

		},

		set y ( value ) {

			this._y = value;
			this.onChangeCallback();

		},

		get z () {

			return this._z;

		},

		set z ( value ) {

			this._z = value;
			this.onChangeCallback();

		},

		get order () {

			return this._order;

		},

		set order ( value ) {

			this._order = value;
			this.onChangeCallback();

		},

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this.onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this.onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = THREE.Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.99999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.99999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.99999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.99999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )

			}

			this._order = order;

			if ( update !== false ) this.onChangeCallback();

			return this;

		},

		setFromQuaternion: function () {

			var matrix;

			return function ( q, order, update ) {

				if ( matrix === undefined ) matrix = new THREE.Matrix4();
				matrix.makeRotationFromQuaternion( q );
				this.setFromRotationMatrix( matrix, order, update );

				return this;

			};

		}(),

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function () {

			// WARNING: this discards revolution information -bhouston

			var q = new THREE.Quaternion();

			return function ( newOrder ) {

				q.setFromEuler( this );
				this.setFromQuaternion( q, newOrder );

			};

		}(),

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this.onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new THREE.Vector3( this._x, this._y, this._z );

			}

		},

		onChange: function ( callback ) {

			this.onChangeCallback = callback;

			return this;

		},

		onChangeCallback: function () {}

	};

	// File:src/math/Line3.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Line3 = function ( start, end ) {

		this.start = ( start !== undefined ) ? start : new THREE.Vector3();
		this.end = ( end !== undefined ) ? end : new THREE.Vector3();

	};

	THREE.Line3.prototype = {

		constructor: THREE.Line3,

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function () {

			var startP = new THREE.Vector3();
			var startEnd = new THREE.Vector3();

			return function ( point, clampToLine ) {

				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );

				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );

				var t = startEnd_startP / startEnd2;

				if ( clampToLine ) {

					t = THREE.Math.clamp( t, 0, 1 );

				}

				return t;

			};

		}(),

		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			var result = optionalTarget || new THREE.Vector3();

			return this.delta( result ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	};

	// File:src/math/Box2.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Box2 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );

	};

	THREE.Box2.prototype = {

		constructor: THREE.Box2,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector2();

			return function ( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector2();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {

				return false;

			}

			return true;

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector2();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector2();

			return function ( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Box3.js

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Box3 = function ( min, max ) {

		this.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );

	};

	THREE.Box3.prototype = {

		constructor: THREE.Box3,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			this.makeEmpty();

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, il = array.length; i < il; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;

				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function () {

			var v1 = new THREE.Vector3();

			return function ( center, size ) {

				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );

				return this;

			};

		}(),

		setFromObject: function () {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			var box;

			return function ( object ) {

				if ( box === undefined ) box = new THREE.Box3();

				var scope = this;

				this.makeEmpty();

				object.updateMatrixWorld( true );

				object.traverse( function ( node ) {

					var geometry = node.geometry;

					if ( geometry !== undefined ) {

						if ( geometry.boundingBox === null ) {

							geometry.computeBoundingBox();

						}

						box.copy( geometry.boundingBox );
						box.applyMatrix4( node.matrixWorld );
						scope.union( box );

					}

				} );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		center: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		size: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			if ( point.x < this.min.x || point.x > this.max.x ||
					 point.y < this.min.y || point.y > this.max.y ||
					 point.z < this.min.z || point.z > this.max.z ) {

				return false;

			}

			return true;

		},

		containsBox: function ( box ) {

			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

				return true;

			}

			return false;

		},

		getParameter: function ( point, optionalTarget ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			var result = optionalTarget || new THREE.Vector3();

			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.

			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
					 box.max.y < this.min.y || box.min.y > this.max.y ||
					 box.max.z < this.min.z || box.min.z > this.max.z ) {

				return false;

			}

			return true;

		},

		intersectsSphere: ( function () {

			var closestPoint;

			return function intersectsSphere( sphere ) {

				if ( closestPoint === undefined ) closestPoint = new THREE.Vector3();

				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, closestPoint );

				// If that point is inside the sphere, the AABB and sphere intersect.
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

			};

		} )(),

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= plane.constant && max >= plane.constant );

		},

		clampPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function () {

			var v1 = new THREE.Vector3();

			return function ( point ) {

				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();

			};

		}(),

		getBoundingSphere: function () {

			var v1 = new THREE.Vector3();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Sphere();

				result.center = this.center();
				result.radius = this.size( v1 ).length() * 0.5;

				return result;

			};

		}(),

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function () {

			var points = [
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3()
			];

			return function ( matrix ) {

				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

				this.makeEmpty();
				this.setFromPoints( points );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	};

	// File:src/math/Matrix3.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	THREE.Matrix3 = function () {

		this.elements = new Float32Array( [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix3.prototype = {

		constructor: THREE.Matrix3,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;
			te[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;
			te[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]

			);

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function ( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix3( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			// input: THREE.Matrix4
			// ( based on http://code.google.com/p/webgl-mjs/ )

			var me = matrix.elements;
			var te = this.elements;

			te[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];
			te[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];
			te[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];
			te[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];
			te[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];
			te[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];
			te[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];
			te[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];
			te[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];

			var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];

			// no inverse

			if ( det === 0 ) {

				var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnDegenerate || false ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				this.identity();

				return this;

			}

			this.multiplyScalar( 1.0 / det );

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];

			return array;

		},

		getNormalMatrix: function ( m ) {

			// input: THREE.Matrix4

			this.getInverse( m ).transpose();

			return this;

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function () {

			var te = this.elements;

			return [
				te[ 0 ], te[ 1 ], te[ 2 ],
				te[ 3 ], te[ 4 ], te[ 5 ],
				te[ 6 ], te[ 7 ], te[ 8 ]
			];

		}

	};

	// File:src/math/Matrix4.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.Matrix4 = function () {

		this.elements = new Float32Array( [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		] );

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	};

	THREE.Matrix4.prototype = {

		constructor: THREE.Matrix4,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new THREE.Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			this.elements.set( m.elements );

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			var te = this.elements;

			xAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );
			yAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );
			zAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);

			return this;

		},

		extractRotation: function () {

			var v1;

			return function ( m ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();

				var te = this.elements;
				var me = m.elements;

				var scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();
				var scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();
				var scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();

				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;

				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;

				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;

				return this;

			};

		}(),

		makeRotationFromEuler: function ( euler ) {

			if ( euler instanceof THREE.Euler === false ) {

				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			var te = this.elements;

			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;

			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;

			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );

			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		lookAt: function () {

			var x, y, z;

			return function ( eye, target, up ) {

				if ( x === undefined ) x = new THREE.Vector3();
				if ( y === undefined ) y = new THREE.Vector3();
				if ( z === undefined ) z = new THREE.Vector3();

				var te = this.elements;

				z.subVectors( eye, target ).normalize();

				if ( z.lengthSq() === 0 ) {

					z.z = 1;

				}

				x.crossVectors( up, z ).normalize();

				if ( x.lengthSq() === 0 ) {

					z.x += 0.0001;
					x.crossVectors( up, z ).normalize();

				}

				y.crossVectors( z, x );


				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

				return this;

			};

		}(),

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyToArray: function ( a, b, r ) {

			var te = this.elements;

			this.multiplyMatrices( a, b );

			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToVector3Array: function () {

			var v1;

			return function ( array, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;

				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );

				}

				return array;

			};

		}(),

		applyToBuffer: function () {

			var v1;

			return function applyToBuffer( buffer, offset, length ) {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;

				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );

					v1.applyMatrix4( this );

					buffer.setXYZ( v1.x, v1.y, v1.z );

				}

				return buffer;

			};

		}(),

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		flattenToArrayOffset: function ( array, offset ) {

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		},

		getPosition: function () {

			var v1;

			return function () {

				if ( v1 === undefined ) v1 = new THREE.Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

				var te = this.elements;
				return v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );

			};

		}(),

		setPosition: function ( v ) {

			var te = this.elements;

			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;

			return this;

		},

		getInverse: function ( m, throwOnInvertible ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements;
			var me = m.elements;

			var n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];
			var n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];
			var n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];
			var n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];

			te[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
			te[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
			te[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
			te[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			te[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
			te[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
			te[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
			te[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
			te[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
			te[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
			te[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
			te[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
			te[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
			te[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
			te[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
			te[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;

			var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

			if ( det === 0 ) {

				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

				if ( throwOnInvertible || false ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				this.identity();

				return this;

			}

			this.multiplyScalar( 1 / det );

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );

			return this;

		},

		decompose: function () {

			var vector, matrix;

			return function ( position, quaternion, scale ) {

				if ( vector === undefined ) vector = new THREE.Vector3();
				if ( matrix === undefined ) matrix = new THREE.Matrix4();

				var te = this.elements;

				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {

					sx = - sx;

				}

				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];

				// scale the rotation part

				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;

				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;

				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;

				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;

				quaternion.setFromRotationMatrix( matrix );

				scale.x = sx;
				scale.y = sy;
				scale.z = sz;

				return this;

			};

		}(),

		makeFrustum: function ( left, right, bottom, top, near, far ) {

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makePerspective: function ( fov, aspect, near, far ) {

			var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;

			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = right - left;
			var h = top - bottom;
			var p = far - near;

			var x = ( right + left ) / w;
			var y = ( top + bottom ) / h;
			var z = ( far + near ) / p;

			te[ 0 ] = 2 / w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 / h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 / p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array ) {

			this.elements.set( array );

			return this;

		},

		toArray: function () {

			var te = this.elements;

			return [
				te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
				te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
				te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
				te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
			];

		}

	};

	// File:src/math/Ray.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Ray = function ( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
		this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

	};

	THREE.Ray.prototype = {

		constructor: THREE.Ray,

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

		},

		recast: function () {

			var v1 = new THREE.Vector3();

			return function ( t ) {

				this.origin.copy( this.at( t, v1 ) );

				return this;

			};

		}(),

		closestPointToPoint: function ( point, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );

			if ( directionDistance < 0 ) {

				return result.copy( this.origin );

			}

			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function () {

			var v1 = new THREE.Vector3();

			return function ( point ) {

				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

				// point behind the ray

				if ( directionDistance < 0 ) {

					return this.origin.distanceToSquared( point );

				}

				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

				return v1.distanceToSquared( point );

			};

		}(),

		distanceSqToSegment: function () {

			var segCenter = new THREE.Vector3();
			var segDir = new THREE.Vector3();
			var diff = new THREE.Vector3();

			return function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

				// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment

				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );

				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;

				if ( det > 0 ) {

					// The ray and segment are not parallel.

					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;

					if ( s0 >= 0 ) {

						if ( s1 >= - extDet ) {

							if ( s1 <= extDet ) {

								// region 0
								// Minimum at interior points of ray and segment.

								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

							} else {

								// region 1

								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							// region 5

							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						if ( s1 <= - extDet ) {

							// region 4

							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						} else if ( s1 <= extDet ) {

							// region 3

							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;

						} else {

							// region 2

							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					}

				} else {

					// Ray and segment are parallel.

					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

				if ( optionalPointOnRay ) {

					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

				}

				if ( optionalPointOnSegment ) {

					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

				}

				return sqrDist;

			};

		}(),

		intersectSphere: function () {

			var v1 = new THREE.Vector3();

			return function ( sphere, optionalTarget ) {

				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;

				if ( d2 > radius2 ) return null;

				var thc = Math.sqrt( radius2 - d2 );

				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;

				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;

				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;

				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );

				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );

			}

		}(),

		intersectsSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) <= sphere.radius;

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t :  null;

		},

		intersectPlane: function ( plane, optionalTarget ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, optionalTarget );

		},



		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, optionalTarget ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

		},

		intersectsBox: ( function () {

			var v = new THREE.Vector3();

			return function ( box ) {

				return this.intersectBox( box, v ) !== null;

			};

		} )(),

		intersectTriangle: function () {

			// Compute the offset origin, edges, and normal.
			var diff = new THREE.Vector3();
			var edge1 = new THREE.Vector3();
			var edge2 = new THREE.Vector3();
			var normal = new THREE.Vector3();

			return function ( a, b, c, backfaceCulling, optionalTarget ) {

				// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp

				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );

				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;

				if ( DdN > 0 ) {

					if ( backfaceCulling ) return null;
					sign = 1;

				} else if ( DdN < 0 ) {

					sign = - 1;
					DdN = - DdN;

				} else {

					return null;

				}

				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {

					return null;

				}

				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {

					return null;

				}

				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {

					return null;

				}

				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );

				// t < 0, no intersection
				if ( QdN < 0 ) {

					return null;

				}

				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );

			};

		}(),

		applyMatrix4: function ( matrix4 ) {

			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	};

	// File:src/math/Sphere.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Sphere = function ( center, radius ) {

		this.center = ( center !== undefined ) ? center : new THREE.Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	};

	THREE.Sphere.prototype = {

		constructor: THREE.Sphere,

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function () {

			var box = new THREE.Box3();

			return function ( points, optionalCenter ) {

				var center = this.center;

				if ( optionalCenter !== undefined ) {

					center.copy( optionalCenter );

				} else {

					box.setFromPoints( points ).center( center );

				}

				var maxRadiusSq = 0;

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

				}

				this.radius = Math.sqrt( maxRadiusSq );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			// We use the following equation to compute the signed distance from
			// the center of the sphere to the plane.
			//
			// distance = q * n - d
			//
			// If this distance is greater than the radius of the sphere,
			// then there is no intersection.

			return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

		},

		clampPoint: function ( point, optionalTarget ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			var result = optionalTarget || new THREE.Vector3();

			result.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );

			}

			return result;

		},

		getBoundingBox: function ( optionalTarget ) {

			var box = optionalTarget || new THREE.Box3();

			box.set( this.center, this.center );
			box.expandByScalar( this.radius );

			return box;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	};

	// File:src/math/Frustum.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new THREE.Plane(),
			( p1 !== undefined ) ? p1 : new THREE.Plane(),
			( p2 !== undefined ) ? p2 : new THREE.Plane(),
			( p3 !== undefined ) ? p3 : new THREE.Plane(),
			( p4 !== undefined ) ? p4 : new THREE.Plane(),
			( p5 !== undefined ) ? p5 : new THREE.Plane()

		];

	};

	THREE.Frustum.prototype = {

		constructor: THREE.Frustum,

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function () {

			var sphere = new THREE.Sphere();

			return function ( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( object.matrixWorld );

				return this.intersectsSphere( sphere );

			};

		}(),

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function () {

			var p1 = new THREE.Vector3(),
				p2 = new THREE.Vector3();

			return function ( box ) {

				var planes = this.planes;

				for ( var i = 0; i < 6 ; i ++ ) {

					var plane = planes[ i ];

					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );

					// if both outside plane, no intersection

					if ( d1 < 0 && d2 < 0 ) {

						return false;

					}

				}

				return true;

			};

		}(),


		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	};

	// File:src/math/Plane.js

	/**
	 * @author bhouston / http://clara.io
	 */

	THREE.Plane = function ( normal, constant ) {

		this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	};

	THREE.Plane.prototype = {

		constructor: THREE.Plane,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

			return this;

		},

		setFromCoplanarPoints: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function ( a, b, c ) {

				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

				this.setFromNormalAndCoplanarPoint( normal, a );

				return this;

			};

		}(),

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, optionalTarget ) {

			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

		},

		orthoPoint: function ( point, optionalTarget ) {

			var perpendicularMagnitude = this.distanceToPoint( point );

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

		},

		intersectLine: function () {

			var v1 = new THREE.Vector3();

			return function ( line, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				var direction = line.delta( v1 );

				var denominator = this.normal.dot( direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {

						return result.copy( line.start );

					}

					// Unsure if this is the correct method to handle this case.
					return undefined;

				}

				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

				if ( t < 0 || t > 1 ) {

					return undefined;

				}

				return result.copy( direction ).multiplyScalar( t ).add( line.start );

			};

		}(),

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var m1 = new THREE.Matrix3();

			return function ( matrix, optionalNormalMatrix ) {

				// compute new normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );

				var newCoplanarPoint = this.coplanarPoint( v2 );
				newCoplanarPoint.applyMatrix4( matrix );

				this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

				return this;

			};

		}(),

		translate: function ( offset ) {

			this.constant = this.constant - offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	};

	// File:src/math/Math.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Math = {

		generateUUID: function () {

			// http://www.broofa.com/Tools/Math.uuid.htm

			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;

			return function () {

				for ( var i = 0; i < 36; i ++ ) {

					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

						uuid[ i ] = '-';

					} else if ( i === 14 ) {

						uuid[ i ] = '4';

					} else {

						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

					}

				}

				return uuid.join( '' );

			};

		}(),

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		random16: function () {

			console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function () {

			var degreeToRadiansFactor = Math.PI / 180;

			return function ( degrees ) {

				return degrees * degreeToRadiansFactor;

			};

		}(),

		radToDeg: function () {

			var radianToDegreesFactor = 180 / Math.PI;

			return function ( radians ) {

				return radians * radianToDegreesFactor;

			};

		}(),

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		nearestPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

		},

		nextPowerOfTwo: function ( value ) {

			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;

			return value;

		}

	};

	// File:src/math/Spline.js

	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Spline = function ( points ) {

		this.points = points;

		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		this.initFromArray = function ( a ) {

			this.points = [];

			for ( var i = 0; i < a.length; i ++ ) {

				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

			}

		};

		this.getPoint = function ( k ) {

			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;

			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];

			w2 = weight * weight;
			w3 = weight * w2;

			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

			return v3;

		};

		this.getControlPointsArray = function () {

			var i, p, l = this.points.length,
				coords = [];

			for ( i = 0; i < l; i ++ ) {

				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];

			}

			return coords;

		};

		// approximate length by summing linear segments

		this.getLength = function ( nSubDivisions ) {

			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new THREE.Vector3(),
				tmpVec = new THREE.Vector3(),
				chunkLengths = [],
				totalLength = 0;

			// first point has 0 length

			chunkLengths[ 0 ] = 0;

			if ( ! nSubDivisions ) nSubDivisions = 100;

			nSamples = this.points.length * nSubDivisions;

			oldPosition.copy( this.points[ 0 ] );

			for ( i = 1; i < nSamples; i ++ ) {

				index = i / nSamples;

				position = this.getPoint( index );
				tmpVec.copy( position );

				totalLength += tmpVec.distanceTo( oldPosition );

				oldPosition.copy( position );

				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );

				if ( intPoint !== oldIntPoint ) {

					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;

				}

			}

			// last point ends with total length

			chunkLengths[ chunkLengths.length ] = totalLength;

			return { chunks: chunkLengths, total: totalLength };

		};

		this.reparametrizeByArcLength = function ( samplingCoef ) {

			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new THREE.Vector3(),
				sl = this.getLength();

			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

			for ( i = 1; i < this.points.length; i ++ ) {

				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );

				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

				sampling = Math.ceil( samplingCoef * realDistance / sl.total );

				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );

				for ( j = 1; j < sampling - 1; j ++ ) {

					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );

				}

				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

			}

			this.points = newpoints;

		};

		// Catmull-Rom

		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;

			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/math/Triangle.js

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Triangle = function ( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new THREE.Vector3();
		this.b = ( b !== undefined ) ? b : new THREE.Vector3();
		this.c = ( c !== undefined ) ? c : new THREE.Vector3();

	};

	THREE.Triangle.normal = function () {

		var v0 = new THREE.Vector3();

		return function ( a, b, c, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}();

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	THREE.Triangle.barycoordFromPoint = function () {

		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function ( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new THREE.Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}();

	THREE.Triangle.containsPoint = function () {

		var v1 = new THREE.Vector3();

		return function ( point, a, b, c ) {

			var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}();

	THREE.Triangle.prototype = {

		constructor: THREE.Triangle,

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		area: function () {

			var v0 = new THREE.Vector3();
			var v1 = new THREE.Vector3();

			return function () {

				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );

				return v0.cross( v1 ).length() * 0.5;

			};

		}(),

		midpoint: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		normal: function ( optionalTarget ) {

			return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

		},

		plane: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Plane();

			return result.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		barycoordFromPoint: function ( point, optionalTarget ) {

			return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

		},

		containsPoint: function ( point ) {

			return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	};

	// File:src/math/Interpolant.js

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	THREE.Interpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	};

	THREE.Interpolant.prototype = {

		constructor: THREE.Interpolant,

		evaluate: function( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[   i1   ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {
	//- See http://jsperf.com/comparison-to-undefined/3
	//- slower code:
	//-
	//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ;) {

								if ( t1 === undefined ) {

									if ( t < t0 ) break forward_scan;

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

	//- slower code:
	//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ;) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) break; // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[   i1   ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function() {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function( i1, t0, t, t1 ) {

			throw new Error( "call to abstract method" );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function( i1, t0, t1 ) {

			// empty

		}

	};

	Object.assign( THREE.Interpolant.prototype, {

		beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_,

		afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
			THREE.Interpolant.prototype.copySampleValue_

	} );

	// File:src/math/interpolants/CubicInterpolant.js

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	THREE.CubicInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = -0;
		this._offsetPrev = -0;
		this._weightNext = -0;
		this._offsetNext = -0;

	};

	THREE.CubicInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.CubicInterpolant,

		DefaultSettings_: {

			endingStart: 	THREE.ZeroCurvatureEnding,
			endingEnd:		THREE.ZeroCurvatureEnding

		},

		intervalChanged_: function( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case THREE.ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case THREE.ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case THREE.WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
			var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
			var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
			var sN =       wN   * ppp   -           wN      * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	// File:src/math/interpolants/DiscreteInterpolant.js

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	THREE.DiscreteInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.DiscreteInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.DiscreteInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	// File:src/math/interpolants/LinearInterpolant.js

	/**
	 * @author tschw
	 */

	THREE.LinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.LinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.LinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	// File:src/math/interpolants/QuaternionLinearInterpolant.js

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	THREE.QuaternionLinearInterpolant = function(
			parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		THREE.Interpolant.call(
				this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	};

	THREE.QuaternionLinearInterpolant.prototype =
			Object.assign( Object.create( THREE.Interpolant.prototype ), {

		constructor: THREE.QuaternionLinearInterpolant,

		interpolate_: function( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				THREE.Quaternion.slerpFlat( result, 0,
						values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	// File:src/core/Clock.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Clock = function ( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	};

	THREE.Clock.prototype = {

		constructor: THREE.Clock,

		start: function () {

			this.startTime = performance.now();

			this.oldTime = this.startTime;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();

			}

			if ( this.running ) {

				var newTime = performance.now();

				diff = 0.001 * ( newTime - this.oldTime );
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	};

	// File:src/core/EventDispatcher.js

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	THREE.EventDispatcher = function () {};

	THREE.EventDispatcher.prototype = {

		constructor: THREE.EventDispatcher,

		apply: function ( object ) {

			object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
			object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
			object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
			object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;

		},

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return false;

			var listeners = this._listeners;

			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

				return true;

			}

			return false;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) return;

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = [];
				var length = listenerArray.length;

				for ( var i = 0; i < length; i ++ ) {

					array[ i ] = listenerArray[ i ];

				}

				for ( var i = 0; i < length; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	};

	// File:src/core/Layers.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Layers = function () {

		this.mask = 1;

	};

	THREE.Layers.prototype = {

		constructor: THREE.Layers,

		set: function ( channel ) {

			this.mask = 1 << channel;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel );

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	};

	// File:src/core/Raycaster.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	( function ( THREE ) {

		THREE.Raycaster = function ( origin, direction, near, far ) {

			this.ray = new THREE.Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

			this.near = near || 0;
			this.far = far || Infinity;

			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};

			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );

		};

		function ascSort( a, b ) {

			return a.distance - b.distance;

		}

		function intersectObject( object, raycaster, intersects, recursive ) {

			if ( object.visible === false ) return;

			object.raycast( raycaster, intersects );

			if ( recursive === true ) {

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					intersectObject( children[ i ], raycaster, intersects, true );

				}

			}

		}

		//

		THREE.Raycaster.prototype = {

			constructor: THREE.Raycaster,

			linePrecision: 1,

			set: function ( origin, direction ) {

				// direction is assumed to be normalized (for accurate distance calculations)

				this.ray.set( origin, direction );

			},

			setFromCamera: function ( coords, camera ) {

				if ( camera instanceof THREE.PerspectiveCamera ) {

					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

				} else if ( camera instanceof THREE.OrthographicCamera ) {

					this.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

				} else {

					console.error( 'THREE.Raycaster: Unsupported camera type.' );

				}

			},

			intersectObject: function ( object, recursive ) {

				var intersects = [];

				intersectObject( object, this, intersects, recursive );

				intersects.sort( ascSort );

				return intersects;

			},

			intersectObjects: function ( objects, recursive ) {

				var intersects = [];

				if ( Array.isArray( objects ) === false ) {

					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;

				}

				for ( var i = 0, l = objects.length; i < l; i ++ ) {

					intersectObject( objects[ i ], this, intersects, recursive );

				}

				intersects.sort( ascSort );

				return intersects;

			}

		};

	}( THREE ) );

	// File:src/core/Object3D.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	THREE.Object3D = function () {

		Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = THREE.Object3D.DefaultUp.clone();

		var position = new THREE.Vector3();
		var rotation = new THREE.Euler();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new THREE.Matrix4()
			},
			normalMatrix: {
				value: new THREE.Matrix3()
			}
		} );

		this.rotationAutoUpdate = true;

		this.matrix = new THREE.Matrix4();
		this.matrixWorld = new THREE.Matrix4();

		this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new THREE.Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	};

	THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
	THREE.Object3D.DefaultMatrixAutoUpdate = true;

	THREE.Object3D.prototype = {

		constructor: THREE.Object3D,

		applyMatrix: function ( matrix ) {

			this.matrix.multiplyMatrices( matrix, this.matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function () {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			var q1 = new THREE.Quaternion();

			return function ( axis, angle ) {

				q1.setFromAxisAngle( axis, angle );

				this.quaternion.multiply( q1 );

				return this;

			};

		}(),

		rotateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		rotateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function ( angle ) {

				return this.rotateOnAxis( v1, angle );

			};

		}(),

		translateOnAxis: function () {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			var v1 = new THREE.Vector3();

			return function ( axis, distance ) {

				v1.copy( axis ).applyQuaternion( this.quaternion );

				this.position.add( v1.multiplyScalar( distance ) );

				return this;

			};

		}(),

		translateX: function () {

			var v1 = new THREE.Vector3( 1, 0, 0 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateY: function () {

			var v1 = new THREE.Vector3( 0, 1, 0 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		translateZ: function () {

			var v1 = new THREE.Vector3( 0, 0, 1 );

			return function ( distance ) {

				return this.translateOnAxis( v1, distance );

			};

		}(),

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function () {

			var m1 = new THREE.Matrix4();

			return function ( vector ) {

				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

			};

		}(),

		lookAt: function () {

			// This routine does not support objects with rotated and/or translated parent(s)

			var m1 = new THREE.Matrix4();

			return function ( vector ) {

				m1.lookAt( vector, this.position, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}(),

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( object instanceof THREE.Object3D ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				object.dispatchEvent( { type: 'added' } );

				this.children.push( object );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;

				object.dispatchEvent( { type: 'removed' } );

				this.children.splice( index, 1 );

			}

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.updateMatrixWorld( true );

			return result.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function () {

			var position = new THREE.Vector3();
			var scale = new THREE.Vector3();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Quaternion();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, result, scale );

				return result;

			};

		}(),

		getWorldRotation: function () {

			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Euler();

				this.getWorldQuaternion( quaternion );

				return result.setFromQuaternion( quaternion, this.rotation.order, false );

			};

		}(),

		getWorldScale: function () {

			var position = new THREE.Vector3();
			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.updateMatrixWorld( true );

				this.matrixWorld.decompose( position, quaternion, result );

				return result;

			};

		}(),

		getWorldDirection: function () {

			var quaternion = new THREE.Quaternion();

			return function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

			};

		}(),

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate === true ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate === true || force === true ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				this.children[ i ].updateMatrixWorld( force );

			}

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};

				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;

			object.matrix = this.matrix.toArray();

			//

			if ( this.geometry !== undefined ) {

				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

				}

				object.geometry = this.geometry.uuid;

			}

			if ( this.material !== undefined ) {

				if ( meta.materials[ this.material.uuid ] === undefined ) {

					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

				}

				object.material = this.material.uuid;

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache ( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) recursive = true;

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.rotationAutoUpdate = source.rotationAutoUpdate;

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );

	THREE.Object3DIdCount = 0;

	// File:src/core/Face3.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = color instanceof THREE.Color ? color : new THREE.Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	};

	THREE.Face3.prototype = {

		constructor: THREE.Face3,

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	};

	// File:src/core/BufferAttribute.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferAttribute = function ( array, itemSize ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.itemSize = itemSize;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	};

	THREE.BufferAttribute.prototype = {

		constructor: THREE.BufferAttribute,

		get count() {

			return this.array.length / this.itemSize;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;

			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new THREE.Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyIndicesArray: function ( indices ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				var index = indices[ i ];

				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new THREE.Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new THREE.Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new THREE.Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	//

	THREE.Int8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int8Array( array ), itemSize );

	};

	THREE.Uint8Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8Array( array ), itemSize );

	};

	THREE.Uint8ClampedAttribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );

	};

	THREE.Int16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int16Array( array ), itemSize );

	};

	THREE.Uint16Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint16Array( array ), itemSize );

	};

	THREE.Int32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Int32Array( array ), itemSize );

	};

	THREE.Uint32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Uint32Array( array ), itemSize );

	};

	THREE.Float32Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float32Array( array ), itemSize );

	};

	THREE.Float64Attribute = function ( array, itemSize ) {

		return new THREE.BufferAttribute( new Float64Array( array ), itemSize );

	};


	// Deprecated

	THREE.DynamicBufferAttribute = function ( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new THREE.BufferAttribute( array, itemSize ).setDynamic( true );

	};

	// File:src/core/InstancedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {

		THREE.BufferAttribute.call( this, array, itemSize );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;

	THREE.InstancedBufferAttribute.prototype.copy = function ( source ) {

		THREE.BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBuffer = function ( array, stride ) {

		this.uuid = THREE.Math.generateUUID();

		this.array = array;
		this.stride = stride;

		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	};

	THREE.InterleavedBuffer.prototype = {

		constructor: THREE.InterleavedBuffer,

		get length () {

			return this.array.length;

		},

		get count () {

			return this.array.length / this.stride;

		},

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		},

		setDynamic: function ( value ) {

			this.dynamic = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.stride = source.stride;
			this.dynamic = source.dynamic;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) offset = 0;

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	// File:src/core/InstancedInterleavedBuffer.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {

		THREE.InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	};

	THREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );
	THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;

	THREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {

		THREE.InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	};

	// File:src/core/InterleavedBufferAttribute.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {

		this.uuid = THREE.Math.generateUUID();

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

	};


	THREE.InterleavedBufferAttribute.prototype = {

		constructor: THREE.InterleavedBufferAttribute,

		get length() {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
			return this.array.length;

		},

		get count() {

			return this.data.count;

		},

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	};

	// File:src/core/Geometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	THREE.Geometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.elementsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	THREE.Geometry.prototype = {

		constructor: THREE.Geometry,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];

			for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

				scope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

				if ( normals !== undefined ) {

					tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

				}

				if ( colors !== undefined ) {

					scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

				}

				if ( uvs !== undefined ) {

					tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );

				}

				if ( uvs2 !== undefined ) {

					tempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

				}

			}

			function addFace( a, b, c ) {

				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

				var face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

				}

			}

			if ( indices !== undefined ) {

				var groups = geometry.groups;

				if ( groups.length > 0 ) {

					for ( var i = 0; i < groups.length; i ++ ) {

						var group = groups[ i ];

						var start = group.start;
						var count = group.count;

						for ( var j = start, jl = start + count; j < jl; j += 3 ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );

						}

					}

				} else {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new THREE.Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new THREE.Vector3(), ab = new THREE.Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) areaWeighted = true;

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new THREE.Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new THREE.Vector3(), ab = new THREE.Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new THREE.Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new THREE.Vector3();
						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeTangents: function () {

			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

		},

		computeLineDistances: function () {

			var d = 0;
			var vertices = this.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				if ( i > 0 ) {

					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

				}

				this.lineDistances[ i ] = d;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new THREE.Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new THREE.Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( geometry instanceof THREE.Geometry === false ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ];

			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

			if ( matrix !== undefined ) {

				normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

				vertices1.push( vertexCopy );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

				faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( i = 0, il = uvs2.length; i < il; i ++ ) {

				var uv = uvs2[ i ], uvCopy = [];

				if ( uv === undefined ) {

					continue;

				}

				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

					uvCopy.push( uv[ j ].clone() );

				}

				uvs1.push( uvCopy );

			}

		},

		mergeMesh: function ( mesh ) {

			if ( mesh instanceof THREE.Mesh === false ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			mesh.matrixAutoUpdate && mesh.updateMatrix();

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				var dupIndex = - 1;

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

			}

			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.Geometry().copy( this );

		},

		copy: function ( source ) {

			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];

			var vertices = source.vertices;

			for ( var i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			var faces = source.faces;

			for ( var i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );

	THREE.GeometryIdCount = 0;

	// File:src/core/DirectGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.DirectGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'DirectGeometry';

		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	};

	THREE.DirectGeometry.prototype = {

		constructor: THREE.DirectGeometry,

		computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,

		computeFaceNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

		},

		computeVertexNormals: function () {

			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

		},

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = [];

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = [];

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );

	// File:src/core/BufferGeometry.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometry = function () {

		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

	};

	THREE.BufferGeometry.prototype = {

		constructor: THREE.BufferGeometry,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			this.index = index;

		},

		addAttribute: function ( name, attribute ) {

			if ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				this.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

				return;

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return;

			}

			this.attributes[ name ] = attribute;

			return this;

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		removeAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

		},

		rotateX: function () {

			// rotate geometry around world x-axis

			var m1;

			return function rotateX( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationX( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateY: function () {

			// rotate geometry around world y-axis

			var m1;

			return function rotateY( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationY( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		rotateZ: function () {

			// rotate geometry around world z-axis

			var m1;

			return function rotateZ( angle ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeRotationZ( angle );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		translate: function () {

			// translate geometry

			var m1;

			return function translate( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeTranslation( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		scale: function () {

			// scale geometry

			var m1;

			return function scale( x, y, z ) {

				if ( m1 === undefined ) m1 = new THREE.Matrix4();

				m1.makeScale( x, y, z );

				this.applyMatrix( m1 );

				return this;

			};

		}(),

		lookAt: function () {

			var obj;

			return function lookAt( vector ) {

				if ( obj === undefined ) obj = new THREE.Object3D();

				obj.lookAt( vector );

				obj.updateMatrix();

				this.applyMatrix( obj.matrix );

			};

		}(),

		center: function () {

			this.computeBoundingBox();

			var offset = this.boundingBox.center().negate();

			this.translate( offset.x, offset.y, offset.z );

			return offset;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object instanceof THREE.Points || object instanceof THREE.Line ) {

				var positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );

				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );

					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object instanceof THREE.Mesh ) {

				if ( geometry instanceof THREE.Geometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object instanceof THREE.Mesh ) {

				var direct = geometry.__directGeometry;

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			if ( geometry.verticesNeedUpdate === true ) {

				var attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				var attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				var attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				var attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				var attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			if ( geometry.indices.length > 0 ) {

				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );

					array.push( attribute.copyVector3sArray( morphTarget ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			var vector = new THREE.Vector3();

			return function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new THREE.Box3();

				}

				var positions = this.attributes.position.array;

				if ( positions ) {

					this.boundingBox.setFromArray( positions );

				}

				if ( positions === undefined || positions.length === 0 ) {

					this.boundingBox.min.set( 0, 0, 0 );
					this.boundingBox.max.set( 0, 0, 0 );

				}

				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

				}

			};

		}(),

		computeBoundingSphere: function () {

			var box = new THREE.Box3();
			var vector = new THREE.Vector3();

			return function () {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new THREE.Sphere();

				}

				var positions = this.attributes.position.array;

				if ( positions ) {

					var center = this.boundingSphere.center;

					box.setFromArray( positions );
					box.center( center );

					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

					var maxRadiusSq = 0;

					for ( var i = 0, il = positions.length; i < il; i += 3 ) {

						vector.fromArray( positions, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

					}

					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

					if ( isNaN( this.boundingSphere.radius ) ) {

						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

					}

				}

			};

		}(),

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC,

				pA = new THREE.Vector3(),
				pB = new THREE.Vector3(),
				pC = new THREE.Vector3(),

				cb = new THREE.Vector3(),
				ab = new THREE.Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					if ( groups.length === 0 ) {

						this.addGroup( 0, indices.length );

					}

					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

						var group = groups[ j ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;

							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;

							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;

							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;

						}

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( geometry instanceof THREE.BufferGeometry === false ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) offset = 0;

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) continue;

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeSize = attribute2.itemSize;

				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal.array;

			var x, y, z, n;

			for ( var i = 0, il = normals.length; i < il; i += 3 ) {

				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];

				n = 1.0 / Math.sqrt( x * x + y * y + z * z );

				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;

			}

		},

		toNonIndexed: function () {

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new THREE.BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				geometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				var array = Array.prototype.slice.call( index.array );

				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var array = Array.prototype.slice.call( attribute.array );

				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array
				};

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			// Handle primitives

			var parameters = this.parameters;

			if ( parameters !== undefined ) {

				var values = [];

				for ( var key in parameters ) {

					values.push( parameters[ key ] );

				}

				var geometry = Object.create( this.constructor.prototype );
				this.constructor.apply( geometry, values );
				return geometry;

			}

			return new this.constructor().copy( this );
			*/

			return new THREE.BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count );

			}

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );

	THREE.BufferGeometry.MaxIndex = 65535;

	// File:src/core/InstancedBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.InstancedBufferGeometry = function () {

		THREE.BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	};

	THREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;

	THREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {

		this.groups.push( {

			start: start,
			count: count,
			instances: instances

		} );

	};

	THREE.InstancedBufferGeometry.prototype.copy = function ( source ) {

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		var attributes = source.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		var groups = source.groups;

		for ( var i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.instances );

		}

		return this;

	};

	THREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );

	// File:src/core/Uniform.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Uniform = function ( type, value ) {

		this.type = type;
		this.value = value;

		this.dynamic = false;

	};

	THREE.Uniform.prototype = {

		constructor: THREE.Uniform,

		onUpdate: function ( callback ) {

			this.dynamic = true;
			this.onUpdateCallback = callback;

			return this;

		}

	};

	// File:src/animation/AnimationClip.js

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationClip = function ( name, duration, tracks ) {

		this.name = name || THREE.Math.generateUUID();
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

		// maybe only do these on demand, as doing them here could potentially slow down loading
		// but leaving these here during development as this ensures a lot of testing of these functions
		this.trim();
		this.optimize();

	};

	THREE.AnimationClip.prototype = {

		constructor: THREE.AnimationClip,

		resetDuration: function() {

			var tracks = this.tracks,
				duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max(
						duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

		},

		trim: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		optimize: function() {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.AnimationClip, {

		parse: function( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new THREE.AnimationClip( json.name, json.duration, tracks );

		},


		toJSON: function( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},


		CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = THREE.AnimationUtils.getKeyframeOrder( times );
				times = THREE.AnimationUtils.sortedArray( times, 1, order );
				values = THREE.AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
						new THREE.NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
			}

			return new THREE.AnimationClip( name, -1, tracks );

		},

		findByName: function( clipArray, name ) {

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}
			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function( morphTargets, fps ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function( animation, bones, nodeName ) {

			if ( ! animation ) {

				console.error( "  no animation in JSONLoader data" );
				return null;

			}

			var addNonemptyTrack = function(
					trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					THREE.AnimationUtils.flattenJSON(
							animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || -1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length == 0 ) continue;

				// process morph targets in a way exactly compatible
				// with AnimationHandler.init( animation )
				if ( animationKeys[0].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[k].morphTargets ) {

							for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0;
								m !== animationKeys[k].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[k];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )

						}

						tracks.push( new THREE.NumberKeyframeTrack(
								'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {
					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );

					addNonemptyTrack(
							THREE.QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );

					addNonemptyTrack(
							THREE.VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new THREE.AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );


	// File:src/animation/AnimationMixer.js

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.AnimationMixer = function( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	};

	THREE.AnimationMixer.prototype = {

		constructor: THREE.AnimationMixer,

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipName = ( typeof clip === 'string' ) ? clip : clip.name,
				clipObject = ( clip !== clipName ) ? clip : null,

				actionsForClip = this._actionsByClip[ clipName ],
				prototypeAction;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				clipObject = prototypeAction._clip;

				if ( clip !== clipName && clip !== clipObject ) {

					throw new Error(
							"Different clips with the same name detected!" );

				}

			}

			// clip must be known when specified via string
			if ( clipObject === null ) return null;

			// allocate all resources required to run it
			var newAction = new THREE.
					AnimationMixer._Action( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipName, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipName = ( typeof clip === 'string' ) ? clip : clip.name,
				actionsForClip = this._actionsByClip[ clipName ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function() {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				if ( action.enabled ) {

					action._update( time, deltaTime, timeDirection, accuIndex );

				}

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// return this mixer's root target object
		getRoot: function() {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function( clip ) {

			var actions = this._actions,
				clipName = clip.name,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipName ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipName in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipName ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );

	THREE.AnimationMixer._Action =
			function( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
				endingStart: 	THREE.ZeroCurvatureEnding,
				endingEnd:		THREE.ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants;	// bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null;			// for the memory manager
		this._byClipCacheIndex = null;		// for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = THREE.LoopRepeat;
		this._loopCount = -1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; 		// no. of repetitions when looping

		this.paused = false;				// false -> zero effective time scale
		this.enabled = true;				// true -> zero effective weight

		this.clampWhenFinished 	= false;	// keep feeding the last frame?

		this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

	};

	THREE.AnimationMixer._Action.prototype = {

		constructor: THREE.AnimationMixer._Action,

		// State & Scheduling

		play: function() {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function() {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function() {

			this.paused = false;
			this.enabled = true;

			this.time = 0;			// restart clip
			this._loopCount = -1;	// forget previous loops
			this._startTime = null;	// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function() {

			var start = this._startTime;

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this )

		},

		// return true when play has been called
		isScheduled: function() {

			return this._mixer._isActiveAction( this );

		},

		startAt: function( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function() {

			return this._effectiveWeight;

		},

		fadeIn: function( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function( fadeOutAction, duration, warp ) {

			var mixer = this._mixer;

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function() {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the weight stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 :timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function() {

			return this._effectiveTimeScale;

		},

		setDuration: function( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function( duration ) {

			return this.warp( this._currentTimeScale, 0, duration );

		},

		warp: function( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function() {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function() {

			return this._mixer;

		},

		getClip: function() {

			return this._clip;

		},

		getRoot: function() {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function( time, deltaTime, timeDirection, accuIndex ) {
			// called by the mixer

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.pause = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function( deltaTime ) {

			var time = this.time + deltaTime;

			if ( deltaTime === 0 ) return time;

			var duration = this._clip.duration,

				loop = this.loop,
				loopCount = this._loopCount,

				pingPong = false;

			switch ( loop ) {

				case THREE.LoopOnce:

					if ( loopCount === -1 ) {

						// just started

						this.loopCount = 0;
						this._setEndings( true, true, false );

					}

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else break;

					// reached the end

					if ( this.clampWhenFinished ) this.pause = true;
					else this.enabled = false;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? -1 : 1
					} );

					break;

				case THREE.LoopPingPong:

					pingPong = true;

				case THREE.LoopRepeat:

					if ( loopCount === -1 ) {

						// just started

						if ( deltaTime > 0 ) {

							loopCount = 0;

							this._setEndings(
									true, this.repetitions === 0, pingPong );

						} else {

							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1

							this._setEndings(
									this.repetitions === 0, true, pingPong );

						}

					}

					if ( time >= duration || time < 0 ) {

						// wrap around

						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;

						loopCount += Math.abs( loopDelta );

						var pending = this.repetitions - loopCount;

						if ( pending < 0 ) {

							// stop (switch state, clamp time, fire event)

							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;

							time = deltaTime > 0 ? duration : 0;

							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : -1
							} );

							break;

						} else if ( pending === 0 ) {

							// transition to last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

					if ( loop === THREE.LoopPingPong && ( loopCount & 1 ) === 1 ) {

						// invert time for the "pong round"

						this.time = time;

						return duration - time;

					}

					break;

			}

			this.time = time;

			return time;

		},

		_setEndings: function( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart 	= THREE.ZeroSlopeEnding;
				settings.endingEnd		= THREE.ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingStart = THREE.WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ?
							THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = THREE.WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant(),
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now; 				values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

			return this;

		}

	};

	// Implementation details:

	Object.assign( THREE.AnimationMixer.prototype, {

		_bindAction: function( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;

					binding = new THREE.PropertyMixer(
							THREE.PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipName = action._clip.name,
						actionsForClip = this._actionsByClip[ clipName ];

					this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipName, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function() {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 		knownActions: Array< _Action >	- used as prototypes
			// 		actionByRoot: _Action			- lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() { return scope._actions.length; },
					get inUse() { return scope._nActiveActions; }
				},
				bindings: {
					get total() { return scope._bindings.length; },
					get inUse() { return scope._nActiveBindings; }
				},
				controlInterpolants: {
					get total() { return scope._controlInterpolants.length; },
					get inUse() { return scope._nActiveControlInterpolants; }
				}

			};

		},

		// Memory management for _Action objects

		_isActiveAction: function( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function( action, clipName, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipName ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipName = action._clip.name,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipName ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( actions._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipName ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			remove_empty_map: {

				for ( var _ in bindingByName ) break remove_empty_map;

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function() {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new THREE.LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
							1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 )

	} );


	// File:src/animation/AnimationObjectGroup.js

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 * 	-	Add objects you would otherwise pass as 'root' to the
	 * 		constructor or the .clipAction method of AnimationMixer.
	 *
	 * 	-	Instead pass this object as 'root'.
	 *
	 * 	-	You can also add and remove objects later when the mixer
	 * 		is running.
	 *
	 * Note:
	 *
	 *  	Objects of this class appear as one object to the mixer,
	 *  	so cache control of the individual objects must be done
	 *  	on the group.
	 *
	 * Limitation:
	 *
	 * 	- 	The animated properties must be compatible among the
	 * 		all objects in the group.
	 *
	 *  -	A single property can either be controlled through a
	 *  	target group or directly, but not both.
	 *
	 * @author tschw
	 */

	THREE.AnimationObjectGroup = function( var_args ) {

		this.uuid = THREE.Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0;			// threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices;		// for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = [];					// inside: string
		this._parsedPaths = [];				// inside: { we don't care, here }
		this._bindings = []; 				// inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() { return scope._objects.length; },
				get inUse() { return this.total - scope.nCachedObjects_;  }
			},

			get bindingsPerObject() { return scope._bindings.length; }

		};

	};

	THREE.AnimationObjectGroup.prototype = {

		constructor: THREE.AnimationObjectGroup,

		add: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push(
								new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					var knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new THREE.PropertyBinding(
									object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject) {

					console.error( "Different objects with the same UUID " +
							"detected. Clean the caches or recreate your " +
							"infrastructure when reloading scenes..." );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function( var_args ) {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function( path, parsedPath ) {
			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) return bindings[ index ];

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects,
					n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];

				bindingsForPath[ i ] =
						new THREE.PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function( path ) {
			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	};


	// File:src/animation/AnimationUtils.js

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	THREE.AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function( array, from, to ) {

			if ( THREE.AnimationUtils.isTypedArray( array ) ) {

				return new array.constructor( array.subarray( from, to ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) return array;

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function( object ) {

			return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) return; // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {
				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {
				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		}

	};

	// File:src/animation/KeyframeTrack.js

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.KeyframeTrack = function ( name, times, values, interpolation ) {

		if( name === undefined ) throw new Error( "track name is undefined" );

		if( times === undefined || times.length === 0 ) {

			throw new Error( "no keyframes in track named " + name );

		}

		this.name = name;

		this.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

		this.validate();
		this.optimize();

	};

	THREE.KeyframeTrack.prototype = {

		constructor: THREE.KeyframeTrack,

		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function( result ) {

			return new THREE.DiscreteInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.LinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function( result ) {

			return new THREE.CubicInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function( interpolation ) {

			var factoryMethod = undefined;

			switch ( interpolation ) {

				case THREE.InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case THREE.InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case THREE.InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( message );
				return;

			}

			this.createInterpolant = factoryMethod;

		},

		getInterpolation: function() {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return THREE.InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return THREE.InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return THREE.InterpolateSmooth;

			}

		},

		getValueSize: function() {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {

			if( timeOffset !== 0.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {

			if( timeScale !== 1.0 ) {

				var times = this.times;

				for( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) ++ from;
			while ( to !== -1 && times[ to ] > endTime ) -- to;

			++ to; // inclusive -> exclusive bound

			if( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

				var stride = this.getValueSize();
				this.times = THREE.AnimationUtils.arraySlice( times, from, to );
				this.values = THREE.AnimationUtils.
						arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function() {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( "invalid value size in track", this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if( nKeys === 0 ) {

				console.error( "track is empty", this );
				valid = false;

			}

			var prevTime = null;

			for( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( "time is not a valid number", this, i, currTime );
					valid = false;
					break;

				}

				if( prevTime !== null && prevTime > currTime ) {

					console.error( "out of order keys", this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( THREE.AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( "value is not a valid number", this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function() {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				writeIndex = 1;

			for( var i = 1, n = times.length - 1; i <= n; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					// remove unnecessary keyframes same as their neighbors
					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}


					}

					++ writeIndex;

				}

			}

			if ( writeIndex !== times.length ) {

				this.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		}

	};

	// Static methods:

	Object.assign( THREE.KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		parse: function( json ) {

			if( json.type === undefined ) {

				throw new Error( "track type undefined, can not parse" );

			}

			var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );

			if ( json.times === undefined ) {

				console.warn( "legacy JSON format detected, converting" );

				var times = [], values = [];

				THREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

				json.times = times;
				json.values = values;

			}

			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {

				return trackType.parse( json );

			} else {

				// by default, we asssume a constructor compatible with the base
				return new trackType(
						json.name, json.times, json.values, json.interpolation );

			}

		},

		toJSON: function( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': THREE.AnimationUtils.convertArray( track.times, Array ),
					'values': THREE.AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		},

		_getTrackTypeForValueTypeName: function( typeName ) {

			switch( typeName.toLowerCase() ) {

				case "scalar":
				case "double":
				case "float":
				case "number":
				case "integer":

					return THREE.NumberKeyframeTrack;

				case "vector":
				case "vector2":
				case "vector3":
				case "vector4":

					return THREE.VectorKeyframeTrack;

				case "color":

					return THREE.ColorKeyframeTrack;

				case "quaternion":

					return THREE.QuaternionKeyframeTrack;

				case "bool":
				case "boolean":

					return THREE.BooleanKeyframeTrack;

				case "string":

					return THREE.StringKeyframeTrack;

			};

			throw new Error( "Unsupported typeName: " + typeName );

		}

	} );

	// File:src/animation/PropertyBinding.js

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyBinding = function ( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this.node = THREE.PropertyBinding.findNode(
				rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	};

	THREE.PropertyBinding.prototype = {

		constructor: THREE.PropertyBinding,

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function() {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = THREE.PropertyBinding.findNode(
						this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

	 		// ensure there is a value node
			if ( ! targetObject ) {

				console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
				return;

			}

			if( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if( ! targetObject.material ) {

							console.error( '  can not bind to material as node does not have a material', this );
							return;

						}

						if( ! targetObject.material.materials ) {

							console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if( ! targetObject.skeleton ) {

							console.error( '  can not bind to bones as node does not have a skeleton', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[i].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( '  can not bind to objectName of node, undefined', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if( targetObject[ objectIndex ] === undefined ) {

						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( ! nodeProperty ) {

				var nodeName = parsedPath.nodeName;

				console.error( "  trying to update property for track: " + nodeName +
						'.' + propertyName + " but it wasn't found.", targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;
				this.targetObject = targetObject;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;
				this.targetObject = targetObject;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {
				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
						return;

					}

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( nodeProperty.length !== undefined ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function() {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	};

	Object.assign( THREE.PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function() {},
		_setValue_unavailable: function() {},

		// initial state of these methods that calls 'bind'
		_getValue_unbound: THREE.PropertyBinding.prototype.getValue,
		_setValue_unbound: THREE.PropertyBinding.prototype.setValue,

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.node[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		]

	} );

	THREE.PropertyBinding.Composite =
			function( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath ||
				THREE.PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	};

	THREE.PropertyBinding.Composite.prototype = {

		constructor: THREE.PropertyBinding.Composite,

		getValue: function( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) binding.getValue( array, offset );

		},

		setValue: function( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function() {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_,
					n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	};

	THREE.PropertyBinding.create = function( root, path, parsedPath ) {

		if ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {

			return new THREE.PropertyBinding( root, path, parsedPath );

		} else {

			return new THREE.PropertyBinding.Composite( root, path, parsedPath );

		}

	};

	THREE.PropertyBinding.parseTrackName = function( trackName ) {

		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//	  .bone[Armature.DEF_cog].position
		// created and tested via https://regex101.com/#javascript

		var re = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/;
		var matches = re.exec(trackName);

		if( ! matches ) {
			throw new Error( "cannot parse trackName at all: " + trackName );
		}

	    if (matches.index === re.lastIndex) {
	        re.lastIndex++;
	    }

		var results = {
			// directoryName: matches[1], // (tschw) currently unused
			nodeName: matches[3], 	// allowed to be null, specified root node.
			objectName: matches[5],
			objectIndex: matches[7],
			propertyName: matches[9],
			propertyIndex: matches[11]	// allowed to be null, specifies that the whole property is set.
		};

		if( results.propertyName === null || results.propertyName.length === 0 ) {
			throw new Error( "can not parse propertyName from trackName: " + trackName );
		}

		return results;

	};

	THREE.PropertyBinding.findNode = function( root, nodeName ) {

		if( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if( root.skeleton ) {

			var searchSkeleton = function( skeleton ) {

				for( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[i];

					if( bone.name === nodeName ) {

						return bone;

					}
				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if( bone ) {

				return bone;

			}
		}

		// search into node subtree.
		if( root.children ) {

			var searchNodeSubtree = function( children ) {

				for( var i = 0; i < children.length; i ++ ) {

					var childNode = children[i];

					if( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

	// File:src/animation/PropertyMixer.js

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.PropertyMixer = function ( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':			mixFunction = this._slerp;		break;

			case 'string':
			case 'bool':

				bufferType = Array,		mixFunction = this._select;		break;

			default:					mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	};

	THREE.PropertyMixer.prototype = {

		constructor: THREE.PropertyMixer,

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function() {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function() {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			THREE.Quaternion.slerpFlat( buffer, dstOffset,
					buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	};

	// File:src/animation/tracks/BooleanKeyframeTrack.js

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.BooleanKeyframeTrack = function ( name, times, values ) {

		THREE.KeyframeTrack.call( this, name, times, values );

	};

	THREE.BooleanKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.IntepolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	// File:src/animation/tracks/NumberKeyframeTrack.js

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.NumberKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.NumberKeyframeTrack,

		ValueTypeName: 'number',

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/animation/tracks/QuaternionKeyframeTrack.js

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.QuaternionKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: THREE.InterpolateLinear,

		InterpolantFactoryMethodLinear: function( result ) {

			return new THREE.QuaternionLinearInterpolant(
					this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	// File:src/animation/tracks/StringKeyframeTrack.js

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.StringKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: THREE.IntepolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	// File:src/animation/tracks/VectorKeyframeTrack.js

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	THREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {

		THREE.KeyframeTrack.call( this, name, times, values, interpolation );

	};

	THREE.VectorKeyframeTrack.prototype =
			Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

		constructor: THREE.VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	// File:src/audio/Audio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Audio = function ( listener ) {

		THREE.Object3D.call( this );

		this.type = 'Audio';

		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this.filter = null;

	};

	THREE.Audio.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Audio.prototype.constructor = THREE.Audio;

	THREE.Audio.prototype.getOutput = function () {

		return this.gain;

	};

	THREE.Audio.prototype.load = function ( file ) {

		var buffer = new THREE.AudioBuffer( this.context );
		buffer.load( file );

		this.setBuffer( buffer );

		return this;

	};

	THREE.Audio.prototype.setNodeSource = function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	};

	THREE.Audio.prototype.setBuffer = function ( audioBuffer ) {

		var scope = this;

		audioBuffer.onReady( function( buffer ) {

			scope.source.buffer = buffer;
			scope.sourceType = 'buffer';
			if ( scope.autoplay ) scope.play();

		} );

		return this;

	};

	THREE.Audio.prototype.play = function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.source.buffer;
		source.loop = this.source.loop;
		source.onended = this.source.onended;
		source.start( 0, this.startTime );
		source.playbackRate.value = this.playbackRate;

		this.isPlaying = true;

		this.source = source;

		this.connect();

	};

	THREE.Audio.prototype.pause = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = this.context.currentTime;

	};

	THREE.Audio.prototype.stop = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.startTime = 0;

	};

	THREE.Audio.prototype.connect = function () {

		if ( this.filter !== null ) {

			this.source.connect( this.filter );
			this.filter.connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

	};

	THREE.Audio.prototype.disconnect = function () {

		if ( this.filter !== null ) {

			this.source.disconnect( this.filter );
			this.filter.disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

	};

	THREE.Audio.prototype.getFilter = function () {

		return this.filter;

	};

	THREE.Audio.prototype.setFilter = function ( value ) {

		if ( value === undefined ) value = null;

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filter = value;
			this.connect();

		} else {

			this.filter = value;

		}

	};

	THREE.Audio.prototype.setPlaybackRate = function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.value = this.playbackRate;

		}

	};

	THREE.Audio.prototype.getPlaybackRate = function () {

		return this.playbackRate;

	};

	THREE.Audio.prototype.onEnded = function() {

		this.isPlaying = false;

	};

	THREE.Audio.prototype.setLoop = function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.loop = value;

	};

	THREE.Audio.prototype.getLoop = function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.source.loop;

	};


	THREE.Audio.prototype.setVolume = function ( value ) {

		this.gain.gain.value = value;

	};

	THREE.Audio.prototype.getVolume = function () {

		return this.gain.gain.value;

	};

	// File:src/audio/AudioAnalyser.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioAnalyser = function ( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	};

	THREE.AudioAnalyser.prototype = {

		constructor: THREE.AudioAnalyser,

		getData: function () {

			this.analyser.getByteFrequencyData( this.data );
			return this.data;

		}

	};

	// File:src/audio/AudioBuffer.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioBuffer = function ( context ) {

		this.context = context;
		this.ready = false;
		this.readyCallbacks = [];

	};

	THREE.AudioBuffer.prototype.load = function ( file ) {

		var scope = this;

		var request = new XMLHttpRequest();
		request.open( 'GET', file, true );
		request.responseType = 'arraybuffer';
		request.onload = function ( e ) {

			scope.context.decodeAudioData( this.response, function ( buffer ) {

				scope.buffer = buffer;
				scope.ready = true;

				for ( var i = 0; i < scope.readyCallbacks.length; i ++ ) {

					scope.readyCallbacks[ i ]( scope.buffer );

				}

				scope.readyCallbacks = [];

			} );

		};
		request.send();

		return this;

	};

	THREE.AudioBuffer.prototype.onReady = function ( callback ) {

		if ( this.ready ) {

			callback( this.buffer );

		} else {

			this.readyCallbacks.push( callback );

		}

	};

	// File:src/audio/PositionalAudio.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PositionalAudio = function ( listener ) {

		THREE.Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );

	};

	THREE.PositionalAudio.prototype = Object.create( THREE.Audio.prototype );
	THREE.PositionalAudio.prototype.constructor = THREE.PositionalAudio;

	THREE.PositionalAudio.prototype.getOutput = function () {

		return this.panner;

	};

	THREE.PositionalAudio.prototype.setRefDistance = function ( value ) {

		this.panner.refDistance = value;

	};

	THREE.PositionalAudio.prototype.getRefDistance = function () {

		return this.panner.refDistance;

	};

	THREE.PositionalAudio.prototype.setRolloffFactor = function ( value ) {

		this.panner.rolloffFactor = value;

	};

	THREE.PositionalAudio.prototype.getRolloffFactor = function () {

		return this.panner.rolloffFactor;

	};

	THREE.PositionalAudio.prototype.setDistanceModel = function ( value ) {

		this.panner.distanceModel = value;

	};

	THREE.PositionalAudio.prototype.getDistanceModel = function () {

		return this.panner.distanceModel;

	};

	THREE.PositionalAudio.prototype.setMaxDistance = function ( value ) {

		this.panner.maxDistance = value;

	};

	THREE.PositionalAudio.prototype.getMaxDistance = function () {

		return this.panner.maxDistance;

	};

	THREE.PositionalAudio.prototype.updateMatrixWorld = ( function () {

		var position = new THREE.Vector3();

		return function updateMatrixWorld( force ) {

			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )();

	// File:src/audio/AudioListener.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AudioListener = function () {

		THREE.Object3D.call( this );

		this.type = 'AudioListener';

		this.context = new ( window.AudioContext || window.webkitAudioContext )();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

	};

	THREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );
	THREE.AudioListener.prototype.constructor = THREE.AudioListener;

	THREE.AudioListener.prototype.getInput = function () {

		return this.gain;

	};

	THREE.AudioListener.prototype.removeFilter = function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	};

	THREE.AudioListener.prototype.setFilter = function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	};

	THREE.AudioListener.prototype.getFilter = function () {

		return this.filter;

	};

	THREE.AudioListener.prototype.setMasterVolume = function ( value ) {

		this.gain.gain.value = value;

	};

	THREE.AudioListener.prototype.getMasterVolume = function () {

		return this.gain.gain.value;

	};


	THREE.AudioListener.prototype.updateMatrixWorld = ( function () {

		var position = new THREE.Vector3();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3();

		var orientation = new THREE.Vector3();

		return function updateMatrixWorld( force ) {

			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			listener.setPosition( position.x, position.y, position.z );
			listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

		};

	} )();

	// File:src/cameras/Camera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.Camera = function () {

		THREE.Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new THREE.Matrix4();
		this.projectionMatrix = new THREE.Matrix4();

	};

	THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Camera.prototype.constructor = THREE.Camera;

	THREE.Camera.prototype.getWorldDirection = function () {

		var quaternion = new THREE.Quaternion();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}();

	THREE.Camera.prototype.lookAt = function () {

		// This routine does not support cameras with rotated and/or translated parent(s)

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			m1.lookAt( this.position, vector, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}();

	THREE.Camera.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	THREE.Camera.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	};

	// File:src/cameras/CubeCamera.js

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CubeCamera = function ( near, far, cubeResolution ) {

		THREE.Object3D.call( this );

		this.type = 'CubeCamera';

		var fov = 90, aspect = 1;

		var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		var options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };

		this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

		this.updateCubeMap = function ( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );

			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );

			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );

			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );

			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );

			renderer.setRenderTarget( null );

		};

	};

	THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;

	// File:src/cameras/OrthographicCamera.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

		THREE.Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	};

	THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;

	THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		this.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );

	};

	THREE.OrthographicCamera.prototype.copy = function ( source ) {

		THREE.Camera.prototype.copy.call( this, source );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;

		return this;

	};

	THREE.OrthographicCamera.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		return data;

	};

	// File:src/cameras/PerspectiveCamera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

		THREE.Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.focalLength = 10;
		this.zoom = 1;

		this.fov = fov !== undefined ? fov : 50;
		this.aspect = aspect !== undefined ? aspect : 1;
		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;

		this.updateProjectionMatrix();

	};

	THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;


	/**
	 * Uses Focal Length (in mm) to estimate and set FOV
	 * 35mm (full-frame) camera is used if frame size is not specified;
	 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
	 */

	THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

		if ( frameHeight === undefined ) frameHeight = 24;

		this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
		this.updateProjectionMatrix();

	};


	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */

	THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

		this.fullWidth = fullWidth;
		this.fullHeight = fullHeight;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;

		this.updateProjectionMatrix();

	};


	THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

		var fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );

		if ( this.fullWidth ) {

			var aspect = this.fullWidth / this.fullHeight;
			var top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;
			var bottom = - top;
			var left = aspect * bottom;
			var right = aspect * top;
			var width = Math.abs( right - left );
			var height = Math.abs( top - bottom );

			this.projectionMatrix.makeFrustum(
				left + this.x * width / this.fullWidth,
				left + ( this.x + this.width ) * width / this.fullWidth,
				top - ( this.y + this.height ) * height / this.fullHeight,
				top - this.y * height / this.fullHeight,
				this.near,
				this.far
			);

		} else {

			this.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );

		}

	};

	THREE.PerspectiveCamera.prototype.copy = function ( source ) {

		THREE.Camera.prototype.copy.call( this, source );

		this.focalLength = source.focalLength;
		this.zoom = source.zoom;

		this.fov = source.fov;
		this.aspect = source.aspect;
		this.near = source.near;
		this.far = source.far;

		return this;

	};

	THREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.focalLength = this.focalLength;
		data.object.zoom = this.zoom;

		data.object.fov = this.fov;
		data.object.aspect = this.aspect;
		data.object.near = this.near;
		data.object.far = this.far;

		return data;

	};

	// File:src/cameras/StereoCamera.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.StereoCamera = function () {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.cameraL = new THREE.PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new THREE.PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

	};

	THREE.StereoCamera.prototype = {

		constructor: THREE.StereoCamera,

		update: ( function () {

			var focalLength, fov, aspect, near, far;

			var eyeRight = new THREE.Matrix4();
			var eyeLeft = new THREE.Matrix4();

			return function update ( camera ) {

				var needsUpdate = focalLength !== camera.focalLength || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far;

				if ( needsUpdate ) {

					focalLength = camera.focalLength;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;

					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/

					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSep = 0.064 / 2;
					var eyeSepOnProjection = eyeSep * near / focalLength;
					var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
					var xmin, xmax;

					// translate xOffset

					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;

					// for left eye

					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraL.projectionMatrix.copy( projectionMatrix );

					// for right eye

					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;

					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

					this.cameraR.projectionMatrix.copy( projectionMatrix );

				}

				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

			};

		} )()

	};

	// File:src/lights/Light.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Light = function ( color, intensity ) {

		THREE.Object3D.call( this );

		this.type = 'Light';

		this.color = new THREE.Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	};

	THREE.Light.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Light.prototype.constructor = THREE.Light;

	THREE.Light.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	};

	THREE.Light.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.exponent !== undefined ) data.object.exponent = this.exponent;

		return data;

	};

	// File:src/lights/LightShadow.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LightShadow = function ( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new THREE.Vector2( 512, 512 );

		this.map = null;
		this.matrix = new THREE.Matrix4();

	};

	THREE.LightShadow.prototype = {

		constructor: THREE.LightShadow,

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	};

	// File:src/lights/AmbientLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AmbientLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	};

	THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );
	THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;

	// File:src/lights/DirectionalLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DirectionalLight = function ( color, intensity ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		this.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	};

	THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );
	THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;

	THREE.DirectionalLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/lights/HemisphereLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

		THREE.Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.groundColor = new THREE.Color( groundColor );

	};

	THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );
	THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;

	THREE.HemisphereLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	};

	// File:src/lights/PointLight.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	THREE.PointLight = function ( color, intensity, distance, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'PointLight';

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );

	};

	THREE.PointLight.prototype = Object.create( THREE.Light.prototype );
	THREE.PointLight.prototype.constructor = THREE.PointLight;

	THREE.PointLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/lights/SpotLight.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {

		THREE.Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.set( 0, 1, 0 );
		this.updateMatrix();

		this.target = new THREE.Object3D();

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.exponent = ( exponent !== undefined ) ? exponent : 10;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );

	};

	THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );
	THREE.SpotLight.prototype.constructor = THREE.SpotLight;

	THREE.SpotLight.prototype.copy = function ( source ) {

		THREE.Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.exponent = source.exponent;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	};

	// File:src/loaders/Cache.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) return;

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	// File:src/loaders/Loader.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Loader = function () {

		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};

	};

	THREE.Loader.prototype = {

		constructor: THREE.Loader,

		crossOrigin: undefined,

		extractUrlBase: function ( url ) {

			var parts = url.split( '/' );

			if ( parts.length === 1 ) return './';

			parts.pop();

			return parts.join( '/' ) + '/';

		},

		initMaterials: function ( materials, texturePath, crossOrigin ) {

			var array = [];

			for ( var i = 0; i < materials.length; ++ i ) {

				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

			}

			return array;

		},

		createMaterial: ( function () {

			var color, textureLoader, materialLoader;

			return function ( m, texturePath, crossOrigin ) {

				if ( color === undefined ) color = new THREE.Color();
				if ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();

				// convert from old material format

				var textures = {};

				function loadTexture( path, repeat, offset, wrap, anisotropy ) {

					var fullPath = texturePath + path;
					var loader = THREE.Loader.Handlers.get( fullPath );

					var texture;

					if ( loader !== null ) {

						texture = loader.load( fullPath );

					} else {

						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );

					}

					if ( repeat !== undefined ) {

						texture.repeat.fromArray( repeat );

						if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

					}

					if ( offset !== undefined ) {

						texture.offset.fromArray( offset );

					}

					if ( wrap !== undefined ) {

						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;

						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;

					}

					if ( anisotropy !== undefined ) {

						texture.anisotropy = anisotropy;

					}

					var uuid = THREE.Math.generateUUID();

					textures[ uuid ] = texture;

					return uuid;

				}

				//

				var json = {
					uuid: THREE.Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};

				for ( var name in m ) {

					var value = m[ name ];

					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = THREE[ value ];
							break;
						case 'colorAmbient':
							console.warn( 'THREE.Loader.createMaterial: colorAmbient is no longer supported' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = THREE.BackSide;
							break;
						case 'doubleSided':
							json.side = THREE.DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = THREE.VertexColors;
							if ( value === 'face' ) json.vertexColors = THREE.FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}

				}

				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

				if ( json.opacity < 1 ) json.transparent = true;

				materialLoader.setTextures( textures );

				return materialLoader.parse( json );

			};

		} )()

	};

	THREE.Loader.Handlers = {

		handlers: [],

		add: function ( regex, loader ) {

			this.handlers.push( regex, loader );

		},

		get: function ( file ) {

			var handlers = this.handlers;

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		}

	};

	// File:src/loaders/XHRLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.XHRLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.XHRLoader.prototype = {

		constructor: THREE.XHRLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = THREE.Cache.get( url );

			if ( cached !== undefined ) {

				if ( onLoad ) {

					setTimeout( function () {

						onLoad( cached );

					}, 0 );

				}

				return cached;

			}

			var request = new XMLHttpRequest();
			request.overrideMimeType( 'text/plain' );
			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				THREE.Cache.add( url, response );

				if ( this.status === 200 ) {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				} else {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}

			}, false );

			if ( onProgress !== undefined ) {

				request.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			request.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			request.send( null );

			scope.manager.itemStart( url );

			return request;

		},

		setPath: function ( value ) {

			this.path = value;

		},

		setResponseType: function ( value ) {

			this.responseType = value;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;

		}

	};

	// File:src/loaders/FontLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.FontLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.FontLoader.prototype = {

		constructor: THREE.FontLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new THREE.XHRLoader( this.manager );
			loader.load( url, function ( text ) {

				onLoad( new THREE.Font( JSON.parse( text.substring( 65, text.length - 2 ) ) ) );

			}, onProgress, onError );

		}

	};

	// File:src/loaders/ImageLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ImageLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.ImageLoader.prototype = {

		constructor: THREE.ImageLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) url = this.path + url;

			var scope = this;

			var cached = THREE.Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				if ( onLoad ) {

					setTimeout( function () {

						onLoad( cached );

						scope.manager.itemEnd( url );

					}, 0 );

				} else {

					scope.manager.itemEnd( url );

				}

				return cached;

			}

			var image = document.createElement( 'img' );

			image.addEventListener( 'load', function ( event ) {

				THREE.Cache.add( url, this );

				if ( onLoad ) onLoad( this );

				scope.manager.itemEnd( url );

			}, false );

			if ( onProgress !== undefined ) {

				image.addEventListener( 'progress', function ( event ) {

					onProgress( event );

				}, false );

			}

			image.addEventListener( 'error', function ( event ) {

				if ( onError ) onError( event );

				scope.manager.itemError( url );

			}, false );

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/JSONLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.JSONLoader = function ( manager ) {

		if ( typeof manager === 'boolean' ) {

			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;

		}

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		this.withCredentials = false;

	};

	THREE.JSONLoader.prototype = {

		constructor: THREE.JSONLoader,

		// Deprecated

		get statusDomElement () {

			if ( this._statusDomElement === undefined ) {

				this._statusDomElement = document.createElement( 'div' );

			}

			console.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );
			return this._statusDomElement;

		},

		load: function( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );

			var loader = new THREE.XHRLoader( this.manager );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {

				var json = JSON.parse( text );
				var metadata = json.metadata;

				if ( metadata !== undefined ) {

					var type = metadata.type;

					if ( type !== undefined ) {

						if ( type.toLowerCase() === 'object' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
							return;

						}

						if ( type.toLowerCase() === 'scene' ) {

							console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
							return;

						}

					}

				}

				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		parse: function ( json, texturePath ) {

			var geometry = new THREE.Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

			parseModel( scale );

			parseSkin();
			parseMorphing( scale );
			parseAnimations();

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			function parseModel( scale ) {

				function isBitSet( value, position ) {

					return value & ( 1 << position );

				}

				var i, j, fi,

				offset, zLength,

			colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

			vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				nUvLayers = 0;

				if ( json.uvs !== undefined ) {

					// disregard empty arrays

					for ( i = 0; i < json.uvs.length; i ++ ) {

						if ( json.uvs[ i ].length ) nUvLayers ++;

					}

					for ( i = 0; i < nUvLayers; i ++ ) {

						geometry.faceVertexUvs[ i ] = [];

					}

				}

				offset = 0;
				zLength = vertices.length;

				while ( offset < zLength ) {

					vertex = new THREE.Vector3();

					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;

					geometry.vertices.push( vertex );

				}

				offset = 0;
				zLength = faces.length;

				while ( offset < zLength ) {

					type = faces[ offset ++ ];


					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );

					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

					if ( isQuad ) {

						faceA = new THREE.Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];

						faceB = new THREE.Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];

						offset += 4;

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

								for ( j = 0; j < 4; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							faceB.normal.copy( faceA.normal );

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 4; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);


								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							faceA.color.setHex( hex );
							faceB.color.setHex( hex );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 4; i ++ ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

							}

						}

						geometry.faces.push( faceA );
						geometry.faces.push( faceB );

					} else {

						face = new THREE.Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];

						if ( hasMaterial ) {

							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;

						}

						// to get face <=> uv index correspondence

						fi = geometry.faces.length;

						if ( hasFaceVertexUv ) {

							for ( i = 0; i < nUvLayers; i ++ ) {

								uvLayer = json.uvs[ i ];

								geometry.faceVertexUvs[ i ][ fi ] = [];

								for ( j = 0; j < 3; j ++ ) {

									uvIndex = faces[ offset ++ ];

									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];

									uv = new THREE.Vector2( u, v );

									geometry.faceVertexUvs[ i ][ fi ].push( uv );

								}

							}

						}

						if ( hasFaceNormal ) {

							normalIndex = faces[ offset ++ ] * 3;

							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

						}

						if ( hasFaceVertexNormal ) {

							for ( i = 0; i < 3; i ++ ) {

								normalIndex = faces[ offset ++ ] * 3;

								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								face.vertexNormals.push( normal );

							}

						}


						if ( hasFaceColor ) {

							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );

						}


						if ( hasFaceVertexColor ) {

							for ( i = 0; i < 3; i ++ ) {

								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

							}

						}

						geometry.faces.push( face );

					}

				}

			};

			function parseSkin() {

				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

				if ( json.skinWeights ) {

					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

						geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

					}

				}

				if ( json.skinIndices ) {

					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

						geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

					}

				}

				geometry.bones = json.bones;

				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

				}

			};

			function parseMorphing( scale ) {

				if ( json.morphTargets !== undefined ) {

					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];

						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;

						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

							var vertex = new THREE.Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;

							dstVertices.push( vertex );

						}

					}

				}

				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						faces[ i ].color.fromArray( morphColors, i * 3 );

					}

				}

			}

			function parseAnimations() {

				var outputAnimations = [];

				// parse old style Bone/Hierarchy animations
				var animations = [];

				if ( json.animation !== undefined ) {

					animations.push( json.animation );

				}

				if ( json.animations !== undefined ) {

					if ( json.animations.length ) {

						animations = animations.concat( json.animations );

					} else {

						animations.push( json.animations );

					}

				}

				for ( var i = 0; i < animations.length; i ++ ) {

					var clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );
					if ( clip ) outputAnimations.push( clip );

				}

				// parse implicit morph animations
				if ( geometry.morphTargets ) {

					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );

				}

				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

			};

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		}

	};

	// File:src/loaders/LoadingManager.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

	};

	THREE.DefaultLoadingManager = new THREE.LoadingManager();

	// File:src/loaders/BufferGeometryLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BufferGeometryLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.BufferGeometryLoader.prototype = {

		constructor: THREE.BufferGeometryLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = new THREE.BufferGeometry();

			var index = json.data.index;

			var TYPED_ARRAYS = {
				'Int8Array': Int8Array,
				'Uint8Array': Uint8Array,
				'Uint8ClampedArray': Uint8ClampedArray,
				'Int16Array': Int16Array,
				'Uint16Array': Uint16Array,
				'Int32Array': Int32Array,
				'Uint32Array': Uint32Array,
				'Float32Array': Float32Array,
				'Float64Array': Float64Array
			};

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

				geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new THREE.Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );

			}

			return geometry;

		}

	};

	// File:src/loaders/MaterialLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MaterialLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.textures = {};

	};

	THREE.MaterialLoader.prototype = {

		constructor: THREE.MaterialLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		setTextures: function ( value ) {

			this.textures = value;

		},

		getTexture: function ( name ) {

			var textures = this.textures;

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		},

		parse: function ( json ) {

			var material = new THREE[ json.type ];

			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;

			// for PointsMaterial
			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

			// maps

			if ( json.map !== undefined ) material.map = this.getTexture( json.map );

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = this.getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

			if ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new THREE.Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

			if ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );

			if ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

			if ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );

			if ( json.envMap !== undefined ) {

				material.envMap = this.getTexture( json.envMap );
				material.combine = THREE.MultiplyOperation;

			}

			if ( json.reflectivity ) material.reflectivity = json.reflectivity;

			if ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

			if ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

			// MultiMaterial

			if ( json.materials !== undefined ) {

				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

					material.materials.push( this.parse( json.materials[ i ] ) );

				}

			}

			return material;

		}

	};

	// File:src/loaders/ObjectLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.ObjectLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.texturePath = '';

	};

	THREE.ObjectLoader.prototype = {

		constructor: THREE.ObjectLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.texturePath === '' ) {

				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

			}

			var scope = this;

			var loader = new THREE.XHRLoader( scope.manager );
			loader.load( url, function ( text ) {

				scope.parse( JSON.parse( text ), onLoad );

			}, onProgress, onError );

		},

		setTexturePath: function ( value ) {

			this.texturePath = value;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		parse: function ( json, onLoad ) {

			var geometries = this.parseGeometries( json.geometries );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) onLoad( object );

			} );

			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) onLoad( object );

			}

			return object;

		},

		parseGeometries: function ( json ) {

			var geometries = {};

			if ( json !== undefined ) {

				var geometryLoader = new THREE.JSONLoader();
				var bufferGeometryLoader = new THREE.BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new THREE[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new THREE.BoxGeometry(
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleBufferGeometry':

							geometry = new THREE.CircleBufferGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CircleGeometry':

							geometry = new THREE.CircleGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':

							geometry = new THREE.CylinderGeometry(
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':

							geometry = new THREE.SphereGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereBufferGeometry':

							geometry = new THREE.SphereBufferGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':

							geometry = new THREE.DodecahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'IcosahedronGeometry':

							geometry = new THREE.IcosahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'OctahedronGeometry':

							geometry = new THREE.OctahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'TetrahedronGeometry':

							geometry = new THREE.TetrahedronGeometry(
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':

							geometry = new THREE.RingGeometry(
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':

							geometry = new THREE.TorusGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':

							geometry = new THREE.TorusKnotGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.p,
								data.q,
								data.heightScale
							);

							break;

						case 'LatheGeometry':

							geometry = new THREE.LatheGeometry(
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'BufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) geometry.name = data.name;

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var materials = {};

			if ( json !== undefined ) {

				var loader = new THREE.MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = THREE.AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new THREE.LoadingManager( onLoad );

				var loader = new THREE.ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

					images[ image.uuid ] = loadImage( path );

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value ) {

				if ( typeof( value ) === 'number' ) return value;

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return THREE[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture = new THREE.Texture( images[ data.image ] );
					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) texture.name = data.name;
					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );
					if ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );
					if ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );
					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
					if ( Array.isArray( data.wrap ) ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ] );
						texture.wrapT = parseConstant( data.wrap[ 1 ] );

					}

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function () {

			var matrix = new THREE.Matrix4();

			return function ( data, geometries, materials ) {

				var object;

				function getGeometry( name ) {

					if ( geometries[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

					}

					return geometries[ name ];

				}

				function getMaterial( name ) {

					if ( name === undefined ) return undefined;

					if ( materials[ name ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', name );

					}

					return materials[ name ];

				}

				switch ( data.type ) {

					case 'Scene':

						object = new THREE.Scene();

						break;

					case 'PerspectiveCamera':

						object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

						break;

					case 'OrthographicCamera':

						object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

						break;

					case 'AmbientLight':

						object = new THREE.AmbientLight( data.color, data.intensity );

						break;

					case 'DirectionalLight':

						object = new THREE.DirectionalLight( data.color, data.intensity );

						break;

					case 'PointLight':

						object = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );

						break;

					case 'SpotLight':

						object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );

						break;

					case 'HemisphereLight':

						object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

						break;

					case 'Mesh':

						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );

						if ( geometry.bones && geometry.bones.length > 0 ) {

							object = new THREE.SkinnedMesh( geometry, material );

						} else {

							object = new THREE.Mesh( geometry, material );

						}

						break;

					case 'LOD':

						object = new THREE.LOD();

						break;

					case 'Line':

						object = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

						break;

					case 'PointCloud':
					case 'Points':

						object = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );

						break;

					case 'Sprite':

						object = new THREE.Sprite( getMaterial( data.material ) );

						break;

					case 'Group':

						object = new THREE.Group();

						break;

					default:

						object = new THREE.Object3D();

				}

				object.uuid = data.uuid;

				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {

					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );

				} else {

					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

				}

				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;

				if ( data.children !== undefined ) {

					for ( var child in data.children ) {

						object.add( this.parseObject( data.children[ child ], geometries, materials ) );

					}

				}

				if ( data.type === 'LOD' ) {

					var levels = data.levels;

					for ( var l = 0; l < levels.length; l ++ ) {

						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );

						if ( child !== undefined ) {

							object.addLevel( child, level.distance );

						}

					}

				}

				return object;

			}

		}()

	};

	// File:src/loaders/TextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.TextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.TextureLoader.prototype = {

		constructor: THREE.TextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new THREE.Texture();

			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {

				texture.image = image;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/CubeTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

	};

	THREE.CubeTextureLoader.prototype = {

		constructor: THREE.CubeTextureLoader,

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new THREE.CubeTexture( [] );

			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		},

		setCrossOrigin: function ( value ) {

			this.crossOrigin = value;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/loaders/BinaryTextureLoader.js

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */

	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};

	THREE.BinaryTextureLoader.prototype = {

		constructor: THREE.BinaryTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new THREE.DataTexture();

			var loader = new THREE.XHRLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );

			loader.load( url, function ( buffer ) {

				var texData = scope._parser( buffer );

				if ( ! texData ) return;

				if ( undefined !== texData.image ) {

					texture.image = texData.image;

				} else if ( undefined !== texData.data ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;

				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;

				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

				if ( undefined !== texData.format ) {

					texture.format = texData.format;

				}
				if ( undefined !== texData.type ) {

					texture.type = texData.type;

				}

				if ( undefined !== texData.mipmaps ) {

					texture.mipmaps = texData.mipmaps;

				}

				if ( 1 === texData.mipmapCount ) {

					texture.minFilter = THREE.LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture, texData );

			}, onProgress, onError );


			return texture;

		}

	};

	// File:src/loaders/CompressedTextureLoader.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */

	THREE.CompressedTextureLoader = function ( manager ) {

		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		// override in sub classes
		this._parser = null;

	};


	THREE.CompressedTextureLoader.prototype = {

		constructor: THREE.CompressedTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new THREE.CompressedTexture();
			texture.image = images;

			var loader = new THREE.XHRLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = THREE.LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps : [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = THREE.LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}, onProgress, onError );

			}

			return texture;

		},

		setPath: function ( value ) {

			this.path = value;

		}

	};

	// File:src/materials/Material.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Material = function () {

		Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.side = THREE.FrontSide;

		this.opacity = 1;
		this.transparent = false;

		this.blending = THREE.NormalBlending;

		this.blendSrc = THREE.SrcAlphaFactor;
		this.blendDst = THREE.OneMinusSrcAlphaFactor;
		this.blendEquation = THREE.AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = THREE.LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.alphaTest = 0;

		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

		this.visible = true;

		this._needsUpdate = true;

	};

	THREE.Material.prototype = {

		constructor: THREE.Material,

		get needsUpdate () {

			return this._needsUpdate;

		},

		set needsUpdate ( value ) {

			if ( value === true ) this.update();

			this._needsUpdate = value;

		},

		setValues: function ( values ) {

			if ( values === undefined ) return;

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue instanceof THREE.Color ) {

					currentValue.set( newValue );

				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

					currentValue.copy( newValue );

				} else if ( key === 'overdraw' ) {

					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = meta === undefined;

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;

			if ( this.color instanceof THREE.Color ) data.color = this.color.getHex();

			if ( this.roughness !== 0.5 ) data.roughness = this.roughness;
			if ( this.metalness !== 0.5 ) data.metalness = this.metalness;

			if ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();
			if ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;

			if ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.bumpMap instanceof THREE.Texture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}
			if ( this.normalMap instanceof THREE.Texture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale.toArray();

			}
			if ( this.displacementMap instanceof THREE.Texture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}
			if ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

			if ( this.envMap instanceof THREE.Texture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap

			}

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;
			if ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;
			if ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;
			if ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;
			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache ( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.side = source.side;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blending = source.blending;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.alphaTest = source.alphaTest;

			this.overdraw = source.overdraw;

			this.visible = source.visible;

			return this;

		},

		update: function () {

			this.dispatchEvent( { type: 'update' } );

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );

	THREE.MaterialIdCount = 0;

	// File:src/materials/LineBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round",
	 *
	 *  vertexColors: <bool>
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.LineBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;

	THREE.LineBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/LineDashedMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.FaceColors / THREE.VertexColors
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.LineDashedMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'LineDashedMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.linewidth = 1;

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;

	THREE.LineDashedMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		
		this.linewidth = source.linewidth;

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/MeshBasicMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.MeshBasicMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new THREE.Color( 0xffffff ); // emissive

		this.map = null;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;

		this.setValues( parameters );

	};

	THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;

	THREE.MeshBasicMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	// File:src/materials/MeshLambertMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshLambertMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;

	THREE.MeshLambertMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshPhongMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshPhongMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.specular = new THREE.Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;

	THREE.MeshPhongMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshStandardMaterial.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.MeshStandardMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshStandardMaterial';

		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new THREE.Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.fog = true;

		this.shading = THREE.SmoothShading;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.vertexColors = THREE.NoColors;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	};

	THREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;

	THREE.MeshStandardMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.fog = source.fog;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	// File:src/materials/MeshDepthMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshDepthMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.morphTargets = false;
		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.setValues( parameters );

	};

	THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;

	THREE.MeshDepthMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MeshNormalMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  shading: THREE.FlatShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	THREE.MeshNormalMaterial = function ( parameters ) {

		THREE.Material.call( this, parameters );

		this.type = 'MeshNormalMaterial';

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.morphTargets = false;

		this.setValues( parameters );

	};

	THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;

	THREE.MeshNormalMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	// File:src/materials/MultiMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.MultiMaterial = function ( materials ) {

		this.uuid = THREE.Math.generateUUID();

		this.type = 'MultiMaterial';

		this.materials = materials instanceof Array ? materials : [];

		this.visible = true;

	};

	THREE.MultiMaterial.prototype = {

		constructor: THREE.MultiMaterial,

		toJSON: function ( meta ) {

			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};

			var materials = this.materials;

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				var material = materials[ i ].toJSON( meta );
				delete material.metadata;

				output.materials.push( material );

			}

			output.visible = this.visible;

			return output;

		},

		clone: function () {

			var material = new this.constructor();

			for ( var i = 0; i < this.materials.length; i ++ ) {

				material.materials.push( this.materials[ i ].clone() );

			}

			material.visible = this.visible;

			return material;

		}

	};

	// File:src/materials/PointsMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  vertexColors: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.PointsMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new THREE.Color( 0xffffff );

		this.map = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.vertexColors = THREE.NoColors;

		this.fog = true;

		this.setValues( parameters );

	};

	THREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;

	THREE.PointsMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.vertexColors = source.vertexColors;

		this.fog = source.fog;

		return this;

	};

	// File:src/materials/ShaderMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */

	THREE.ShaderMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

		this.shading = THREE.SmoothShading;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog

		this.lights = false; // set to use scene lights

		this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

		this.skinning = false; // set to use skinning attribute streams

		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	};

	THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;

	THREE.ShaderMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = THREE.UniformsUtils.clone( source.uniforms );

		this.defines = source.defines;

		this.shading = source.shading;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.fog = source.fog;

		this.lights = source.lights;

		this.vertexColors = source.vertexColors;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	THREE.ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = THREE.Material.prototype.toJSON.call( this, meta );

		data.uniforms = this.uniforms;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		return data;

	};

	// File:src/materials/RawShaderMaterial.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.RawShaderMaterial = function ( parameters ) {

		THREE.ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	};

	THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;

	// File:src/materials/SpriteMaterial.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2(),
	 *
	 *  fog: <bool>
	 * }
	 */

	THREE.SpriteMaterial = function ( parameters ) {

		THREE.Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new THREE.Color( 0xffffff );
		this.map = null;

		this.rotation = 0;

		this.fog = false;

		// set parameters

		this.setValues( parameters );

	};

	THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;

	THREE.SpriteMaterial.prototype.copy = function ( source ) {

		THREE.Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.map = source.map;

		this.rotation = source.rotation;

		this.fog = source.fog;

		return this;

	};

	// File:src/textures/Texture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );

		this.uuid = THREE.Math.generateUUID();

		this.name = '';
		this.sourceFile = '';

		this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : THREE.RGBAFormat;
		this.type = type !== undefined ? type : THREE.UnsignedByteType;

		this.offset = new THREE.Vector2( 0, 0 );
		this.repeat = new THREE.Vector2( 1, 1 );

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		this.version = 0;
		this.onUpdate = null;

	};

	THREE.Texture.DEFAULT_IMAGE = undefined;
	THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;

	THREE.Texture.prototype = {

		constructor: THREE.Texture,

		set needsUpdate ( value ) {

			if ( value === true ) this.version ++;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;

			return this;

		},

		toJSON: function ( meta ) {

			if ( meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			function getDataURL( image ) {

				var canvas;

				if ( image.toDataURL !== undefined ) {

					canvas = image;

				} else {

					canvas = document.createElement( 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;

					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

				}

				if ( canvas.width > 2048 || canvas.height > 2048 ) {

					return canvas.toDataURL( 'image/jpeg', 0.6 );

				} else {

					return canvas.toDataURL( 'image/png' );

				}

			}

			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy
			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = THREE.Math.generateUUID(); // UGH

				}

				if ( meta.images[ image.uuid ] === undefined ) {

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};

				}

				output.image = image.uuid;

			}

			meta.textures[ this.uuid ] = output;

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== THREE.UVMapping )  return;

			uv.multiply( this.repeat );
			uv.add( this.offset );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case THREE.RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case THREE.RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case THREE.ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case THREE.MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );

	THREE.TextureIdCount = 0;

	// File:src/textures/CanvasTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	};

	THREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;

	// File:src/textures/CubeTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;

		THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.images = images;
		this.flipY = false;

	};

	THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;

	THREE.CubeTexture.prototype.copy = function ( source ) {

		THREE.Texture.prototype.copy.call( this, source );

		this.images = source.images;

		return this;

	};

	// File:src/textures/CompressedTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	};

	THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;

	// File:src/textures/DataTexture.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { data: data, width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;
		
		this.flipY = false;
		this.generateMipmaps  = false;

	};

	THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.DataTexture.prototype.constructor = THREE.DataTexture;

	// File:src/textures/VideoTexture.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.generateMipmaps = false;

		var scope = this;

		function update() {

			requestAnimationFrame( update );

			if ( video.readyState === video.HAVE_ENOUGH_DATA ) {

				scope.needsUpdate = true;

			}

		}

		update();

	};

	THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;

	// File:src/objects/Group.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Group = function () {

		THREE.Object3D.call( this );

		this.type = 'Group';

	};

	THREE.Group.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Group.prototype.constructor = THREE.Group;
	// File:src/objects/Points.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Points = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Points.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Points.prototype.constructor = THREE.Points;

	THREE.Points.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new THREE.Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry instanceof THREE.BufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() );

	THREE.Points.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// File:src/objects/Line.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Line = function ( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new THREE.LineSegments( geometry, material );

		}

		THREE.Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

	};

	THREE.Line.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Line.prototype.constructor = THREE.Line;

	THREE.Line.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();

		return function raycast( raycaster, intersects ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new THREE.Vector3();
			var vEnd = new THREE.Vector3();
			var interSegment = new THREE.Vector3();
			var interRay = new THREE.Vector3();
			var step = this instanceof THREE.LineSegments ? 2 : 1;

			if ( geometry instanceof THREE.BufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry instanceof THREE.Geometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		};

	}() );

	THREE.Line.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// DEPRECATED

	THREE.LineStrip = 0;
	THREE.LinePieces = 1;

	// File:src/objects/LineSegments.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LineSegments = function ( geometry, material ) {

		THREE.Line.call( this, geometry, material );

		this.type = 'LineSegments';

	};

	THREE.LineSegments.prototype = Object.create( THREE.Line.prototype );
	THREE.LineSegments.prototype.constructor = THREE.LineSegments;

	// File:src/objects/Mesh.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	THREE.Mesh = function ( geometry, material ) {

		THREE.Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = THREE.TrianglesDrawMode;

		this.updateMorphTargets();

	};

	THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Mesh.prototype.constructor = THREE.Mesh;

	THREE.Mesh.prototype.setDrawMode = function ( value ) {

		this.drawMode = value;

	};

	THREE.Mesh.prototype.updateMorphTargets = function () {

		if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

			this.morphTargetBase = - 1;
			this.morphTargetInfluences = [];
			this.morphTargetDictionary = {};

			for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

				this.morphTargetInfluences.push( 0 );
				this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

			}

		}

	};

	THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

		if ( this.morphTargetDictionary[ name ] !== undefined ) {

			return this.morphTargetDictionary[ name ];

		}

		console.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );

		return 0;

	};


	THREE.Mesh.prototype.raycast = ( function () {

		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();

		var vA = new THREE.Vector3();
		var vB = new THREE.Vector3();
		var vC = new THREE.Vector3();

		var tempA = new THREE.Vector3();
		var tempB = new THREE.Vector3();
		var tempC = new THREE.Vector3();

		var uvA = new THREE.Vector2();
		var uvB = new THREE.Vector2();
		var uvC = new THREE.Vector2();

		var barycoord = new THREE.Vector3();

		var intersectionPoint = new THREE.Vector3();
		var intersectionPointWorld = new THREE.Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			THREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

			var intersect;
			var material = object.material;

			if ( material.side === THREE.BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );

			}

			if ( intersect === null ) return null;

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) return null;

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );

			var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uvs ) {

					uvA.fromArray( uvs, a * 2 );
					uvB.fromArray( uvs, b * 2 );
					uvC.fromArray( uvs, c * 2 );

					intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

				}

				intersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var uvs, intersection;

			if ( geometry instanceof THREE.BufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( attributes.uv !== undefined ) {

					uvs = attributes.uv.array;

				}

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length; i < l; i += 3 ) {

						a = indices[ i ];
						b = indices[ i + 1 ];
						c = indices[ i + 2 ];

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else {


					for ( var i = 0, l = positions.length; i < l; i += 9 ) {

						a = i / 3;
						b = a + 1;
						c = a + 2;

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry instanceof THREE.Geometry ) {

				var fvA, fvB, fvC;
				var isFaceMaterial = material instanceof THREE.MultiMaterial;
				var materials = isFaceMaterial === true ? material.materials : null;

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) continue;

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() );

	THREE.Mesh.prototype.clone = function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	};

	// File:src/objects/Bone.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.Bone = function ( skin ) {

		THREE.Object3D.call( this );

		this.type = 'Bone';

		this.skin = skin;

	};

	THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Bone.prototype.constructor = THREE.Bone;

	THREE.Bone.prototype.copy = function ( source ) {
		
		THREE.Object3D.prototype.copy.call( this, source );
		
		this.skin = source.skin;
		
		return this;

	};

	// File:src/objects/Skeleton.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {

		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

		this.identityMatrix = new THREE.Matrix4();

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );

		// create a bone texture or an array of floats

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)

			
			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );

		} else {

			this.boneMatrices = new Float32Array( 16 * this.bones.length );

		}

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					this.boneInverses.push( new THREE.Matrix4() );

				}

			}

		}

	};

	THREE.Skeleton.prototype.calculateInverses = function () {

		this.boneInverses = [];

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			var inverse = new THREE.Matrix4();

			if ( this.bones[ b ] ) {

				inverse.getInverse( this.bones[ b ].matrixWorld );

			}

			this.boneInverses.push( inverse );

		}

	};

	THREE.Skeleton.prototype.pose = function () {

		var bone;

		// recover the bind-time world matrices

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			bone = this.bones[ b ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this.boneInverses[ b ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			bone = this.bones[ b ];

			if ( bone ) {

				if ( bone.parent ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	};

	THREE.Skeleton.prototype.update = ( function () {

		var offsetMatrix = new THREE.Matrix4();

		return function update() {

			// flatten bone matrices to array

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				// compute the offset between the current and the original transform

				var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
				offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );

			}

			if ( this.useVertexTexture ) {

				this.boneTexture.needsUpdate = true;

			}

		};

	} )();

	THREE.Skeleton.prototype.clone = function () {

		return new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

	};

	// File:src/objects/SkinnedMesh.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

		THREE.Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = "attached";
		this.bindMatrix = new THREE.Matrix4();
		this.bindMatrixInverse = new THREE.Matrix4();

		// init bones

		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.

		var bones = [];

		if ( this.geometry && this.geometry.bones !== undefined ) {

			var bone, gbone;

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				bone = new THREE.Bone( this );
				bones.push( bone );

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

				gbone = this.geometry.bones[ b ];

				if ( gbone.parent !== - 1 && gbone.parent !== null ) {

					bones[ gbone.parent ].add( bones[ b ] );

				} else {

					this.add( bones[ b ] );

				}

			}

		}

		this.normalizeSkinWeights();

		this.updateMatrixWorld( true );
		this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

	};


	THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;

	THREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	};

	THREE.SkinnedMesh.prototype.pose = function () {

		this.skeleton.pose();

	};

	THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {

		if ( this.geometry instanceof THREE.Geometry ) {

			for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

				var sw = this.geometry.skinWeights[ i ];

				var scale = 1.0 / sw.lengthManhattan();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1, 0, 0, 0 ); // do something reasonable

				}

			}

		} else if ( this.geometry instanceof THREE.BufferGeometry ) {

			var vec = new THREE.Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( var i = 0; i < skinWeight.count; i ++ ) {

				vec.x = skinWeight.getX( i );
				vec.y = skinWeight.getY( i );
				vec.z = skinWeight.getZ( i );
				vec.w = skinWeight.getW( i );

				var scale = 1.0 / vec.lengthManhattan();

				if ( scale !== Infinity ) {

					vec.multiplyScalar( scale );

				} else {

					vec.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

			}

		}

	};

	THREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {

		THREE.Mesh.prototype.updateMatrixWorld.call( this, true );

		if ( this.bindMode === "attached" ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === "detached" ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

		}

	};

	THREE.SkinnedMesh.prototype.clone = function() {

		return new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );

	};

	// File:src/objects/LOD.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.LOD = function () {

		THREE.Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			},
			objects: {
				get: function () {

					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;

				}
			}
		} );

	};


	THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LOD.prototype.constructor = THREE.LOD;

	THREE.LOD.prototype.addLevel = function ( object, distance ) {

		if ( distance === undefined ) distance = 0;

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	};

	THREE.LOD.prototype.getObjectForDistance = function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	};

	THREE.LOD.prototype.raycast = ( function () {

		var matrixPosition = new THREE.Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() );

	THREE.LOD.prototype.update = function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}();

	THREE.LOD.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		return this;

	};

	THREE.LOD.prototype.toJSON = function ( meta ) {

		var data = THREE.Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	};

	// File:src/objects/Sprite.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Sprite = ( function () {

		var indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );
		var vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );
		var uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );

		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		return function Sprite( material ) {

			THREE.Object3D.call( this );

			this.type = 'Sprite';

			this.geometry = geometry;
			this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

		};

	} )();

	THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Sprite.prototype.constructor = THREE.Sprite;

	THREE.Sprite.prototype.raycast = ( function () {

		var matrixPosition = new THREE.Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
			var guessSizeSq = this.scale.x * this.scale.y;

			if ( distanceSq > guessSizeSq ) {

				return;

			}

			intersects.push( {

				distance: Math.sqrt( distanceSq ),
				point: this.position,
				face: null,
				object: this

			} );

		};

	}() );

	THREE.Sprite.prototype.clone = function () {

		return new this.constructor( this.material ).copy( this );

	};

	// Backwards compatibility

	THREE.Particle = THREE.Sprite;

	// File:src/objects/LensFlare.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlare = function ( texture, size, distance, blending, color ) {

		THREE.Object3D.call( this );

		this.lensFlares = [];

		this.positionScreen = new THREE.Vector3();
		this.customUpdateCallback = undefined;

		if ( texture !== undefined ) {

			this.add( texture, size, distance, blending, color );

		}

	};

	THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LensFlare.prototype.constructor = THREE.LensFlare;


	/*
	 * Add: adds another flare
	 */

	THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new THREE.Color( 0xffffff );
		if ( blending === undefined ) blending = THREE.NormalBlending;

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	};

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	THREE.LensFlare.prototype.updateLensFlares = function () {

		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this.lensFlares[ f ];

			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	};

	THREE.LensFlare.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	};

	// File:src/scenes/Scene.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Scene = function () {

		THREE.Object3D.call( this );

		this.type = 'Scene';

		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

	};

	THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Scene.prototype.constructor = THREE.Scene;

	THREE.Scene.prototype.copy = function ( source ) {

		THREE.Object3D.prototype.copy.call( this, source );

		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	};

	// File:src/scenes/Fog.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.Fog = function ( color, near, far ) {

		this.name = '';

		this.color = new THREE.Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	};

	THREE.Fog.prototype.clone = function () {

		return new THREE.Fog( this.color.getHex(), this.near, this.far );

	};

	// File:src/scenes/FogExp2.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.FogExp2 = function ( color, density ) {

		this.name = '';

		this.color = new THREE.Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	};

	THREE.FogExp2.prototype.clone = function () {

		return new THREE.FogExp2( this.color.getHex(), this.density );

	};

	// File:src/renderers/shaders/ShaderChunk.js

	THREE.ShaderChunk = {};

	// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_fragment' ] = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl

	THREE.ShaderChunk[ 'alphamap_pars_fragment' ] = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl

	THREE.ShaderChunk[ 'alphatest_fragment' ] = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/ambient_pars.glsl

	THREE.ShaderChunk[ 'ambient_pars' ] = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	return PI * ambientLightColor;\n}\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl

	THREE.ShaderChunk[ 'aomap_fragment' ] = "#ifdef USE_AOMAP\n	reflectedLight.indirectDiffuse *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl

	THREE.ShaderChunk[ 'aomap_pars_fragment' ] = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl

	THREE.ShaderChunk[ 'begin_vertex' ] = "\nvec3 transformed = vec3( position );\n";

	// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl

	THREE.ShaderChunk[ 'beginnormal_vertex' ] = "\nvec3 objectNormal = vec3( normal );\n";

	// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl

	THREE.ShaderChunk[ 'bsdfs' ] = "float calcLightAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	if ( decayExponent > 0.0 ) {\n	  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = alpha * alpha;\n	float gl = dotNL + pow( a2 + ( 1.0 - a2 ) * dotNL * dotNL, 0.5 );\n	float gv = dotNV + pow( a2 + ( 1.0 - a2 ) * dotNV * dotNV, 0.5 );\n	return 1.0 / ( gl * gv );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = alpha * alpha;\n	float denom = dotNH * dotNH * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / ( denom * denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = roughness * roughness;\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_Smith( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / square( ggxRoughness + 0.0001 ) - 2.0 );\n}";

	// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl

	THREE.ShaderChunk[ 'color_fragment' ] = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl

	THREE.ShaderChunk[ 'color_pars_fragment' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl

	THREE.ShaderChunk[ 'color_pars_vertex' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl

	THREE.ShaderChunk[ 'color_vertex' ] = "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/common.glsl

	THREE.ShaderChunk[ 'common' ] = "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat square( const in float x ) { return x*x; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nvec3 inputToLinear( in vec3 a ) {\n	#ifdef GAMMA_INPUT\n		return pow( a, vec3( float( GAMMA_FACTOR ) ) );\n	#else\n		return a;\n	#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n	#ifdef GAMMA_OUTPUT\n		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n	#else\n		return a;\n	#endif\n}\n";

	// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl

	THREE.ShaderChunk[ 'defaultnormal_vertex' ] = "#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n	totalEmissiveLight *= emissiveColor.rgb;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl

	THREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl

	THREE.ShaderChunk[ 'envmap_fragment' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef DOUBLE_SIDED\n		float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#else\n		float flipNormal = 1.0;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor.xyz = inputToLinear( envColor.xyz );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'envmap_pars_fragment' ] = "#if defined( USE_ENVMAP ) || defined( STANDARD )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'envmap_pars_vertex' ] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	varying vec3 vReflect;\n	uniform float refractionRatio;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl

	THREE.ShaderChunk[ 'envmap_vertex' ] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n	vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	#ifdef ENVMAP_MODE_REFLECTION\n		vReflect = reflect( cameraToVertex, worldNormal );\n	#else\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl

	THREE.ShaderChunk[ 'fog_fragment' ] = "#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	\n	outgoingLight = mix( outgoingLight, fogColor, fogFactor );\n#endif";

	// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl

	THREE.ShaderChunk[ 'fog_pars_fragment' ] = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl

	THREE.ShaderChunk[ 'lightmap_fragment' ] = "#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'lightmap_pars_fragment' ] = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl

	THREE.ShaderChunk[ 'lights_lambert_vertex' ] = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		directLight = getPointDirectLight( pointLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		directLight = getSpotDirectLight( spotLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directLight = getDirectionalDirectLight( directionalLights[ i ], geometry );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl

	THREE.ShaderChunk[ 'lights_pars' ] = "#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	IncidentLight getDirectionalDirectLight( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		return directLight;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	IncidentLight getPointDirectLight( const in PointLight pointLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= calcLightAttenuation( length( lVector ), pointLight.distance, pointLight.decay );\n		return directLight;\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float angleCos;\n		float exponent;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	IncidentLight getSpotDirectLight( const in SpotLight spotLight, const in GeometricContext geometry ) {\n		IncidentLight directLight;\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float spotEffect = dot( directLight.direction, spotLight.direction );\n		if ( spotEffect > spotLight.angleCos ) {\n			float spotEffect = dot( spotLight.direction, directLight.direction );\n			spotEffect = saturate( pow( saturate( spotEffect ), spotLight.exponent ) );\n			directLight.color = spotLight.color;\n			directLight.color *= ( spotEffect * calcLightAttenuation( length( lVector ), spotLight.distance, spotLight.decay ) );\n		} else {\n			directLight.color = vec3( 0.0 );\n		}\n		return directLight;\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		return PI * mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n		#else\n			vec3 envMapColor = vec3( 0.0 );\n		#endif\n		envMapColor.rgb = inputToLinear( envMapColor.rgb );\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( square( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#ifdef DOUBLE_SIDED\n			float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#else\n			float flipNormal = 1.0;\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n		#endif\n		envMapColor.rgb = inputToLinear( envMapColor.rgb );\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_fragment' ] = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = "#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * PI * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl

	THREE.ShaderChunk[ 'lights_phong_pars_vertex' ] = "#ifdef USE_ENVMAP\n	varying vec3 vWorldPosition;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl

	THREE.ShaderChunk[ 'lights_phong_vertex' ] = "#ifdef USE_ENVMAP\n	vWorldPosition = worldPosition.xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/lights_standard_fragment.glsl

	THREE.ShaderChunk[ 'lights_standard_fragment' ] = "StandardMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n";

	// File:src/renderers/shaders/ShaderChunk/lights_standard_pars_fragment.glsl

	THREE.ShaderChunk[ 'lights_standard_pars_fragment' ] = "struct StandardMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n};\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * PI * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n}\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n}\n#define RE_Direct				RE_Direct_Standard\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Standard\n#define RE_IndirectSpecular		RE_IndirectSpecular_Standard\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n";

	// File:src/renderers/shaders/ShaderChunk/lights_template.glsl

	THREE.ShaderChunk[ 'lights_template' ] = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		directLight = getPointDirectLight( pointLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		directLight = getSpotDirectLight( spotLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		directLight = getDirectionalDirectLight( directionalLight, geometry );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		irradiance += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	RE_IndirectSpecular( radiance, geometry, material, reflectedLight );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl

	THREE.ShaderChunk[ 'linear_to_gamma_fragment' ] = "\n	outgoingLight = linearToOutput( outgoingLight );\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_fragment' ] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl

	THREE.ShaderChunk[ 'logdepthbuf_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl

	THREE.ShaderChunk[ 'map_fragment' ] = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor.xyz = inputToLinear( texelColor.xyz );\n	diffuseColor *= texelColor;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_pars_fragment' ] = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_fragment' ] = "#ifdef USE_MAP\n	diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl

	THREE.ShaderChunk[ 'map_particle_pars_fragment' ] = "#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_fragment' ] = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl

	THREE.ShaderChunk[ 'morphnormal_vertex' ] = "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";

	// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl

	THREE.ShaderChunk[ 'morphtarget_vertex' ] = "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl

	THREE.ShaderChunk[ 'normal_fragment' ] = "#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n	#endif\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'normalmap_pars_fragment' ] = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl

	THREE.ShaderChunk[ 'project_vertex' ] = "#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_fragment' ] = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float unpackDepth( const in vec4 rgba_depth ) {\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		return dot( rgba_depth, bit_shift );\n	}\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return 1.0;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec3 offset = vec3( - 1, 0, 1 ) * shadowRadius * 2.0 * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zzy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xzy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zyz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.zyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yzz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxz, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yzx, texelSize.y ), dp )\n			) * ( 1.0 / 21.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl

	THREE.ShaderChunk[ 'shadowmap_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl

	THREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n";

	// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl

	THREE.ShaderChunk[ 'skinbase_vertex' ] = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl

	THREE.ShaderChunk[ 'skinning_pars_vertex' ] = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl

	THREE.ShaderChunk[ 'skinning_vertex' ] = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl

	THREE.ShaderChunk[ 'skinnormal_vertex' ] = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_fragment' ] = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl

	THREE.ShaderChunk[ 'specularmap_pars_fragment' ] = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv2_pars_fragment' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv2_pars_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl

	THREE.ShaderChunk[ 'uv2_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl

	THREE.ShaderChunk[ 'uv_pars_fragment' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl

	THREE.ShaderChunk[ 'uv_pars_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n";

	// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl

	THREE.ShaderChunk[ 'uv_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

	// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl

	THREE.ShaderChunk[ 'worldpos_vertex' ] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n";

	// File:src/renderers/shaders/UniformsUtils.js

	/**
	 * Uniform Utilities
	 */

	THREE.UniformsUtils = {

		merge: function ( uniforms ) {

			var merged = {};

			for ( var u = 0; u < uniforms.length; u ++ ) {

				var tmp = this.clone( uniforms[ u ] );

				for ( var p in tmp ) {

					merged[ p ] = tmp[ p ];

				}

			}

			return merged;

		},

		clone: function ( uniforms_src ) {

			var uniforms_dst = {};

			for ( var u in uniforms_src ) {

				uniforms_dst[ u ] = {};

				for ( var p in uniforms_src[ u ] ) {

					var parameter_src = uniforms_src[ u ][ p ];

					if ( parameter_src instanceof THREE.Color ||
						 parameter_src instanceof THREE.Vector2 ||
						 parameter_src instanceof THREE.Vector3 ||
						 parameter_src instanceof THREE.Vector4 ||
						 parameter_src instanceof THREE.Matrix3 ||
						 parameter_src instanceof THREE.Matrix4 ||
						 parameter_src instanceof THREE.Texture ) {

						uniforms_dst[ u ][ p ] = parameter_src.clone();

					} else if ( Array.isArray( parameter_src ) ) {

						uniforms_dst[ u ][ p ] = parameter_src.slice();

					} else {

						uniforms_dst[ u ][ p ] = parameter_src;

					}

				}

			}

			return uniforms_dst;

		}

	};

	// File:src/renderers/shaders/UniformsLib.js

	/**
	 * Uniforms library for shared webgl shaders
	 */

	THREE.UniformsLib = {

		common: {

			"diffuse": { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity": { type: "f", value: 1.0 },

			"map": { type: "t", value: null },
			"offsetRepeat": { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

			"specularMap": { type: "t", value: null },
			"alphaMap": { type: "t", value: null },

			"envMap": { type: "t", value: null },
			"flipEnvMap": { type: "f", value: - 1 },
			"reflectivity": { type: "f", value: 1.0 },
			"refractionRatio": { type: "f", value: 0.98 }

		},

		aomap: {

			"aoMap": { type: "t", value: null },
			"aoMapIntensity": { type: "f", value: 1 }

		},

		lightmap: {

			"lightMap": { type: "t", value: null },
			"lightMapIntensity": { type: "f", value: 1 }

		},

		emissivemap: {

			"emissiveMap": { type: "t", value: null }

		},

		bumpmap: {

			"bumpMap": { type: "t", value: null },
			"bumpScale": { type: "f", value: 1 }

		},

		normalmap: {

			"normalMap": { type: "t", value: null },
			"normalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) }

		},

		displacementmap: {

			"displacementMap": { type: "t", value: null },
			"displacementScale": { type: "f", value: 1 },
			"displacementBias": { type: "f", value: 0 }

		},

		roughnessmap: {

			"roughnessMap": { type: "t", value: null }

		},

		metalnessmap: {

			"metalnessMap": { type: "t", value: null }

		},

		fog: {

			"fogDensity": { type: "f", value: 0.00025 },
			"fogNear": { type: "f", value: 1 },
			"fogFar": { type: "f", value: 2000 },
			"fogColor": { type: "c", value: new THREE.Color( 0xffffff ) }

		},

		ambient: {

			"ambientLightColor": { type: "fv", value: [] }

		},

		lights: {

			"directionalLights": { type: "sa", value: [], properties: {
				"direction": { type: "v3" },
				"color": { type: "c" },

				"shadow": { type: "i" },
				"shadowBias": { type: "f" },
				"shadowRadius": { type: "f" },
				"shadowMapSize": { type: "v2" }
			} },

			"directionalShadowMap": { type: "tv", value: [] },
			"directionalShadowMatrix": { type: "m4v", value: [] },

			"spotLights": { type: "sa", value: [], properties: {
				"color": { type: "c" },
				"position": { type: "v3" },
				"direction": { type: "v3" },
				"distance": { type: "f" },
				"angleCos": { type: "f" },
				"exponent": { type: "f" },
				"decay": { type: "f" },

				"shadow": { type: "i" },
				"shadowBias": { type: "f" },
				"shadowRadius": { type: "f" },
				"shadowMapSize": { type: "v2" }
			} },

			"spotShadowMap": { type: "tv", value: [] },
			"spotShadowMatrix": { type: "m4v", value: [] },

			"pointLights": { type: "sa", value: [], properties: {
				"color": { type: "c" },
				"position": { type: "v3" },
				"decay": { type: "f" },
				"distance": { type: "f" },

				"shadow": { type: "i" },
				"shadowBias": { type: "f" },
				"shadowRadius": { type: "f" },
				"shadowMapSize": { type: "v2" }
			} },

			"pointShadowMap": { type: "tv", value: [] },
			"pointShadowMatrix": { type: "m4v", value: [] },

			"hemisphereLights": { type: "sa", value: [], properties: {
				"direction": { type: "v3" },
				"skyColor": { type: "c" },
				"groundColor": { type: "c" }
			} }

		},

		points: {

			"diffuse": { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity": { type: "f", value: 1.0 },
			"size": { type: "f", value: 1.0 },
			"scale": { type: "f", value: 1.0 },
			"map": { type: "t", value: null },
			"offsetRepeat": { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) }

		}

	};

	// File:src/renderers/shaders/ShaderLib.js

	/**
	 * Webgl Shader Library for three.js
	 *
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */


	THREE.ShaderLib = {

		'basic': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "fog" ]

			] ),

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],

				"	#ifdef USE_ENVMAP",

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"	#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform float opacity;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],

				"	ReflectedLight reflectedLight;",
				"	reflectedLight.directDiffuse = vec3( 0.0 );",
				"	reflectedLight.directSpecular = vec3( 0.0 );",
				"	reflectedLight.indirectDiffuse = diffuseColor.rgb;",
				"	reflectedLight.indirectSpecular = vec3( 0.0 );",

					THREE.ShaderChunk[ "aomap_fragment" ],

				"	vec3 outgoingLight = reflectedLight.indirectDiffuse;",

					THREE.ShaderChunk[ "envmap_fragment" ],
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'lambert': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "ambient" ],
				THREE.UniformsLib[ "lights" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) }
				}

			] ),

			vertexShader: [

				"#define LAMBERT",

				"varying vec3 vLightFront;",

				"#ifdef DOUBLE_SIDED",

				"	varying vec3 vLightBack;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_lambert_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform float opacity;",

				"varying vec3 vLightFront;",

				"#ifdef DOUBLE_SIDED",

				"	varying vec3 vLightBack;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "ambient_pars" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmask_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
				"	vec3 totalEmissiveLight = emissive;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],

					// accumulation
				"	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );",

					THREE.ShaderChunk[ "lightmap_fragment" ],

				"	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );",

				"	#ifdef DOUBLE_SIDED",

				"		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;",

				"	#else",

				"		reflectedLight.directDiffuse = vLightFront;",

				"	#endif",

				"	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();",

					// modulation
					THREE.ShaderChunk[ "aomap_fragment" ],

				"	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveLight;",

					THREE.ShaderChunk[ "envmap_fragment" ],

					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'phong': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "bumpmap" ],
				THREE.UniformsLib[ "normalmap" ],
				THREE.UniformsLib[ "displacementmap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "ambient" ],
				THREE.UniformsLib[ "lights" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
					"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
					"shininess": { type: "f", value: 30 }
				}

			] ),

			vertexShader: [

				"#define PHONG",

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "displacementmap_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

				"	vNormal = normalize( transformedNormal );",

				"#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "displacementmap_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"	vViewPosition = - mvPosition.xyz;",

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_phong_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define PHONG",

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform vec3 specular;",
				"uniform float shininess;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "ambient_pars" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
				THREE.ShaderChunk[ "normalmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
				"	vec3 totalEmissiveLight = emissive;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "normal_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],

					// accumulation
					THREE.ShaderChunk[ "lights_phong_fragment" ],
					THREE.ShaderChunk[ "lights_template" ],

					// modulation
					THREE.ShaderChunk[ "aomap_fragment" ],

					"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",

					THREE.ShaderChunk[ "envmap_fragment" ],
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'standard': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "bumpmap" ],
				THREE.UniformsLib[ "normalmap" ],
				THREE.UniformsLib[ "displacementmap" ],
				THREE.UniformsLib[ "roughnessmap" ],
				THREE.UniformsLib[ "metalnessmap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "ambient" ],
				THREE.UniformsLib[ "lights" ],

				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
					"roughness": { type: "f", value: 0.5 },
					"metalness": { type: "f", value: 0 },
					"envMapIntensity" : { type: "f", value: 1 } // temporary
				}

			] ),

			vertexShader: [

				"#define STANDARD",

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "displacementmap_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {", // STANDARD

					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],

					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED

				"	vNormal = normalize( transformedNormal );",

				"#endif",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "displacementmap_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"	vViewPosition = - mvPosition.xyz;",

					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define STANDARD",

				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform float roughness;",
				"uniform float metalness;",
				"uniform float opacity;",

				"uniform float envMapIntensity;", // temporary

				"varying vec3 vViewPosition;",

				"#ifndef FLAT_SHADED",

				"	varying vec3 vNormal;",

				"#endif",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "bsdfs" ],
				THREE.ShaderChunk[ "ambient_pars" ],
				THREE.ShaderChunk[ "lights_pars" ],
				THREE.ShaderChunk[ "lights_standard_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
				THREE.ShaderChunk[ "normalmap_pars_fragment" ],
				THREE.ShaderChunk[ "roughnessmap_pars_fragment" ],
				THREE.ShaderChunk[ "metalnessmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );",
				"	vec3 totalEmissiveLight = emissive;",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "roughnessmap_fragment" ],
					THREE.ShaderChunk[ "metalnessmap_fragment" ],
					THREE.ShaderChunk[ "normal_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],

					// accumulation
					THREE.ShaderChunk[ "lights_standard_fragment" ],
					THREE.ShaderChunk[ "lights_template" ],

					// modulation
					THREE.ShaderChunk[ "aomap_fragment" ],

					"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveLight;",

					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'points': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "points" ],
				THREE.UniformsLib[ "fog" ]

			] ),

			vertexShader: [

				"uniform float size;",
				"uniform float scale;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "color_vertex" ],
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],

				"	#ifdef USE_SIZEATTENUATION",
				"		gl_PointSize = size * ( scale / - mvPosition.z );",
				"	#else",
				"		gl_PointSize = size;",
				"	#endif",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "map_particle_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_particle_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],

				"	outgoingLight = diffuseColor.rgb;",

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'dashed': {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "fog" ],

				{
					"scale"    : { type: "f", value: 1 },
					"dashSize" : { type: "f", value: 1 },
					"totalSize": { type: "f", value: 2 }
				}

			] ),

			vertexShader: [

				"uniform float scale;",
				"attribute float lineDistance;",

				"varying float vLineDistance;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "color_vertex" ],

				"	vLineDistance = scale * lineDistance;",

				"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"	gl_Position = projectionMatrix * mvPosition;",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 diffuse;",
				"uniform float opacity;",

				"uniform float dashSize;",
				"uniform float totalSize;",

				"varying float vLineDistance;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	if ( mod( vLineDistance, totalSize ) > dashSize ) {",

				"		discard;",

				"	}",

				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],

				"	outgoingLight = diffuseColor.rgb;", // simple shader

					THREE.ShaderChunk[ "fog_fragment" ],

				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",

				"}"

			].join( "\n" )

		},

		'depth': {

			uniforms: {

				"mNear": { type: "f", value: 1.0 },
				"mFar" : { type: "f", value: 2000.0 },
				"opacity" : { type: "f", value: 1.0 }

			},

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float mNear;",
				"uniform float mFar;",
				"uniform float opacity;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"	#ifdef USE_LOGDEPTHBUF_EXT",

				"		float depth = gl_FragDepthEXT / gl_FragCoord.w;",

				"	#else",

				"		float depth = gl_FragCoord.z / gl_FragCoord.w;",

				"	#endif",

				"	float color = 1.0 - smoothstep( mNear, mFar, depth );",
				"	gl_FragColor = vec4( vec3( color ), opacity );",

				"}"

			].join( "\n" )

		},

		'normal': {

			uniforms: {

				"opacity" : { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec3 vNormal;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vNormal = normalize( normalMatrix * normal );",

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",
				"varying vec3 vNormal;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'cube': {

			uniforms: {
				"tCube": { type: "t", value: null },
				"tFlip": { type: "f", value: - 1 }
			},

			vertexShader: [

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vWorldPosition = transformDirection( position, modelMatrix );",

				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform samplerCube tCube;",
				"uniform float tFlip;",

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

				"	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'equirect': {

			uniforms: {
				"tEquirect": { type: "t", value: null },
				"tFlip": { type: "f", value: - 1 }
			},

			vertexShader: [

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

				"	vWorldPosition = transformDirection( position, modelMatrix );",

				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tEquirect;",
				"uniform float tFlip;",

				"varying vec3 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"void main() {",

					// "	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
					"vec3 direction = normalize( vWorldPosition );",
					"vec2 sampleUV;",
					"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );",
					"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
					"gl_FragColor = texture2D( tEquirect, sampleUV );",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"}"

			].join( "\n" )

		},

		/* Depth encoding into RGBA texture
		 *
		 * based on SpiderGL shadow map example
		 * http://spidergl.org/example.php?id=6
		 *
		 * originally from
		 * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
		 *
		 * see also
		 * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
		 */

		'depthRGBA': {

			uniforms: {},

			vertexShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "skinbase_vertex" ],

					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				"}"

			].join( "\n" ),

			fragmentShader: [

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

				"vec4 pack_depth( const in float depth ) {",

				"	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );",
				"	res -= res.xxyz * bit_mask;",
				"	return res;",

				"}",

				"void main() {",

					THREE.ShaderChunk[ "logdepthbuf_fragment" ],

				"	#ifdef USE_LOGDEPTHBUF_EXT",

				"		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",

				"	#else",

				"		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

				"	#endif",

					//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
					//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
					//"gl_FragData[ 0 ] = pack_depth( z );",
					//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

				"}"

			].join( "\n" )

		},


		'distanceRGBA': {

			uniforms: {

				"lightPos": { type: "v3", value: new THREE.Vector3( 0, 0, 0 ) }

			},

			vertexShader: [

				"varying vec4 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],

					"vWorldPosition = worldPosition;",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 lightPos;",
				"varying vec4 vWorldPosition;",

				THREE.ShaderChunk[ "common" ],

				"vec4 pack1K ( float depth ) {",

				"	depth /= 1000.0;",
				"	const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"	const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"	vec4 res = mod( depth * bitSh * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );",
				"	res -= res.xxyz * bitMsk;",
				"	return res; ",

				"}",

				"float unpack1K ( vec4 color ) {",

				"	const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"	return dot( color, bitSh ) * 1000.0;",

				"}",

				"void main () {",

				"	gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );",

				"}"

			].join( "\n" )

		}

	};

	// File:src/renderers/WebGLRenderer.js

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	THREE.WebGLRenderer = function ( parameters ) {

		console.log( 'THREE.WebGLRenderer', THREE.REVISION );

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

		var lights = [];

		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;

		var morphInfluences = new Float32Array( 8 );

		var sprites = [];
		var lensFlares = [];

		// public properties

		this.domElement = _canvas;
		this.context = null;

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// flags

		this.autoScaleCubemaps = true;

		// internal properties

		var _this = this,

		// internal state cache

		_currentProgram = null,
		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,

		_currentScissor = new THREE.Vector4(),
		_currentScissorTest = null,

		_currentViewport = new THREE.Vector4(),

		//

		_usedTextureUnits = 0,

		//

		_clearColor = new THREE.Color( 0x000000 ),
		_clearAlpha = 0,

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_scissor = new THREE.Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		_viewport = new THREE.Vector4( 0, 0, _width, _height ),

		// frustum

		_frustum = new THREE.Frustum(),

		// camera matrices cache

		_projScreenMatrix = new THREE.Matrix4(),

		_vector3 = new THREE.Vector3(),

		// light arrays cache

		_lights = {

			hash: '',

			ambient: [ 0, 0, 0 ],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			shadows: [],
			shadowsPointLight: 0

		},

		// info

		_infoMemory = {

			geometries: 0,
			textures: 0

		},

		_infoRender = {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

		this.info = {

			render: _infoRender,
			memory: _infoMemory,
			programs: null

		};


		// initialize

		var _gl;

		try {

			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};

			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw 'Error creating WebGL context with your selected attributes.';

				} else {

					throw 'Error creating WebGL context.';

				}

			}

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error );

		}

		var extensions = new THREE.WebGLExtensions( _gl );

		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );

		if ( extensions.get( 'OES_element_index_uint' ) ) {

			THREE.BufferGeometry.MaxIndex = 4294967296;

		}

		var capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );

		var state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new THREE.WebGLProperties();
		var objects = new THREE.WebGLObjects( _gl, properties, this.info );
		var programCache = new THREE.WebGLPrograms( this, capabilities );
		var lightCache = new THREE.WebGLLights();

		this.info.programs = programCache.programs;

		var bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		//

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		function glClearColor( r, g, b, a ) {

			if ( _premultipliedAlpha === true ) {

				r *= a; g *= a; b *= a;

			}

			state.clearColor( r, g, b, a );

		}

		function setDefaultGLState() {

			state.init();

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		}

		function resetGLState() {

			_currentProgram = null;
			_currentCamera = null;

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;

			state.reset();

		}

		setDefaultGLState();

		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.properties = properties;
		this.state = state;

		// shadow map

		var shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );

		this.shadowMap = shadowMap;


		// Plugins

		var spritePlugin = new THREE.SpritePlugin( this, sprites );
		var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			extensions.get( 'WEBGL_lose_context' ).loseContext();

		};

		this.getMaxAnisotropy = ( function () {

			var value;

			return function getMaxAnisotropy() {

				if ( value !== undefined ) return value;

				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension !== null ) {

					value = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

				} else {

					value = 0;

				}

				return value;

			};

		} )();

		this.getPrecision = function () {

			return capabilities.precision;

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _viewport.z, _viewport.w, false );

		};

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.setSize = function ( width, height, updateStyle ) {

			_width = width;
			_height = height;

			_canvas.width = width * _pixelRatio;
			_canvas.height = height * _pixelRatio;

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.setViewport = function ( x, y, width, height ) {

			state.viewport( _viewport.set( x, y, width, height ) );

		};

		this.setScissor = function ( x, y, width, height ) {

			state.scissor( _scissor.set( x, y, width, height ) );

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return _clearColor;

		};

		this.setClearColor = function ( color, alpha ) {

			_clearColor.set( color );

			_clearAlpha = alpha !== undefined ? alpha : 1;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.getClearAlpha = function () {

			return _clearAlpha;

		};

		this.setClearAlpha = function ( alpha ) {

			_clearAlpha = alpha;

			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		this.clearTarget = function ( renderTarget, color, depth, stencil ) {

			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		};

		// Reset

		this.resetGLState = resetGLState;

		this.dispose = function() {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			resetGLState();
			setDefaultGLState();

			properties.clear();

		}

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			_infoMemory.textures --;


		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			_infoMemory.textures --;

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( texture.image && textureProperties.__image__webglTextureCube ) {

				// cube texture

				_gl.deleteTexture( textureProperties.__image__webglTextureCube );

			} else {

				// 2D texture

				if ( textureProperties.__webglInit === undefined ) return;

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			// remove all webgl properties
			properties.delete( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;

			_gl.deleteTexture( textureProperties.__webglTexture );

			if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

			}

			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );

		}

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.delete( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		this.renderBufferImmediate = function ( object, program, material ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

			var attributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

				if ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.shading === THREE.FlatShading ) {

					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

						var array = object.normalArray;

						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;

						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;

						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;

					}

				}

				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.normal );

				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasUvs && material.map ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.uv );

				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

				state.enableAttribute( attributes.color );

				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			setMaterial( material );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

			if ( geometryProgram !== _currentGeometryProgram ) {

				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;

			}

			// morph targets

			var morphTargetInfluences = object.morphTargetInfluences;

			if ( morphTargetInfluences !== undefined ) {

				var activeInfluences = [];

				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );

				}

				activeInfluences.sort( absNumericalSort );

				if ( activeInfluences.length > 8 ) {

					activeInfluences.length = 8;

				}

				var morphAttributes = geometry.morphAttributes;

				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];

					if ( influence[ 0 ] !== 0 ) {

						var index = influence[ 1 ];

						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

					} else {

						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

					}

				}

				var uniforms = program.getUniforms();

				if ( uniforms.morphTargetInfluences !== null ) {

					_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );

				}

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;

			if ( material.wireframe === true ) {

				index = objects.getWireframeAttribute( geometry );

			}

			var renderer;

			if ( index !== null ) {

				renderer = indexedBufferRenderer;
				renderer.setIndex( index );

			} else {

				renderer = bufferRenderer;

			}

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry );

				if ( index !== null ) {

					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

				}

			}

			//

			var dataStart = 0;
			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start;
			var rangeCount = geometry.drawRange.count;

			var groupStart = group !== null ? group.start : 0;
			var groupCount = group !== null ? group.count : Infinity;

			var drawStart = Math.max( dataStart, rangeStart, groupStart );
			var drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			//

			if ( object instanceof THREE.Mesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					switch ( object.drawMode ) {

						case THREE.TrianglesDrawMode:
							renderer.setMode( _gl.TRIANGLES );
							break;

						case THREE.TriangleStripDrawMode:
							renderer.setMode( _gl.TRIANGLE_STRIP );
							break;

						case THREE.TriangleFanDrawMode:
							renderer.setMode( _gl.TRIANGLE_FAN );
							break;

					}

				}


			} else if ( object instanceof THREE.Line ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object instanceof THREE.LineSegments ) {

					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object instanceof THREE.Points ) {

				renderer.setMode( _gl.POINTS );

			}

			if ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( material, program, geometry, startIndex ) {

			var extension;

			if ( geometry instanceof THREE.InstancedBufferGeometry ) {

				extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			if ( startIndex === undefined ) startIndex = 0;

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );

						if ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data instanceof THREE.InstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

						} else {

							if ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Sorting

		function absNumericalSort( a, b ) {

			return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

		}

		function painterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} else if ( a.material.id !== b.material.id ) {

				return a.material.id - b.material.id;

			} else if ( a.z !== b.z ) {

				return a.z - b.z;

			} else {

				return a.id - b.id;

			}

		}

		function reversePainterSortStable ( a, b ) {

			if ( a.object.renderOrder !== b.object.renderOrder ) {

				return a.object.renderOrder - b.object.renderOrder;

			} if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return a.id - b.id;

			}

		}

		// Rendering

		this.render = function ( scene, camera, renderTarget, forceClear ) {

			if ( camera instanceof THREE.Camera === false ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			var fog = scene.fog;

			// reset caching for this frame

			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null ) camera.updateMatrixWorld();

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			lights.length = 0;

			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;

			sprites.length = 0;
			lensFlares.length = 0;

			projectObject( scene, camera );

			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;

			if ( _this.sortObjects === true ) {

				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );

			}

			setupLights( lights, camera );

			//

			shadowMap.render( scene, camera );

			//

			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;

			if ( renderTarget === undefined ) {

				renderTarget = null;

			}

			this.setRenderTarget( renderTarget );

			if ( this.autoClear || forceClear ) {

				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

			}

			//

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				renderObjects( opaqueObjects, camera, fog, overrideMaterial );
				renderObjects( transparentObjects, camera, fog, overrideMaterial );

			} else {

				// opaque pass (front-to-back order)

				state.setBlending( THREE.NoBlending );
				renderObjects( opaqueObjects, camera, fog );

				// transparent pass (back-to-front order)

				renderObjects( transparentObjects, camera, fog );

			}

			// custom render plugins (post pass)

			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentViewport );

			// Generate mipmap if we're using any kind of mipmap filtering

			if ( renderTarget ) {

				var texture = renderTarget.texture;

				if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
						texture.minFilter !== THREE.NearestFilter &&
						texture.minFilter !== THREE.LinearFilter ) {

					updateRenderTargetMipmap( renderTarget );

				}

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );

			// _gl.finish();

		};

		function pushRenderItem( object, geometry, material, z, group ) {

			var array, index;

			// allocate the next position in the appropriate array

			if ( material.transparent ) {

				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;

			} else {

				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;

			}

			// recycle existing render item or grow the array

			var renderItem = array[ index ];

			if ( renderItem !== undefined ) {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;

			} else {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};

				// assert( index === array.length );
				array.push( renderItem );

			}

		}

		function projectObject( object, camera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) ) {

				if ( object instanceof THREE.Light ) {

					lights.push( object );

				} else if ( object instanceof THREE.Sprite ) {

					if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

						sprites.push( object );

					}

				} else if ( object instanceof THREE.LensFlare ) {

					lensFlares.push( object );

				} else if ( object instanceof THREE.ImmediateRenderObject ) {

					if ( _this.sortObjects === true ) {

						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );

					}

					pushRenderItem( object, null, object.material, _vector3.z, null );

				} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {

					if ( object instanceof THREE.SkinnedMesh ) {

						object.skeleton.update();

					}

					if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

						var material = object.material;

						if ( material.visible === true ) {

							if ( _this.sortObjects === true ) {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

							}

							var geometry = objects.update( object );

							if ( material instanceof THREE.MultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var i = 0, l = groups.length; i < l; i ++ ) {

									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

									}

								}

							} else {

								pushRenderItem( object, geometry, material, _vector3.z, null );

							}

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera );

			}

		}

		function renderObjects( renderList, camera, fog, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				if ( object instanceof THREE.ImmediateRenderObject ) {

					setMaterial( material );

					var program = setProgram( camera, fog, material, object );

					_currentGeometryProgram = '';

					object.render( function ( object ) {

						_this.renderBufferImmediate( object, program, material );

					} );

				} else {

					_this.renderBufferDirect( camera, fog, geometry, material, object, group );

				}

			}

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var parameters = programCache.getParameters( material, _lights, fog, object );
			var code = programCache.getProgramCode( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.code !== code ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = THREE.ShaderLib[ parameters.shaderID ];

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.__webglShader = materialProperties.__webglShader;

				program = programCache.acquireProgram( material, parameters, code );

				materialProperties.program = program;
				material.program = program;

			}

			var attributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( attributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( attributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			materialProperties.uniformsList = [];

			var uniforms = materialProperties.__webglShader.uniforms,
				uniformLocations = materialProperties.program.getUniforms();

			for ( var u in uniforms ) {

				var location = uniformLocations[ u ];

				if ( location ) {

					materialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );

				}

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
					material instanceof THREE.MeshLambertMaterial ||
					material instanceof THREE.MeshStandardMaterial ||
					material.lights ) {

				// store the light setup it was created for

				materialProperties.lightsHash = _lights.hash;

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = _lights.ambient;
				uniforms.directionalLights.value = _lights.directional;
				uniforms.spotLights.value = _lights.spot;
				uniforms.pointLights.value = _lights.point;
				uniforms.hemisphereLights.value = _lights.hemi;

				uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
				uniforms.spotShadowMap.value = _lights.spotShadowMap;
				uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
				uniforms.pointShadowMap.value = _lights.pointShadowMap;
				uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

			}

			// detect dynamic uniforms

			materialProperties.hasDynamicUniforms = false;

			for ( var j = 0, jl = materialProperties.uniformsList.length; j < jl; j ++ ) {

				var uniform = materialProperties.uniformsList[ j ][ 0 ];

				if ( uniform.dynamic === true ) {

					materialProperties.hasDynamicUniforms = true;
					break;

				}

			}

		}

		function setMaterial( material ) {

			setMaterialFaces( material );

			if ( material.transparent === true ) {

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );

			} else {

				state.setBlending( THREE.NoBlending );

			}

			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		function setMaterialFaces( material ) {

			material.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );
			state.setFlipSided( material.side === THREE.BackSide );

		}

		function setProgram( camera, fog, material, object ) {

			_usedTextureUnits = 0;

			var materialProperties = properties.get( material );

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			}

			if ( materialProperties.lightsHash !== undefined &&
				materialProperties.lightsHash !== _lights.hash ) {

				material.needsUpdate = true;

			}

			if ( material.needsUpdate ) {

				initMaterial( material, fog, object );
				material.needsUpdate = false;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;

			if ( program.id !== _currentProgram ) {

				_gl.useProgram( program.program );
				_currentProgram = program.id;

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || camera !== _currentCamera ) {

				_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

				if ( capabilities.logarithmicDepthBuffer ) {

					_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}


				if ( camera !== _currentCamera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material instanceof THREE.ShaderMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material.envMap ) {

					if ( p_uniforms.cameraPosition !== undefined ) {

						_vector3.setFromMatrixPosition( camera.matrixWorld );
						_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );

					}

				}

				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material instanceof THREE.ShaderMaterial ||
					 material.skinning ) {

					if ( p_uniforms.viewMatrix !== undefined ) {

						_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

					}

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				if ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {

					_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );

				}

				if ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {

					_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );

				}

				if ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {

					if ( p_uniforms.boneTexture !== undefined ) {

						var textureUnit = getTextureUnit();

						_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
						_this.setTexture( object.skeleton.boneTexture, textureUnit );

					}

					if ( p_uniforms.boneTextureWidth !== undefined ) {

						_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );

					}

					if ( p_uniforms.boneTextureHeight !== undefined ) {

						_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );

					}

				} else if ( object.skeleton && object.skeleton.boneMatrices ) {

					if ( p_uniforms.boneGlobalMatrices !== undefined ) {

						_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );

					}

				}

			}

			if ( refreshMaterial ) {

				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshStandardMaterial ||
					 material.lights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				}

				// refresh single material specific uniforms

				if ( material instanceof THREE.LineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

				} else if ( material instanceof THREE.LineDashedMaterial ) {

					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );

				} else if ( material instanceof THREE.PointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material instanceof THREE.MeshLambertMaterial ) {

					refreshUniformsLambert( m_uniforms, material );

				} else if ( material instanceof THREE.MeshPhongMaterial ) {

					refreshUniformsPhong( m_uniforms, material );

				} else if ( material instanceof THREE.MeshStandardMaterial ) {

					refreshUniformsStandard( m_uniforms, material );

				} else if ( material instanceof THREE.MeshDepthMaterial ) {

					m_uniforms.mNear.value = camera.near;
					m_uniforms.mFar.value = camera.far;
					m_uniforms.opacity.value = material.opacity;

				} else if ( material instanceof THREE.MeshNormalMaterial ) {

					m_uniforms.opacity.value = material.opacity;

				}

				// load common uniforms

				loadUniformsGeneric( materialProperties.uniformsList );

			}

			loadUniformsMatrices( p_uniforms, object );

			if ( p_uniforms.modelMatrix !== undefined ) {

				_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

			}

			if ( materialProperties.hasDynamicUniforms === true ) {

				updateDynamicUniforms( materialProperties.uniformsList, object, camera );

			}

			return program;

		}

		function updateDynamicUniforms ( uniforms, object, camera ) {

			var dynamicUniforms = [];

			for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {

				var uniform = uniforms[ j ][ 0 ];
				var onUpdateCallback = uniform.onUpdateCallback;

				if ( onUpdateCallback !== undefined ) {

					onUpdateCallback.bind( uniform )( object, camera );
					dynamicUniforms.push( uniforms[ j ] );

				}

			}

			loadUniformsGeneric( dynamicUniforms );

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon ( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			uniforms.diffuse.value = material.color;

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

			uniforms.envMap.value = material.envMap;
			uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		function refreshUniformsLine ( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash ( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints ( uniforms, material ) {

			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _canvas.clientHeight / 2.0; // TODO: Cache this.

			uniforms.map.value = material.map;

			if ( material.map !== null ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;

				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

			}

		}

		function refreshUniformsFog ( uniforms, fog ) {

			uniforms.fogColor.value = fog.color;

			if ( fog instanceof THREE.Fog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog instanceof THREE.FogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert ( uniforms, material ) {

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong ( uniforms, material ) {

			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsStandard ( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate ( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		// Uniforms (load to GPU)

		function loadUniformsMatrices ( uniforms, object ) {

			_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );

			if ( uniforms.normalMatrix ) {

				_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );

			}

		}

		function getTextureUnit() {

			var textureUnit = _usedTextureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			_usedTextureUnits += 1;

			return textureUnit;

		}

		function loadUniformsGeneric ( uniforms ) {

			var texture, textureUnit;

			for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {

				var uniform = uniforms[ j ][ 0 ];

				// needsUpdate property is not added to all uniforms.
				if ( uniform.needsUpdate === false ) continue;

				var type = uniform.type;
				var value = uniform.value;
				var location = uniforms[ j ][ 1 ];

				switch ( type ) {

					case '1i':
						_gl.uniform1i( location, value );
						break;

					case '1f':
						_gl.uniform1f( location, value );
						break;

					case '2f':
						_gl.uniform2f( location, value[ 0 ], value[ 1 ] );
						break;

					case '3f':
						_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );
						break;

					case '4f':
						_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );
						break;

					case '1iv':
						_gl.uniform1iv( location, value );
						break;

					case '3iv':
						_gl.uniform3iv( location, value );
						break;

					case '1fv':
						_gl.uniform1fv( location, value );
						break;

					case '2fv':
						_gl.uniform2fv( location, value );
						break;

					case '3fv':
						_gl.uniform3fv( location, value );
						break;

					case '4fv':
						_gl.uniform4fv( location, value );
						break;

					case 'Matrix2fv':
						_gl.uniformMatrix2fv( location, false, value );
						break;

					case 'Matrix3fv':
						_gl.uniformMatrix3fv( location, false, value );
						break;

					case 'Matrix4fv':
						_gl.uniformMatrix4fv( location, false, value );
						break;

					//

					case 'i':

						// single integer
						_gl.uniform1i( location, value );

						break;

					case 'f':

						// single float
						_gl.uniform1f( location, value );

						break;

					case 'v2':

						// single THREE.Vector2
						_gl.uniform2f( location, value.x, value.y );

						break;

					case 'v3':

						// single THREE.Vector3
						_gl.uniform3f( location, value.x, value.y, value.z );

						break;

					case 'v4':

						// single THREE.Vector4
						_gl.uniform4f( location, value.x, value.y, value.z, value.w );

						break;

					case 'c':

						// single THREE.Color
						_gl.uniform3f( location, value.r, value.g, value.b );

						break;

					/*
					case 's':

						// TODO: Optimize this.
						for( var propertyName in uniform.properties ) {

							var property = uniform.properties[ propertyName ];
							var locationProperty =  location[ propertyName ];
							var valueProperty = value[ propertyName ];

							switch( property.type ) {
								case 'i':
									_gl.uniform1i( locationProperty, valueProperty );
									break;
								case 'f':
									_gl.uniform1f( locationProperty, valueProperty );
									break;
								case 'v2':
									_gl.uniform2f( locationProperty, valueProperty.x, valueProperty.y );
									break;
								case 'v3':
									_gl.uniform3f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z );
									break;
								case 'v4':
									_gl.uniform4f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z, valueProperty.w );
									break;
								case 'c':
									_gl.uniform3f( locationProperty, valueProperty.r, valueProperty.g, valueProperty.b );
									break;
							};

						}

						break;
					*/

					case 'sa':

						// TODO: Optimize this.
						for ( var i = 0; i < value.length; i ++ ) {

							for ( var propertyName in uniform.properties ) {

								var property = uniform.properties[ propertyName ];
								var locationProperty =  location[ i ][ propertyName ];
								var valueProperty = value[ i ][ propertyName ];

								switch ( property.type ) {
									case 'i':
										_gl.uniform1i( locationProperty, valueProperty );
										break;
									case 'f':
										_gl.uniform1f( locationProperty, valueProperty );
										break;
									case 'v2':
										_gl.uniform2f( locationProperty, valueProperty.x, valueProperty.y );
										break;
									case 'v3':
										_gl.uniform3f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z );
										break;
									case 'v4':
										_gl.uniform4f( locationProperty, valueProperty.x, valueProperty.y, valueProperty.z, valueProperty.w );
										break;
									case 'c':
										_gl.uniform3f( locationProperty, valueProperty.r, valueProperty.g, valueProperty.b );
										break;
									case 'm4':
										_gl.uniformMatrix4fv( locationProperty, false, valueProperty.elements );
										break;
								}

							}

						}

						break;

					case 'iv1':

						// flat array of integers (JS or typed array)
						_gl.uniform1iv( location, value );

						break;

					case 'iv':

						// flat array of integers with 3 x N size (JS or typed array)
						_gl.uniform3iv( location, value );

						break;

					case 'fv1':

						// flat array of floats (JS or typed array)
						_gl.uniform1fv( location, value );

						break;

					case 'fv':

						// flat array of floats with 3 x N size (JS or typed array)
						_gl.uniform3fv( location, value );

						break;

					case 'v2v':

						// array of THREE.Vector2

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 2 * value.length );

						}

						for ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {

							uniform._array[ i2 + 0 ] = value[ i ].x;
							uniform._array[ i2 + 1 ] = value[ i ].y;

						}

						_gl.uniform2fv( location, uniform._array );

						break;

					case 'v3v':

						// array of THREE.Vector3

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 3 * value.length );

						}

						for ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {

							uniform._array[ i3 + 0 ] = value[ i ].x;
							uniform._array[ i3 + 1 ] = value[ i ].y;
							uniform._array[ i3 + 2 ] = value[ i ].z;

						}

						_gl.uniform3fv( location, uniform._array );

						break;

					case 'v4v':

						// array of THREE.Vector4

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 4 * value.length );

						}

						for ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {

							uniform._array[ i4 + 0 ] = value[ i ].x;
							uniform._array[ i4 + 1 ] = value[ i ].y;
							uniform._array[ i4 + 2 ] = value[ i ].z;
							uniform._array[ i4 + 3 ] = value[ i ].w;

						}

						_gl.uniform4fv( location, uniform._array );

						break;

					case 'm2':

						// single THREE.Matrix2
						_gl.uniformMatrix2fv( location, false, value.elements );

						break;

					case 'm3':

						// single THREE.Matrix3
						_gl.uniformMatrix3fv( location, false, value.elements );

						break;

					case 'm3v':

						// array of THREE.Matrix3

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 9 * value.length );

						}

						for ( var i = 0, il = value.length; i < il; i ++ ) {

							value[ i ].flattenToArrayOffset( uniform._array, i * 9 );

						}

						_gl.uniformMatrix3fv( location, false, uniform._array );

						break;

					case 'm4':

						// single THREE.Matrix4
						_gl.uniformMatrix4fv( location, false, value.elements );

						break;

					case 'm4v':

						// array of THREE.Matrix4

						if ( uniform._array === undefined ) {

							uniform._array = new Float32Array( 16 * value.length );

						}

						for ( var i = 0, il = value.length; i < il; i ++ ) {

							value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

						}

						_gl.uniformMatrix4fv( location, false, uniform._array );

						break;

					case 't':

						// single THREE.Texture (2d or cube)

						texture = value;
						textureUnit = getTextureUnit();

						_gl.uniform1i( location, textureUnit );

						if ( ! texture ) continue;

						if ( texture instanceof THREE.CubeTexture ||
							 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

							// CompressedTexture can have Array in image :/

							setCubeTexture( texture, textureUnit );

						} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

							setCubeTextureDynamic( texture.texture, textureUnit );

						} else if ( texture instanceof THREE.WebGLRenderTarget ) {

							_this.setTexture( texture.texture, textureUnit );

						} else {

							_this.setTexture( texture, textureUnit );

						}

						break;

					case 'tv':

						// array of THREE.Texture (2d or cube)

						if ( uniform._array === undefined ) {

							uniform._array = [];

						}

						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

							uniform._array[ i ] = getTextureUnit();

						}

						_gl.uniform1iv( location, uniform._array );

						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

							texture = uniform.value[ i ];
							textureUnit = uniform._array[ i ];

							if ( ! texture ) continue;

							if ( texture instanceof THREE.CubeTexture ||
								 ( texture.image instanceof Array && texture.image.length === 6 ) ) {

								// CompressedTexture can have Array in image :/

								setCubeTexture( texture, textureUnit );

							} else if ( texture instanceof THREE.WebGLRenderTarget ) {

								_this.setTexture( texture.texture, textureUnit );

							} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

								setCubeTextureDynamic( texture.texture, textureUnit );

							} else {

								_this.setTexture( texture, textureUnit );

							}

						}

						break;

					default:

						console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );

				}

			}

		}

		function setupLights ( lights, camera ) {

			var l, ll, light,
			r = 0, g = 0, b = 0,
			color,
			intensity,
			distance,

			viewMatrix = camera.matrixWorldInverse,

			directionalLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0,

			shadowsLength = 0;

			_lights.shadowsPointLight = 0;

			for ( l = 0, ll = lights.length; l < ll; l ++ ) {

				light = lights[ l ];

				color = light.color;
				intensity = light.intensity;
				distance = light.distance;

				if ( light instanceof THREE.AmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light instanceof THREE.DirectionalLight ) {

					var uniforms = lightCache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

						_lights.shadows[ shadowsLength ++ ] = light;

					}

					_lights.directionalShadowMap[ directionalLength ] = light.shadow.map;
					_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					_lights.directional[ directionalLength ++ ] = uniforms;

				} else if ( light instanceof THREE.SpotLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( _vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.angleCos = Math.cos( light.angle );
					uniforms.exponent = light.exponent;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

						_lights.shadows[ shadowsLength ++ ] = light;

					}

					_lights.spotShadowMap[ spotLength ] = light.shadow.map;
					_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					_lights.spot[ spotLength ++ ] = uniforms;

				} else if ( light instanceof THREE.PointLight ) {

					var uniforms = lightCache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						uniforms.shadowBias = light.shadow.bias;
						uniforms.shadowRadius = light.shadow.radius;
						uniforms.shadowMapSize = light.shadow.mapSize;

						_lights.shadows[ shadowsLength ++ ] = light;

					}

					_lights.pointShadowMap[ pointLength ] = light.shadow.map;

					if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

						_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();

					}

					// for point lights we set the shadow matrix to be a translation-only matrix
					// equal to inverse of the light's position
					_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
					_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

					_lights.point[ pointLength ++ ] = uniforms;

				} else if ( light instanceof THREE.HemisphereLight ) {

					var uniforms = lightCache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					_lights.hemi[ hemiLength ++ ] = uniforms;

				}

			}

			_lights.ambient[ 0 ] = r;
			_lights.ambient[ 1 ] = g;
			_lights.ambient[ 2 ] = b;

			_lights.directional.length = directionalLength;
			_lights.spot.length = spotLength;
			_lights.point.length = pointLength;
			_lights.hemi.length = hemiLength;

			_lights.shadows.length = shadowsLength;

			_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + shadowsLength;

		}

		// GL state setting

		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

			if ( cullFace === THREE.CullFaceNone ) {

				state.disable( _gl.CULL_FACE );

			} else {

				if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

					_gl.frontFace( _gl.CW );

				} else {

					_gl.frontFace( _gl.CCW );

				}

				if ( cullFace === THREE.CullFaceBack ) {

					_gl.cullFace( _gl.BACK );

				} else if ( cullFace === THREE.CullFaceFront ) {

					_gl.cullFace( _gl.FRONT );

				} else {

					_gl.cullFace( _gl.FRONT_AND_BACK );

				}

				state.enable( _gl.CULL_FACE );

			}

		};

		// Textures

		function setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {

			var extension;

			if ( isPowerOfTwoImage ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

				}

			}

			extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

				image = makePowerOfTwo( image );

			}

			var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture instanceof THREE.DataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture instanceof THREE.CompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

						}

					} else {

						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

				}

			}

			if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		this.setTexture = function ( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );
					return;

				}

				if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );
					return;

				}

				uploadTexture( textureProperties, texture, slot );

				return;

			}

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		};

		function clampToMaxSize ( image, maxSize ) {

			if ( image.width > maxSize || image.height > maxSize ) {

				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.

				var scale = maxSize / Math.max( image.width, image.height );

				var canvas = document.createElement( 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;

			return false;

		}

		function makePowerOfTwo( image ) {

			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

				var canvas = document.createElement( 'canvas' );
				canvas.width = THREE.Math.nearestPowerOfTwo( image.width );
				canvas.height = THREE.Math.nearestPowerOfTwo( image.height );

				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );

				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

				return canvas;

			}

			return image;

		}

		function setCubeTexture ( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.image.length === 6 ) {

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					if ( ! textureProperties.__image__webglTextureCube ) {

						texture.addEventListener( 'dispose', onTextureDispose );

						textureProperties.__image__webglTextureCube = _gl.createTexture();

						_infoMemory.textures ++;

					}

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

					var isCompressed = texture instanceof THREE.CompressedTexture;
					var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;

					var cubeImage = [];

					for ( var i = 0; i < 6; i ++ ) {

						if ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {

							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

						} else {

							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

						}

					}

					var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );

					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

					for ( var i = 0; i < 6; i ++ ) {

						if ( ! isCompressed ) {

							if ( isDataTexture ) {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

							}

						} else {

							var mipmap, mipmaps = cubeImage[ i ].mipmaps;

							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

								mipmap = mipmaps[ j ];

								if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									} else {

										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()" );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

					if ( texture.generateMipmaps && isPowerOfTwoImage ) {

						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

					}

					textureProperties.__version = texture.version;

					if ( texture.onUpdate ) texture.onUpdate( texture );

				} else {

					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				}

			}

		}

		function setCubeTextureDynamic ( texture, slot ) {

			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = paramThreeToGL( renderTarget.texture.format );
			var glType = paramThreeToGL( renderTarget.texture.type );
			state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage ( renderbuffer, renderTarget ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				// FIXME: We don't support !depth !stencil
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			_infoMemory.textures ++;

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

				}

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

				if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
				state.bindTexture( _gl.TEXTURE_2D, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		this.setRenderTarget = function ( renderTarget ) {

			_currentRenderTarget = renderTarget;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				setupRenderTarget( renderTarget );

			}

			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
			var framebuffer;

			if ( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				if ( isCube ) {

					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

				} else {

					framebuffer = renderTargetProperties.__webglFramebuffer;

				}

				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

				_currentViewport.copy( renderTarget.viewport );

			} else {

				framebuffer = null;

				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
				_currentScissorTest = _scissorTest;

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			state.viewport( _currentViewport );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

			if ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;

					if ( texture.format !== THREE.RGBAFormat
						&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( texture.type !== THREE.UnsignedByteType
						&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )
						&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )
						&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

						_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

					}

				}

			}

		};

		function updateRenderTargetMipmap( renderTarget ) {

			var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var texture = properties.get( renderTarget.texture ).__webglTexture;

			state.bindTexture( target, texture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback ( f ) {

			if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		// Map three.js constants to WebGL constants

		function paramThreeToGL ( p ) {

			var extension;

			if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
			if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

			if ( p === THREE.NearestFilter ) return _gl.NEAREST;
			if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

			if ( p === THREE.LinearFilter ) return _gl.LINEAR;
			if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

			if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

			if ( p === THREE.ByteType ) return _gl.BYTE;
			if ( p === THREE.ShortType ) return _gl.SHORT;
			if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === THREE.IntType ) return _gl.INT;
			if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === THREE.FloatType ) return _gl.FLOAT;

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) {

				if ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;

			}

			if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
			if ( p === THREE.RGBFormat ) return _gl.RGB;
			if ( p === THREE.RGBAFormat ) return _gl.RGBA;
			if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

			if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
			if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

			if ( p === THREE.ZeroFactor ) return _gl.ZERO;
			if ( p === THREE.OneFactor ) return _gl.ONE;
			if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

			if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
			if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) {

				if ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

			}

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === THREE.MinEquation ) return extension.MIN_EXT;
				if ( p === THREE.MaxEquation ) return extension.MAX_EXT;

			}

			return 0;

		}

	};

	// File:src/renderers/WebGLRenderTarget.js

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	THREE.WebGLRenderTarget = function ( width, height, options ) {

		this.uuid = THREE.Math.generateUUID();

		this.width = width;
		this.height = height;

		this.scissor = new THREE.Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new THREE.Vector4( 0, 0, width, height );

		options = options || {};

		if ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;

		this.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

	};

	THREE.WebGLRenderTarget.prototype = {

		constructor: THREE.WebGLRenderTarget,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;

			this.shareDepthFrom = source.shareDepthFrom;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	};

	THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );

	// File:src/renderers/WebGLRenderTargetCube.js

	/**
	 * @author alteredq / http://alteredqualia.com
	 */

	THREE.WebGLRenderTargetCube = function ( width, height, options ) {

		THREE.WebGLRenderTarget.call( this, width, height, options );

		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

	};

	THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
	THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;

	// File:src/renderers/webgl/WebGLBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			_gl.drawArrays( mode, start, count );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			var position = geometry.attributes.position;

			var count = 0;

			if ( position instanceof THREE.InterleavedBufferAttribute ) {

				count = position.data.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			} else {

				count = position.count;

				extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

			}

			_infoRender.calls ++;
			_infoRender.vertices += count * geometry.maxInstancedCount;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;

		}

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, size;

		function setIndex( index ) {

			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

				type = _gl.UNSIGNED_INT;
				size = 4;

			} else {

				type = _gl.UNSIGNED_SHORT;
				size = 2;

			}

		}

		function render( start, count ) {

			_gl.drawElements( mode, count, type, start * size );

			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

		}

		function renderInstances( geometry, start, count ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

			extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

			_infoRender.calls ++;
			_infoRender.vertices += count * geometry.maxInstancedCount;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;
		}

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	};

	// File:src/renderers/webgl/WebGLExtensions.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLExtensions = function ( gl ) {

		var extensions = {};

		this.get = function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		};

	};

	// File:src/renderers/webgl/WebGLCapabilities.js

	THREE.WebGLCapabilities = function ( gl, extensions, parameters ) {

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		this.getMaxPrecision = getMaxPrecision;

		this.precision = parameters.precision !== undefined ? parameters.precision : 'highp',
		this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;

		this.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		this.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		this.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		this.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		this.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		this.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		this.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		this.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		this.vertexTextures = this.maxVertexTextures > 0;
		this.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;

		var _maxPrecision = getMaxPrecision( this.precision );

		if ( _maxPrecision !== this.precision ) {

			console.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );
			this.precision = _maxPrecision;

		}

		if ( this.logarithmicDepthBuffer ) {

			this.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );

		}

	};

	// File:src/renderers/webgl/WebGLGeometries.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLGeometries = function ( gl, properties, info ) {

		var geometries = {};

		function get( object ) {

			var geometry = object.geometry;

			if ( geometries[ geometry.id ] !== undefined ) {

				return geometries[ geometry.id ];

			}

			geometry.addEventListener( 'dispose', onGeometryDispose );

			var buffergeometry;

			if ( geometry instanceof THREE.BufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry instanceof THREE.Geometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries[ geometry.id ] = buffergeometry;

			info.memory.geometries ++;

			return buffergeometry;

		}

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];

			if ( buffergeometry.index !== null ) {

				deleteAttribute( buffergeometry.index );

			}

			deleteAttributes( buffergeometry.attributes );

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			// TODO

			var property = properties.get( geometry );

			if ( property.wireframe ) {

				deleteAttribute( property.wireframe );

			}

			properties.delete( geometry );

			var bufferproperty = properties.get( buffergeometry );

			if ( bufferproperty.wireframe ) {

				deleteAttribute( bufferproperty.wireframe );

			}

			properties.delete( buffergeometry );

			//

			info.memory.geometries --;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function deleteAttribute( attribute ) {

			var buffer = getAttributeBuffer( attribute );

			if ( buffer !== undefined ) {

				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );

			}

		}

		function deleteAttributes( attributes ) {

			for ( var name in attributes ) {

				deleteAttribute( attributes[ name ] );

			}

		}

		function removeAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				properties.delete( attribute.data );

			} else {

				properties.delete( attribute );

			}

		}

		this.get = get;

	};

	// File:src/renderers/webgl/WebGLLights.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLLights = function () {

		var lights = {};

		this.get = function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new THREE.Vector3(),
						color: new THREE.Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new THREE.Vector3(),
						direction: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						angleCos: 0,
						exponent: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new THREE.Vector3(),
						color: new THREE.Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new THREE.Vector2()
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new THREE.Vector3(),
						skyColor: new THREE.Color(),
						groundColor: new THREE.Color()
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		};

	};

	// File:src/renderers/webgl/WebGLObjects.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLObjects = function ( gl, properties, info ) {

		var geometries = new THREE.WebGLGeometries( gl, properties, info );

		//

		function update( object ) {

			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

			var geometry = geometries.get( object );

			if ( object.geometry instanceof THREE.Geometry ) {

				geometry.updateFromObject( object );

			}

			var index = geometry.index;
			var attributes = geometry.attributes;

			if ( index !== null ) {

				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			for ( var name in attributes ) {

				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					updateAttribute( array[ i ], gl.ARRAY_BUFFER );

				}

			}

			return geometry;

		}

		function updateAttribute( attribute, bufferType ) {

			var data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;

			var attributeProperties = properties.get( data );

			if ( attributeProperties.__webglBuffer === undefined ) {

				createBuffer( attributeProperties, data, bufferType );

			} else if ( attributeProperties.version !== data.version ) {

				updateBuffer( attributeProperties, data, bufferType );

			}

		}

		function createBuffer( attributeProperties, data, bufferType ) {

			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

			gl.bufferData( bufferType, data.array, usage );

			attributeProperties.version = data.version;

		}

		function updateBuffer( attributeProperties, data, bufferType ) {

			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

			if ( data.dynamic === false || data.updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, data.array );

			} else if ( data.updateRange.count === 0 ) {

				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

			} else {

				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

				data.updateRange.count = 0; // reset range

			}

			attributeProperties.version = data.version;

		}

		function getAttributeBuffer( attribute ) {

			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

				return properties.get( attribute.data ).__webglBuffer;

			}

			return properties.get( attribute ).__webglBuffer;

		}

		function getWireframeAttribute( geometry ) {

			var property = properties.get( geometry );

			if ( property.wireframe !== undefined ) {

				return property.wireframe;

			}

			var indices = [];

			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;

			// console.time( 'wireframe' );

			if ( index !== null ) {

				var edges = {};
				var array = index.array;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					if ( checkEdge( edges, a, b ) ) indices.push( a, b );
					if ( checkEdge( edges, b, c ) ) indices.push( b, c );
					if ( checkEdge( edges, c, a ) ) indices.push( c, a );

				}

			} else {

				var array = attributes.position.array;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			// console.timeEnd( 'wireframe' );

			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );

			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

			property.wireframe = attribute;

			return attribute;

		}

		function checkEdge( edges, a, b ) {

			if ( a > b ) {

				var tmp = a;
				a = b;
				b = tmp;

			}

			var list = edges[ a ];

			if ( list === undefined ) {

				edges[ a ] = [ b ];
				return true;

			} else if ( list.indexOf( b ) === -1 ) {

				list.push( b );
				return true;

			}

			return false;

		}

		this.getAttributeBuffer = getAttributeBuffer;
		this.getWireframeAttribute = getWireframeAttribute;

		this.update = update;

	};

	// File:src/renderers/webgl/WebGLProgram.js

	THREE.WebGLProgram = ( function () {

		var programIdCount = 0;

		// TODO: Combine the regex
		var structRe = /^([\w\d_]+)\.([\w\d_]+)$/;
		var arrayStructRe = /^([\w\d_]+)\[(\d+)\]\.([\w\d_]+)$/;
		var arrayRe = /^([\w\d_]+)\[0\]$/;

		function generateExtensions( extensions, parameters, rendererExtensions ) {

			extensions = extensions || {};

			var chunks = [
				( extensions.derivatives || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
			];

			return chunks.filter( filterEmptyLine ).join( '\n' );

		}

		function generateDefines( defines ) {

			var chunks = [];

			for ( var name in defines ) {

				var value = defines[ name ];

				if ( value === false ) continue;

				chunks.push( '#define ' + name + ' ' + value );

			}

			return chunks.join( '\n' );

		}

		function fetchUniformLocations( gl, program, identifiers ) {

			var uniforms = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveUniform( program, i );
				var name = info.name;
				var location = gl.getUniformLocation( program, name );

				//console.log("THREE.WebGLProgram: ACTIVE UNIFORM:", name);

				var matches = structRe.exec( name );
				if ( matches ) {

					var structName = matches[ 1 ];
					var structProperty = matches[ 2 ];

					var uniformsStruct = uniforms[ structName ];

					if ( ! uniformsStruct ) {

						uniformsStruct = uniforms[ structName ] = {};

					}

					uniformsStruct[ structProperty ] = location;

					continue;

				}

				matches = arrayStructRe.exec( name );

				if ( matches ) {

					var arrayName = matches[ 1 ];
					var arrayIndex = matches[ 2 ];
					var arrayProperty = matches[ 3 ];

					var uniformsArray = uniforms[ arrayName ];

					if ( ! uniformsArray ) {

						uniformsArray = uniforms[ arrayName ] = [];

					}

					var uniformsArrayIndex = uniformsArray[ arrayIndex ];

					if ( ! uniformsArrayIndex ) {

						uniformsArrayIndex = uniformsArray[ arrayIndex ] = {};

					}

					uniformsArrayIndex[ arrayProperty ] = location;

					continue;

				}

				matches = arrayRe.exec( name );

				if ( matches ) {

					var arrayName = matches[ 1 ];

					uniforms[ arrayName ] = location;

					continue;

				}

				uniforms[ name ] = location;

			}

			return uniforms;

		}

		function fetchAttributeLocations( gl, program, identifiers ) {

			var attributes = {};

			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

			for ( var i = 0; i < n; i ++ ) {

				var info = gl.getActiveAttrib( program, i );
				var name = info.name;

				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

				attributes[ name ] = gl.getAttribLocation( program, name );

			}

			return attributes;

		}

		function filterEmptyLine( string ) {

			return string !== '';

		}

		function replaceLightNums( string, parameters ) {

			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

		}

		function unrollLoops( string ) {

			var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

			function replace( match, start, end, snippet ) {

				var unroll = '';

				for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

					unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

				}

				return unroll;

			}

			return string.replace( pattern, replace );

		}

		return function WebGLProgram( renderer, code, material, parameters ) {

			var gl = renderer.context;

			var extensions = material.extensions;
			var defines = material.defines;

			var vertexShader = material.__webglShader.vertexShader;
			var fragmentShader = material.__webglShader.fragmentShader;

			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

			if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

			} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

			}

			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

			if ( parameters.envMap ) {

				switch ( material.envMap.mapping ) {

					case THREE.CubeReflectionMapping:
					case THREE.CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;

					case THREE.EquirectangularReflectionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;

					case THREE.SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;

				}

				switch ( material.envMap.mapping ) {

					case THREE.CubeRefractionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;

				}

				switch ( material.combine ) {

					case THREE.MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;

					case THREE.MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;

					case THREE.AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;

				}

			}

			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

			// console.log( 'building new program ' );

			//

			var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

			var customDefines = generateDefines( defines );

			//

			var program = gl.createProgram();

			var prefixVertex, prefixFragment;

			if ( material instanceof THREE.RawShaderMaterial ) {

				prefixVertex = '';
				prefixFragment = '';

			} else {

				prefixVertex = [

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					'#define MAX_BONES ' + parameters.maxBones,

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',

					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',


					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',

					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',

					'#ifdef USE_COLOR',

					'	attribute vec3 color;',

					'#endif',

					'#ifdef USE_MORPHTARGETS',

					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',

					'	#ifdef USE_MORPHNORMALS',

					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',

					'	#else',

					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',

					'	#endif',

					'#endif',

					'#ifdef USE_SKINNING',

					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',

					'#endif',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );


				prefixFragment = [

					customExtensions,

					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',

					'#define SHADER_NAME ' + material.__webglShader.name,

					customDefines,

					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,

					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',

					parameters.flatShading ? '#define FLAT_SHADED' : '',

					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',

					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',

					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

					parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',

					'\n'

				].filter( filterEmptyLine ).join( '\n' );

			}

			vertexShader = replaceLightNums( vertexShader, parameters );
			fragmentShader = replaceLightNums( fragmentShader, parameters );

			if ( material instanceof THREE.ShaderMaterial === false ) {

				vertexShader = unrollLoops( vertexShader );
				fragmentShader = unrollLoops( fragmentShader );

			}

			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;

			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );

			var glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );

			// Force a particular attribute to index 0.

			if ( material.index0AttributeName !== undefined ) {

				gl.bindAttribLocation( program, 0, material.index0AttributeName );

			} else if ( parameters.morphTargets === true ) {

				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );

			}

			gl.linkProgram( program );

			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

			var runnable = true;
			var haveDiagnostics = true;

			// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
			// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

				runnable = false;

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

			// clean up

			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );

			// set up caching for uniform locations

			var cachedUniforms;

			this.getUniforms = function() {

				if ( cachedUniforms === undefined ) {

					cachedUniforms = fetchUniformLocations( gl, program );

				}

				return cachedUniforms;

			};

			// set up caching for attribute locations

			var cachedAttributes;

			this.getAttributes = function() {

				if ( cachedAttributes === undefined ) {

					cachedAttributes = fetchAttributeLocations( gl, program );

				}

				return cachedAttributes;

			};

			// free resource

			this.destroy = function() {

				gl.deleteProgram( program );
				this.program = undefined;

			};

			// DEPRECATED

			Object.defineProperties( this, {

				uniforms: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();

					}
				},

				attributes: {
					get: function() {

						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();

					}
				}

			} );


			//

			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;

			return this;

		};

	} )();

	// File:src/renderers/webgl/WebGLPrograms.js

	THREE.WebGLPrograms = function ( renderer, capabilities ) {

		var programs = [];

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshStandardMaterial: 'standard',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};

		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "envMap", "envMapMode",
			"lightMap", "aoMap", "emissiveMap", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
			"shadowMapEnabled", "pointLightShadows",
			"shadowMapType",
			"alphaTest", "doubleSided", "flipSided"
		];


		function allocateBones ( object ) {

			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = nVertexMatrices;

				if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

					maxBones = Math.min( object.skeleton.bones.length, maxBones );

					if ( maxBones < object.skeleton.bones.length ) {

						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

					}

				}

				return maxBones;

			}

		}

		this.getParameters = function ( material, lights, fog, object ) {

			var shaderID = shaderIDs[ material.type ];
			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var parameters = {

				shaderID: shaderID,

				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,

				map: !! material.map,
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				combine: material.combine,

				vertexColors: material.vertexColors,

				fog: fog,
				useFog: material.fog,
				fogExp: fog instanceof THREE.FogExp2,

				flatShading: material.shading === THREE.FlatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numHemiLights: lights.hemi.length,

				pointLightShadows: lights.shadowsPointLight,

				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				alphaTest: material.alphaTest,
				doubleSided: material.side === THREE.DoubleSide,
				flipSided: material.side === THREE.BackSide

			};

			return parameters;

		};

		this.getProgramCode = function ( material, parameters ) {

			var chunks = [];

			if ( parameters.shaderID ) {

				chunks.push( parameters.shaderID );

			} else {

				chunks.push( material.fragmentShader );
				chunks.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					chunks.push( name );
					chunks.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				var parameterName = parameterNames[ i ];
				chunks.push( parameterName );
				chunks.push( parameters[ parameterName ] );

			}

			return chunks.join();

		};

		this.acquireProgram = function ( material, parameters, code ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var programInfo = programs[ p ];

				if ( programInfo.code === code ) {

					program = programInfo;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new THREE.WebGLProgram( renderer, code, material, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	};

	// File:src/renderers/webgl/WebGLProperties.js

	/**
	* @author fordacious / fordacious.github.io
	*/

	THREE.WebGLProperties = function () {

		var properties = {};

		this.get = function ( object ) {

			var uuid = object.uuid;
			var map = properties[ uuid ];

			if ( map === undefined ) {

				map = {};
				properties[ uuid ] = map;

			}

			return map;

		};

		this.delete = function ( object ) {

			delete properties[ object.uuid ];

		};

		this.clear = function () {

			properties = {};

		};

	};

	// File:src/renderers/webgl/WebGLShader.js

	THREE.WebGLShader = ( function () {

		function addLineNumbers( string ) {

			var lines = string.split( '\n' );

			for ( var i = 0; i < lines.length; i ++ ) {

				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

			}

			return lines.join( '\n' );

		}

		return function WebGLShader( gl, type, string ) {

			var shader = gl.createShader( type );

			gl.shaderSource( shader, string );
			gl.compileShader( shader );

			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

			}

			if ( gl.getShaderInfoLog( shader ) !== '' ) {

				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

			}

			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			return shader;

		};

	} )();

	// File:src/renderers/webgl/WebGLShadowMap.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {

		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new THREE.Frustum(),
		_projScreenMatrix = new THREE.Matrix4(),

		_lookTarget = new THREE.Vector3(),
		_lightPositionWorld = new THREE.Vector3(),

		_renderList = [],

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants );

		var cubeDirections = [
			new THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),
			new THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )
		];

		var cubeUps = [
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),	new THREE.Vector3( 0, 0, - 1 )
		];

		var cube2DViewPorts = [
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()
		];

		// init

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		var distanceShader = THREE.ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );

		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;

			var depthMaterial = new THREE.ShaderMaterial( {
				uniforms: depthUniforms,
				vertexShader: depthShader.vertexShader,
				fragmentShader: depthShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );

			depthMaterial._shadowPass = true;

			_depthMaterials[ i ] = depthMaterial;

			var distanceMaterial = new THREE.ShaderMaterial( {
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );

			distanceMaterial._shadowPass = true;

			_distanceMaterials[ i ] = distanceMaterial;

		}

		//

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = THREE.PCFShadowMap;
		this.cullFace = THREE.CullFaceFront;

		this.render = function ( scene, camera ) {

			var faceCount, isPointLight;

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			// Set GL state for depth map.
			_state.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.enable( _gl.CULL_FACE );
			_gl.frontFace( _gl.CCW );
			_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );
			_state.setDepthTest( true );
			_state.setScissorTest( false );

			// render depth map

			var shadows = _lights.shadows;

			for ( var i = 0, il = shadows.length; i < il; i ++ ) {

				var light = shadows[ i ];

				var shadow = light.shadow;
				var shadowCamera = shadow.camera;
				var shadowMapSize = shadow.mapSize;

				if ( light instanceof THREE.PointLight ) {

					faceCount = 6;
					isPointLight = true;

					var vpWidth = shadowMapSize.x / 4.0;
					var vpHeight = shadowMapSize.y / 2.0;

					// These viewports map a cube-map onto a 2D texture with the
					// following orientation:
					//
					//  xzXZ
					//   y Y
					//
					// X - Positive x direction
					// x - Negative x direction
					// Y - Positive y direction
					// y - Negative y direction
					// Z - Positive z direction
					// z - Negative z direction

					// positive X
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					// negative X
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					// positive Z
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					// negative Z
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					// positive Y
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					// negative Y
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				} else {

					faceCount = 1;
					isPointLight = false;

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };

					shadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );

					//

					if ( light instanceof THREE.SpotLight ) {

						shadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;

					}

					shadowCamera.updateProjectionMatrix();

				}

				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;

				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );

				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();

				// render shadow map for each cube face (if omni-directional) or
				// run a single pass if not

				for ( var face = 0; face < faceCount; face ++ ) {

					if ( isPointLight ) {

						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );

						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );

					} else {

						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );

					}

					shadowCamera.updateMatrixWorld();
					shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

					// compute shadow matrix

					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);

					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

					// update camera matrices and frustum

					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );

					// set object matrices & frustum culling

					_renderList.length = 0;

					projectObject( scene, camera, shadowCamera );

					// render shadow map
					// render regular objects

					for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

						var object = _renderList[ j ];
						var geometry = _objects.update( object );
						var material = object.material;

						if ( material instanceof THREE.MultiMaterial ) {

							var groups = geometry.groups;
							var materials = material.materials;

							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

								var group = groups[ k ];
								var groupMaterial = materials[ group.materialIndex ];

								if ( groupMaterial.visible === true ) {

									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								}

							}

						} else {

							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						}

					}

				}

				// We must call _renderer.resetGLState() at the end of each iteration of
				// the light loop in order to force material updates for each light.
				_renderer.resetGLState();

			}

			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );

			_state.enable( _gl.BLEND );

			if ( scope.cullFace === THREE.CullFaceFront ) {

				_gl.cullFace( _gl.BACK );

			}

			_renderer.resetGLState();

			scope.needsUpdate = false;

		};

		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

			var geometry = object.geometry;

			var newMaterial = null;

			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;

			if ( isPointLight ) {

				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;

			}

			if ( ! customMaterial ) {

				var useMorphing = geometry.morphTargets !== undefined &&
						geometry.morphTargets.length > 0 && material.morphTargets;

				var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;

				var variantIndex = 0;

				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;

				newMaterial = materialVariants[ variantIndex ];

			} else {

				newMaterial = customMaterial;

			}

			newMaterial.visible = material.visible;
			newMaterial.wireframe = material.wireframe;
			newMaterial.wireframeLinewidth = material.wireframeLinewidth;

			if ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {

				newMaterial.uniforms.lightPos.value.copy( lightPositionWorld );

			}

			return newMaterial;

		}

		function projectObject( object, camera, shadowCamera ) {

			if ( object.visible === false ) return;

			if ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {

				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					var material = object.material;

					if ( material.visible === true ) {

						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, shadowCamera );

			}

		}

	};

	// File:src/renderers/webgl/WebGLState.js

	/**
	* @author mrdoob / http://mrdoob.com/
	*/

	THREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {

		var _this = this;

		var color = new THREE.Vector4();

		var newAttributes = new Uint8Array( 16 );
		var enabledAttributes = new Uint8Array( 16 );
		var attributeDivisors = new Uint8Array( 16 );

		var capabilities = {};

		var compressedTextureFormats = null;

		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;

		var currentDepthFunc = null;
		var currentDepthWrite = null;

		var currentColorWrite = null;

		var currentStencilWrite = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilMask = null;
		var currentStencilFail  = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;

		var currentFlipSided = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var currentScissorTest = null;

		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

		var currentTextureSlot = undefined;
		var currentBoundTextures = {};

		var currentClearColor = new THREE.Vector4();
		var currentClearDepth = null;
		var currentClearStencil = null;

		var currentScissor = new THREE.Vector4();
		var currentViewport = new THREE.Vector4();

		this.init = function () {

			this.clearColor( 0, 0, 0, 1 );
			this.clearDepth( 1 );
			this.clearStencil( 0 );

			this.enable( gl.DEPTH_TEST );
			gl.depthFunc( gl.LEQUAL );

			gl.frontFace( gl.CCW );
			gl.cullFace( gl.BACK );
			this.enable( gl.CULL_FACE );

			this.enable( gl.BLEND );
			gl.blendEquation( gl.FUNC_ADD );
			gl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );

		};

		this.initAttributes = function () {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		};

		this.enableAttribute = function ( attribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== 0 ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;

			}

		};

		this.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		};

		this.disableUnusedAttributes = function () {

			for ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		};

		this.enable = function ( id ) {

			if ( capabilities[ id ] !== true ) {

				gl.enable( id );
				capabilities[ id ] = true;

			}

		};

		this.disable = function ( id ) {

			if ( capabilities[ id ] !== false ) {

				gl.disable( id );
				capabilities[ id ] = false;

			}

		};

		this.getCompressedTextureFormats = function () {

			if ( compressedTextureFormats === null ) {

				compressedTextureFormats = [];

				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' )) {

					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

					for ( var i = 0; i < formats.length; i ++ ) {

						compressedTextureFormats.push( formats[ i ] );

					}

				}

			}

			return compressedTextureFormats;

		};

		this.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {

			if ( blending === THREE.NoBlending ) {

				this.disable( gl.BLEND );

			} else {

				this.enable( gl.BLEND );

			}

			if ( blending !== currentBlending ) {

				if ( blending === THREE.AdditiveBlending ) {

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

				} else if ( blending === THREE.SubtractiveBlending ) {

					// TODO: Find blendFuncSeparate() combination

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

				} else if ( blending === THREE.MultiplyBlending ) {

					// TODO: Find blendFuncSeparate() combination

					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

				} else {

					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

				}

				currentBlending = blending;

			}

			if ( blending === THREE.CustomBlending ) {

				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;

				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;

				}

				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;

				}

			} else {

				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

			}

		};

		this.setDepthFunc = function ( depthFunc ) {

			if ( currentDepthFunc !== depthFunc ) {

				if ( depthFunc ) {

					switch ( depthFunc ) {

						case THREE.NeverDepth:

							gl.depthFunc( gl.NEVER );
							break;

						case THREE.AlwaysDepth:

							gl.depthFunc( gl.ALWAYS );
							break;

						case THREE.LessDepth:

							gl.depthFunc( gl.LESS );
							break;

						case THREE.LessEqualDepth:

							gl.depthFunc( gl.LEQUAL );
							break;

						case THREE.EqualDepth:

							gl.depthFunc( gl.EQUAL );
							break;

						case THREE.GreaterEqualDepth:

							gl.depthFunc( gl.GEQUAL );
							break;

						case THREE.GreaterDepth:

							gl.depthFunc( gl.GREATER );
							break;

						case THREE.NotEqualDepth:

							gl.depthFunc( gl.NOTEQUAL );
							break;

						default:

							gl.depthFunc( gl.LEQUAL );

					}

				} else {

					gl.depthFunc( gl.LEQUAL );

				}

				currentDepthFunc = depthFunc;

			}

		};

		this.setDepthTest = function ( depthTest ) {

			if ( depthTest ) {

				this.enable( gl.DEPTH_TEST );

			} else {

				this.disable( gl.DEPTH_TEST );

			}

		};

		this.setDepthWrite = function ( depthWrite ) {

			// TODO: Rename to setDepthMask

			if ( currentDepthWrite !== depthWrite ) {

				gl.depthMask( depthWrite );
				currentDepthWrite = depthWrite;

			}

		};

		this.setColorWrite = function ( colorWrite ) {

			// TODO: Rename to setColorMask

			if ( currentColorWrite !== colorWrite ) {

				gl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );
				currentColorWrite = colorWrite;

			}

		};

		this.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {

			if ( currentStencilFunc !== stencilFunc ||
					 currentStencilRef 	!== stencilRef 	||
					 currentStencilMask !== stencilMask ) {

				gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

				currentStencilFunc = stencilFunc;
				currentStencilRef  = stencilRef;
				currentStencilMask = stencilMask;

			}

		};

		this.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {

			if ( currentStencilFail	 !== stencilFail 	||
					 currentStencilZFail !== stencilZFail ||
					 currentStencilZPass !== stencilZPass ) {

				gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

				currentStencilFail  = stencilFail;
				currentStencilZFail = stencilZFail;
				currentStencilZPass = stencilZPass;

			}

		};

		this.setStencilTest = function ( stencilTest ) {

			if ( stencilTest ) {

				this.enable( gl.STENCIL_TEST );

			} else {

				this.disable( gl.STENCIL_TEST );

			}

		};

		this.setStencilWrite = function ( stencilWrite ) {

			// TODO: Rename to setStencilMask

			if ( currentStencilWrite !== stencilWrite ) {

				gl.stencilMask( stencilWrite );
				currentStencilWrite = stencilWrite;

			}

		};

		this.setFlipSided = function ( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		};

		this.setLineWidth = function ( width ) {

			if ( width !== currentLineWidth ) {

				gl.lineWidth( width );

				currentLineWidth = width;

			}

		};

		this.setPolygonOffset = function ( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				this.enable( gl.POLYGON_OFFSET_FILL );

			} else {

				this.disable( gl.POLYGON_OFFSET_FILL );

			}

			if ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		};

		this.getScissorTest = function () {

			return currentScissorTest;

		};

		this.setScissorTest = function ( scissorTest ) {

			currentScissorTest = scissorTest;

			if ( scissorTest ) {

				this.enable( gl.SCISSOR_TEST );

			} else {

				this.disable( gl.SCISSOR_TEST );

			}

		};

		// texture

		this.activeTexture = function ( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		};

		this.bindTexture = function ( webglType, webglTexture ) {

			if ( currentTextureSlot === undefined ) {

				_this.activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		};

		this.compressedTexImage2D = function () {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		this.texImage2D = function () {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( error );

			}

		};

		// clear values

		this.clearColor = function ( r, g, b, a ) {

			color.set( r, g, b, a );

			if ( currentClearColor.equals( color ) === false ) {

				gl.clearColor( r, g, b, a );
				currentClearColor.copy( color );

			}

		};

		this.clearDepth = function ( depth ) {

			if ( currentClearDepth !== depth ) {

				gl.clearDepth( depth );
				currentClearDepth = depth;

			}

		};

		this.clearStencil = function ( stencil ) {

			if ( currentClearStencil !== stencil ) {

				gl.clearStencil( stencil );
				currentClearStencil = stencil;

			}

		};

		//

		this.scissor = function ( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		};

		this.viewport = function ( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		};

		//

		this.reset = function () {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			capabilities = {};

			compressedTextureFormats = null;

			currentBlending = null;

			currentColorWrite = null;
			currentDepthWrite = null;
			currentStencilWrite = null;

			currentFlipSided = null;

		};

	};

	// File:src/renderers/webgl/plugins/LensFlarePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.LensFlarePlugin = function ( renderer, flares ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;
		var hasVertexTexture;

		var tempTexture, occlusionTexture;

		function init() {

			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			// buffers

			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			// textures

			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();

			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

			hasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;

			var shader;

			if ( hasVertexTexture ) {

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"uniform sampler2D occlusionMap;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

			} else {

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"precision mediump float;",

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform sampler2D occlusionMap;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
								"visibility = ( 1.0 - visibility / 4.0 );",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * visibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

			}

			program = createProgram( shader );

			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};

			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};

		}

		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */

		this.render = function ( scene, camera, viewport ) {

			if ( flares.length === 0 ) return;

			var tempPosition = new THREE.Vector3();

			var invAspect = viewport.w / viewport.z,
				halfViewportWidth = viewport.z * 0.5,
				halfViewportHeight = viewport.w * 0.5;

			var size = 16 / viewport.w,
				scale = new THREE.Vector2( size * invAspect, size );

			var screenPosition = new THREE.Vector3( 1, 1, 0 ),
				screenPositionPixels = new THREE.Vector2( 1, 1 );

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms

			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			state.disable( gl.CULL_FACE );
			state.setDepthWrite( false );

			for ( var i = 0, l = flares.length; i < l; i ++ ) {

				size = 16 / viewport.w;
				scale.set( size * invAspect, size );

				// calc object screen position

				var flare = flares[ i ];

				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );

				// setup arrays for gl programs

				screenPosition.copy( tempPosition );

				screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
				screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

				// screen cull

				if ( hasVertexTexture || (
					screenPositionPixels.x > 0 &&
					screenPositionPixels.x < viewport.z &&
					screenPositionPixels.y > 0 &&
					screenPositionPixels.y < viewport.w ) ) {

					// save current RGB to temp texture

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );


					// render pink quad

					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// copy result to occlusionMap

					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );


					// restore graphics

					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );

					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


					// update object positions

					flare.positionScreen.copy( screenPosition );

					if ( flare.customUpdateCallback ) {

						flare.customUpdateCallback( flare );

					} else {

						flare.updateLensFlares();

					}

					// render flares

					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );

					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

						var sprite = flare.lensFlares[ j ];

						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;

							size = sprite.size * sprite.scale / viewport.w;

							scale.x = size * invAspect;
							scale.y = size;

							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );

							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture( sprite.texture, 1 );

							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

						}

					}

				}

			}

			// restore gl

			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			state.setDepthWrite( true );

			renderer.resetGLState();

		};

		function createProgram ( shader ) {

			var program = gl.createProgram();

			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );

			var prefix = "precision " + renderer.getPrecision() + " float;\n";

			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );

			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );

			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );

			gl.linkProgram( program );

			return program;

		}

	};

	// File:src/renderers/webgl/plugins/SpritePlugin.js

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SpritePlugin = function ( renderer, sprites ) {

		var gl = renderer.context;
		var state = renderer.state;

		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;

		var texture;

		// decompose matrixWorld

		var spritePosition = new THREE.Vector3();
		var spriteRotation = new THREE.Quaternion();
		var spriteScale = new THREE.Vector3();

		function init() {

			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );

			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );

			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

			program = createProgram();

			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};

			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),

				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),

				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),

				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),

				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};

			var canvas = document.createElement( 'canvas' );
			canvas.width = 8;
			canvas.height = 8;

			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );

			texture = new THREE.Texture( canvas );
			texture.needsUpdate = true;

		}

		this.render = function ( scene, camera ) {

			if ( sprites.length === 0 ) return;

			// setup gl

			if ( program === undefined ) {

				init();

			}

			gl.useProgram( program );

			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();

			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );

			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );

			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;

			if ( fog ) {

				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

				if ( fog instanceof THREE.Fog ) {

					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );

					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;

				} else if ( fog instanceof THREE.FogExp2 ) {

					gl.uniform1f( uniforms.fogDensity, fog.density );

					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;

				}

			} else {

				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;

			}


			// update positions and sort

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];

				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

			}

			sprites.sort( painterSortStable );

			// render all sprites

			var scale = [];

			for ( var i = 0, l = sprites.length; i < l; i ++ ) {

				var sprite = sprites[ i ];
				var material = sprite.material;

				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;

				var fogType = 0;

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				}

				if ( oldFogType !== fogType ) {

					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				if ( material.map !== null ) {

					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

				} else {

					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );

				}

				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );

				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );

				if ( material.map && material.map.image && material.map.image.width ) {

					renderer.setTexture( material.map, 0 );

				} else {

					renderer.setTexture( texture, 0 );

				}

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			}

			// restore gl

			state.enable( gl.CULL_FACE );

			renderer.resetGLState();

		};

		function createProgram () {

			var program = gl.createProgram();

			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

			gl.shaderSource( vertexShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',

				'void main() {',

					'vUV = uvOffset + uv * uvScale;',

					'vec2 alignedPosition = position * scale;',

					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

					'vec4 finalPosition;',

					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',

					'gl_Position = finalPosition;',

				'}'

			].join( '\n' ) );

			gl.shaderSource( fragmentShader, [

				'precision ' + renderer.getPrecision() + ' float;',

				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',

				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',

				'varying vec2 vUV;',

				'void main() {',

					'vec4 texture = texture2D( map, vUV );',

					'if ( texture.a < alphaTest ) discard;',

					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

					'if ( fogType > 0 ) {',

						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',

						'if ( fogType == 1 ) {',

							'fogFactor = smoothstep( fogNear, fogFar, depth );',

						'} else {',

							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

						'}',

						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

					'}',

				'}'

			].join( '\n' ) );

			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );

			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );

			gl.linkProgram( program );

			return program;

		}

		function painterSortStable ( a, b ) {
			
			if ( a.renderOrder !== b.renderOrder ) {

				return a.renderOrder - b.renderOrder;

			} else if ( a.z !== b.z ) {

				return b.z - a.z;

			} else {

				return b.id - a.id;

			}

		}

	};

	// File:src/Three.Legacy.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	Object.defineProperties( THREE.Box2.prototype, {
		empty: {
			value: function () {
				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			}
		},
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		}
	} );

	Object.defineProperties( THREE.Box3.prototype, {
		empty: {
			value: function () {
				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			}
		},
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		},
		isIntersectionSphere: {
			value: function ( sphere ) {
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		}
	} );

	Object.defineProperties( THREE.Matrix3.prototype, {
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
			}
		},
		multiplyVector3Array: {
			value: function ( a ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		}
	} );

	Object.defineProperties( THREE.Matrix4.prototype, {
		extractPosition: {
			value: function ( m ) {
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
			}
		},
		setRotationFromQuaternion: {
			value: function ( q ) {
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
			}
		},
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
				return vector.applyProjection( this );
			}
		},
		multiplyVector4: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			}
		},
		multiplyVector3Array: {
			value: function ( a ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		},
		rotateAxis: {
			value: function ( v ) {
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
			}
		},
		crossVector: {
			value: function ( vector ) {
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			}
		},
		translate: {
			value: function ( v ) {
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
			}
		},
		rotateX: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
			}
		},
		rotateY: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
			}
		},
		rotateZ: {
			value: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
			}
		},
		rotateByAxis: {
			value: function ( axis, angle ) {
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
			}
		}
	} );

	Object.defineProperties( THREE.Plane.prototype, {
		isIntersectionLine: {
			value: function ( line ) {
				console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
				return this.intersectsLine( line );
			}
		}
	} );

	Object.defineProperties( THREE.Quaternion.prototype, {
		multiplyVector3: {
			value: function ( vector ) {
				console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
				return vector.applyQuaternion( this );
			}
		}
	} );

	Object.defineProperties( THREE.Ray.prototype, {
		isIntersectionBox: {
			value: function ( box ) {
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		},
		isIntersectionPlane: {
			value: function ( plane ) {
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
			}
		},
		isIntersectionSphere: {
			value: function ( sphere ) {
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		}
	} );

	Object.defineProperties( THREE.Vector3.prototype, {
		setEulerFromRotationMatrix: {
			value: function () {
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
			}
		},
		setEulerFromQuaternion: {
			value: function () {
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
			}
		},
		getPositionFromMatrix: {
			value: function ( m ) {
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
			}
		},
		getScaleFromMatrix: {
			value: function ( m ) {
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
			}
		},
		getColumnFromMatrix: {
			value: function ( index, matrix ) {
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( index, matrix );
			}
		}
	} );

	//

	THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new THREE.Face3( a, b, c, normal, color, materialIndex );

	};

	//

	Object.defineProperties( THREE.Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		getChildByName: {
			value: function ( name ) {
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
			}
		},
		renderDepth: {
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
			}
		},
		translate: {
			value: function ( distance, axis ) {
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );

	//

	Object.defineProperties( THREE, {
		PointCloud: {
			value: function ( geometry, material ) {
				console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			}
		},
		ParticleSystem: {
			value: function ( geometry, material ) {
				console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			}
		}
	} );

	//

	Object.defineProperties( THREE.Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;
			}
		}
	} );

	Object.defineProperties( THREE.BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		},
		addIndex: {
			value: function ( index ) {
				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );
			}
		},
		addDrawCall: {
			value: function ( start, count, indexOffset ) {
				if ( indexOffset !== undefined ) {
					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );
			}
		},
		clearDrawCalls: {
			value: function () {
				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();
			}
		},
		computeTangents: {
			value: function () {
				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
			}
		},
		computeOffsets: {
			value: function () {
				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
			}
		}
	} );

	//

	Object.defineProperties( THREE.Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
				return new THREE.Color();
			}
		}
	} );

	Object.defineProperties( THREE, {
		PointCloudMaterial: {
			value: function ( parameters ) {
				console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		},
		ParticleBasicMaterial: {
			value: function ( parameters ) {
				console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		},
		ParticleSystemMaterial:{
			value: function ( parameters ) {
				console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			}
		}
	} );

	Object.defineProperties( THREE.MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function ( value ) {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );

	Object.defineProperties( THREE.ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.WebGLRenderer.prototype, {
		supportsFloatTextures: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
			}
		},
		supportsHalfFloatTextures: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
			}
		},
		supportsStandardDerivatives: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
			}
		},
		supportsCompressedTextureS3TC: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
			}
		},
		supportsCompressedTexturePVRTC: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
			}
		},
		supportsBlendMinMax: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
			}
		},
		supportsVertexTextures: {
			value: function () {
				return this.capabilities.vertexTextures;
			}
		},
		supportsInstancedArrays: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
			}
		},
		enableScissorTest: {
			value: function ( boolean ) {
				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );
			}
		},
		initMaterial: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
			}
		},
		addPrePlugin: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
			}
		},
		addPostPlugin: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
			}
		},
		updateShadowMap: {
			value: function () {
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
			}
		},
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				return this.shadowMap.cullFace;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
				this.shadowMap.cullFace = value;
			}
		}
	} );

	//

	Object.defineProperties( THREE.WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );

	//

	THREE.GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

			var matrix;

			if ( geometry2 instanceof THREE.Mesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	THREE.ImageUtils = {

		crossOrigin: undefined,

		loadTexture: function ( url, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

			var loader = new THREE.TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( url, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadTextureCube: function ( urls, mapping, onLoad, onError ) {

			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

			var loader = new THREE.CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );

			var texture = loader.load( urls, onLoad, undefined, onError );

			if ( mapping ) texture.mapping = mapping;

			return texture;

		},

		loadCompressedTexture: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

		},

		loadCompressedTextureCube: function () {

			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

		}

	};

	//

	THREE.Projector = function () {

		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

		this.projectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );

		};

		this.unprojectVector = function ( vector, camera ) {

			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );

		};

		this.pickingRay = function ( vector, camera ) {

			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

		};

	};

	//

	THREE.CanvasRenderer = function () {

		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

		this.domElement = document.createElement( 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};

	};

	//

	THREE.MeshFaceMaterial = THREE.MultiMaterial;

	// File:src/extras/CurveUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.CurveUtils = {

		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

		},

		// Puay Bing, thanks for helping with this derivative!

		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;

		},

		tangentSpline: function ( t, p0, p1, p2, p3 ) {

			// To check if my formulas are correct

			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2

			return h00 + h10 + h01 + h11;

		},

		// Catmull-Rom

		interpolate: function( p0, p1, p2, p3, t ) {

			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

		}

	};

	// File:src/extras/SceneUtils.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.SceneUtils = {

		createMultiMaterialObject: function ( geometry, materials ) {

			var group = new THREE.Group();

			for ( var i = 0, l = materials.length; i < l; i ++ ) {

				group.add( new THREE.Mesh( geometry, materials[ i ] ) );

			}

			return group;

		},

		detach: function ( child, parent, scene ) {

			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );

		},

		attach: function ( child, scene, parent ) {

			var matrixWorldInverse = new THREE.Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );

			scene.remove( child );
			parent.add( child );

		}

	};

	// File:src/extras/ShapeUtils.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	THREE.ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		triangulate: ( function () {

			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */

			function snip( contour, u, v, w, n, verts ) {

				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;

				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;

				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;

				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;

				if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;

				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;

				for ( p = 0; p < n; p ++ ) {

					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;

					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;

					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;

					// see if p is inside triangle abc

					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;

					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

				}

				return true;

			}

			// takes in an contour array and returns

			return function ( contour, indices ) {

				var n = contour.length;

				if ( n < 3 ) return null;

				var result = [],
					verts = [],
					vertIndices = [];

				/* we want a counter-clockwise polygon in verts */

				var u, v, w;

				if ( THREE.ShapeUtils.area( contour ) > 0.0 ) {

					for ( v = 0; v < n; v ++ ) verts[ v ] = v;

				} else {

					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

				}

				var nv = n;

				/*  remove nv - 2 vertices, creating 1 triangle every time */

				var count = 2 * nv;   /* error detection */

				for ( v = nv - 1; nv > 2; ) {

					/* if we loop, it is probably a non-simple polygon */

					if ( ( count -- ) <= 0 ) {

						//** Triangulate: ERROR - probable bad polygon!

						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

						if ( indices ) return vertIndices;
						return result;

					}

					/* three consecutive vertices in current polygon, <u,v,w> */

					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

					if ( snip( contour, u, v, w, nv, verts ) ) {

						var a, b, c, s, t;

						/* true names of the vertices */

						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];

						/* output Triangle */

						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );


						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

						/* remove v from the remaining polygon */

						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

							verts[ s ] = verts[ t ];

						}

						nv --;

						/* reset error detection counter */

						count = 2 * nv;

					}

				}

				if ( indices ) return vertIndices;
				return result;

			}

		} )(),

		triangulateShape: function ( contour, holes ) {

			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {

					if ( inSegPt1.x < inSegPt2.x ) {

						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

					} else {

						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

					}

				} else {

					if ( inSegPt1.y < inSegPt2.y ) {

						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

					} else {

						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

					}

				}

			}

			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

				if ( Math.abs( limit ) > Number.EPSILON ) {

					// not parallel

					var perpSeg2;
					if ( limit > 0 ) {

						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

					} else {

						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

					}

					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];

					}
					if ( perpSeg2 === limit ) {

						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];

					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

				} else {

					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {

						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point

					}
					// segment#1  is a single point
					if ( seg1Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];

					}
					// segment#2  is a single point
					if ( seg2Pt ) {

						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];

					}

					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {

						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

						}

					} else {

						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

						} else {

							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

						} else {

							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

						}

					}
					if ( seg1minVal <= seg2minVal ) {

						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];

					} else {

						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{

							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];

						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];

					}

				}

			}

			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

				// The order of legs is important

				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

					// angle != 180 deg.

					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

					if ( from2toAngle > 0 ) {

						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

					} else {

						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

					}

				} else {

					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );

				}

			}


			function removeHoles( contour, holes ) {

				var shape = contour.concat(); // work on this shape
				var hole;

				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;

					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;

					}

					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;

					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {

						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;

					}

					return	true;

				}

				function intersectsShapeEdge( inShapePt, inHolePt ) {

					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

					return	false;

				}

				var indepHoles = [];

				function intersectsHoleEdge( inShapePt, inHolePt ) {

					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

					}
					return	false;

				}

				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					indepHoles.push( h );

				}

				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {

					counter --;
					if ( counter < 0 ) {

						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;

					}

					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;

						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {

							holeIdx = indepHoles[ h ];

							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;

							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

								holeIndex = h2;
								indepHoles.splice( h, 1 );

								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );

								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

								minShapeIndex = shapeIndex;

								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );

								break;

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

							failedCuts[ cutKey ] = true;			// remember failure

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

					}

				}

				return shape; 			/* shape with no holes */

			}


			var i, il, f, face,
				key, index,
				allPointsMap = {};

			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

			var allpoints = contour.concat();

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				Array.prototype.push.apply( allpoints, holes[ h ] );

			}

			//console.log( "allpoints",allpoints, allpoints.length );

			// prepare all points map

			for ( i = 0, il = allpoints.length; i < il; i ++ ) {

				key = allpoints[ i ].x + ":" + allpoints[ i ].y;

				if ( allPointsMap[ key ] !== undefined ) {

					console.warn( "THREE.Shape: Duplicate point", key );

				}

				allPointsMap[ key ] = i;

			}

			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );

			var triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );

			// check all face vertices against all points map

			for ( i = 0, il = triangles.length; i < il; i ++ ) {

				face = triangles[ i ];

				for ( f = 0; f < 3; f ++ ) {

					key = face[ f ].x + ":" + face[ f ].y;

					index = allPointsMap[ key ];

					if ( index !== undefined ) {

						face[ f ] = index;

					}

				}

			}

			return triangles.concat();

		},

		isClockWise: function ( pts ) {

			return THREE.ShapeUtils.area( pts ) < 0;

		},

		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

		// Quad Bezier Functions

		b2: ( function () {

			function b2p0( t, p ) {

				var k = 1 - t;
				return k * k * p;

			}

			function b2p1( t, p ) {

				return 2 * ( 1 - t ) * t * p;

			}

			function b2p2( t, p ) {

				return t * t * p;

			}

			return function ( t, p0, p1, p2 ) {

				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

			};

		} )(),

		// Cubic Bezier Functions

		b3: ( function () {

			function b3p0( t, p ) {

				var k = 1 - t;
				return k * k * k * p;

			}

			function b3p1( t, p ) {

				var k = 1 - t;
				return 3 * k * k * t * p;

			}

			function b3p2( t, p ) {

				var k = 1 - t;
				return 3 * k * t * t * p;

			}

			function b3p3( t, p ) {

				return t * t * t * p;

			}

			return function ( t, p0, p1, p2, p3 ) {

				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

			};

		} )()

	};

	// File:src/extras/core/Curve.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTagentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 * THREE.ClosedSplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	THREE.Curve = function () {

	};

	THREE.Curve.prototype = {

		constructor: THREE.Curve,

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( t ) {

			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPoint( d / divisions ) );

			}

			return pts;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( ! divisions ) divisions = 5;

			var d, pts = [];

			for ( d = 0; d <= divisions; d ++ ) {

				pts.push( this.getPointAt( d / divisions ) );

			}

			return pts;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {

				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum:sum }; Sum is in the last element.

		},

		updateArcLengths: function() {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			//var time = Date.now();

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			//console.log('b' , i, low, high, Date.now()- time);

			if ( arcLengths[ i ] === targetArcLength ) {

				var t = i / ( il - 1 );
				return t;

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		}

	};

	// TODO: Transformation for Curves?

	/**************************************************************
	 *	3D Curves
	 **************************************************************/

	// A Factory method for creating new curve subclasses

	THREE.Curve.create = function ( constructor, getPointFunc ) {

		constructor.prototype = Object.create( THREE.Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;

		return constructor;

	};

	// File:src/extras/core/CurvePath.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	THREE.CurvePath = function () {

		this.curves = [];

		this.autoClose = false; // Automatically closes the path

	};

	THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );
	THREE.CurvePath.prototype.constructor = THREE.CurvePath;

	THREE.CurvePath.prototype.add = function ( curve ) {

		this.curves.push( curve );

	};

	/*
	THREE.CurvePath.prototype.checkConnection = function() {
		// TODO
		// If the ending of curve is not connected to the starting
		// or the next curve, then, this is not a real path
	};
	*/

	THREE.CurvePath.prototype.closePath = function() {

		// TODO Test
		// and verify for vector3 (needs to implement equals)
		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new THREE.LineCurve( endPoint, startPoint ) );

		}

	};

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	THREE.CurvePath.prototype.getPoint = function( t ) {

		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];

				var u = 1 - diff / curve.getLength();

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	};

	/*
	THREE.CurvePath.prototype.getTangent = function( t ) {
	};
	*/

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	THREE.CurvePath.prototype.getLength = function() {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	};

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	THREE.CurvePath.prototype.getCurveLengths = function() {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	};



	/**************************************************************
	 *	Create Geometries Helpers
	 **************************************************************/

	/// Generate geometry from path points (for Line or Points objects)

	THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	};

	// Generate geometry from equidistant sampling along the path

	THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	};

	THREE.CurvePath.prototype.createGeometry = function( points ) {

		var geometry = new THREE.Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	};

	// File:src/extras/core/Font.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.Font = function ( data ) {

		this.data = data;

	};

	THREE.Font.prototype = {

		constructor: THREE.Font,

		generateShapes: function ( text, size, divisions ) {

			function createPaths( text ) {

				var chars = String( text ).split( '' );
				var scale = size / data.resolution;
				var offset = 0;

				var paths = [];

				for ( var i = 0; i < chars.length; i ++ ) {

					var ret = createPath( chars[ i ], scale, offset );
					offset += ret.offset;

					paths.push( ret.path );

				}

				return paths;

			}

			function createPath( c, scale, offset ) {

				var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

				if ( ! glyph ) return;

				var path = new THREE.Path();

				var pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;
				var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

				if ( glyph.o ) {

					var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

					for ( var i = 0, l = outline.length; i < l; ) {

						var action = outline[ i ++ ];

						switch ( action ) {

							case 'm': // moveTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.moveTo( x, y );

								break;

							case 'l': // lineTo

								x = outline[ i ++ ] * scale + offset;
								y = outline[ i ++ ] * scale;

								path.lineTo( x, y );

								break;

							case 'q': // quadraticCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;

								path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b2( t, cpx0, cpx1, cpx );
										b2( t, cpy0, cpy1, cpy );

									}

								}

								break;

							case 'b': // bezierCurveTo

								cpx  = outline[ i ++ ] * scale + offset;
								cpy  = outline[ i ++ ] * scale;
								cpx1 = outline[ i ++ ] * scale + offset;
								cpy1 = outline[ i ++ ] * scale;
								cpx2 = outline[ i ++ ] * scale + offset;
								cpy2 = outline[ i ++ ] * scale;

								path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

								laste = pts[ pts.length - 1 ];

								if ( laste ) {

									cpx0 = laste.x;
									cpy0 = laste.y;

									for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

										var t = i2 / divisions;
										b3( t, cpx0, cpx1, cpx2, cpx );
										b3( t, cpy0, cpy1, cpy2, cpy );

									}

								}

								break;

						}

					}

				}

				return { offset: glyph.ha * scale, path: path };

			}

			//

			if ( size === undefined ) size = 100;
			if ( divisions === undefined ) divisions = 4;

			var data = this.data;

			var paths = createPaths( text );
			var shapes = [];

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	};

	// File:src/extras/core/Path.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/

	THREE.Path = function ( points ) {

		THREE.CurvePath.call( this );

		this.actions = [];

		if ( points ) {

			this.fromPoints( points );

		}

	};

	THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );
	THREE.Path.prototype.constructor = THREE.Path;

	// TODO Clean up PATH API

	// Create path using straight lines to connect all points
	// - vectors: array of Vector2

	THREE.Path.prototype.fromPoints = function ( vectors ) {

		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

		for ( var i = 1, l = vectors.length; i < l; i ++ ) {

			this.lineTo( vectors[ i ].x, vectors[ i ].y );

		}

	};

	// startPath() endPath()?

	THREE.Path.prototype.moveTo = function ( x, y ) {

		this.actions.push( { action: 'moveTo', args: [ x, y ] } );

	};

	THREE.Path.prototype.lineTo = function ( x, y ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
		this.curves.push( curve );

		this.actions.push( { action: 'lineTo', args: [ x, y ] } );

	};

	THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.QuadraticBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCPx, aCPy ),
			new THREE.Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );

	};

	THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var curve = new THREE.CubicBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCP1x, aCP1y ),
			new THREE.Vector2( aCP2x, aCP2y ),
			new THREE.Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );

	};

	THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

		var args = Array.prototype.slice.call( arguments );

		var lastargs = this.actions[ this.actions.length - 1 ].args;

		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		var npts = [ new THREE.Vector2( x0, y0 ) ];
		Array.prototype.push.apply( npts, pts );

		var curve = new THREE.SplineCurve( npts );
		this.curves.push( curve );

		this.actions.push( { action: 'splineThru', args: args } );

	};

	// FUTURE: Change the API or follow canvas API?

	THREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	 };

	 THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	 };

	THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	 };


	THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var args = [
			aX, aY,
			xRadius, yRadius,
			aStartAngle, aEndAngle,
			aClockwise,
			aRotation || 0 // aRotation is optional.
		];

		var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		args.push( lastPoint.x );
		args.push( lastPoint.y );

		this.actions.push( { action: 'ellipse', args: args } );

	 };

	THREE.Path.prototype.getSpacedPoints = function ( divisions ) {

		if ( ! divisions ) divisions = 40;

		var points = [];

		for ( var i = 0; i < divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

			//if ( !this.getPoint( i / divisions ) ) throw "DIE";

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	};

	/* Return an array of vectors based on contour of the path */

	THREE.Path.prototype.getPoints = function( divisions ) {

		divisions = divisions || 12;

		var b2 = THREE.ShapeUtils.b2;
		var b3 = THREE.ShapeUtils.b3;

		var points = [];

		var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
			laste, tx, ty;

		for ( var i = 0, l = this.actions.length; i < l; i ++ ) {

			var item = this.actions[ i ];

			var action = item.action;
			var args = item.args;

			switch ( action ) {

			case 'moveTo':

				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

				break;

			case 'lineTo':

				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

				break;

			case 'quadraticCurveTo':

				cpx  = args[ 2 ];
				cpy  = args[ 3 ];

				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];

				if ( points.length > 0 ) {

					laste = points[ points.length - 1 ];

					cpx0 = laste.x;
					cpy0 = laste.y;

				} else {

					laste = this.actions[ i - 1 ].args;

					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];

				}

				for ( var j = 1; j <= divisions; j ++ ) {

					var t = j / divisions;

					tx = b2( t, cpx0, cpx1, cpx );
					ty = b2( t, cpy0, cpy1, cpy );

					points.push( new THREE.Vector2( tx, ty ) );

				}

				break;

			case 'bezierCurveTo':

				cpx  = args[ 4 ];
				cpy  = args[ 5 ];

				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];

				cpx2 = args[ 2 ];
				cpy2 = args[ 3 ];

				if ( points.length > 0 ) {

					laste = points[ points.length - 1 ];

					cpx0 = laste.x;
					cpy0 = laste.y;

				} else {

					laste = this.actions[ i - 1 ].args;

					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];

				}


				for ( var j = 1; j <= divisions; j ++ ) {

					var t = j / divisions;

					tx = b3( t, cpx0, cpx1, cpx2, cpx );
					ty = b3( t, cpy0, cpy1, cpy2, cpy );

					points.push( new THREE.Vector2( tx, ty ) );

				}

				break;

			case 'splineThru':

				laste = this.actions[ i - 1 ].args;

				var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
				var spts = [ last ];

				var n = divisions * args[ 0 ].length;

				spts = spts.concat( args[ 0 ] );

				var spline = new THREE.SplineCurve( spts );

				for ( var j = 1; j <= n; j ++ ) {

					points.push( spline.getPointAt( j / n ) );

				}

				break;

			case 'arc':

				var aX = args[ 0 ], aY = args[ 1 ],
					aRadius = args[ 2 ],
					aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
					aClockwise = !! args[ 5 ];

				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;

				for ( var j = 1; j <= tdivisions; j ++ ) {

					var t = j / tdivisions;

					if ( ! aClockwise ) {

						t = 1 - t;

					}

					angle = aStartAngle + t * deltaAngle;

					tx = aX + aRadius * Math.cos( angle );
					ty = aY + aRadius * Math.sin( angle );

					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

					points.push( new THREE.Vector2( tx, ty ) );

				}

				//console.log(points);

				break;

			case 'ellipse':

				var aX = args[ 0 ], aY = args[ 1 ],
					xRadius = args[ 2 ],
					yRadius = args[ 3 ],
					aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
					aClockwise = !! args[ 6 ],
					aRotation = args[ 7 ];


				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;

				var cos, sin;
				if ( aRotation !== 0 ) {

					cos = Math.cos( aRotation );
					sin = Math.sin( aRotation );

				}

				for ( var j = 1; j <= tdivisions; j ++ ) {

					var t = j / tdivisions;

					if ( ! aClockwise ) {

						t = 1 - t;

					}

					angle = aStartAngle + t * deltaAngle;

					tx = aX + xRadius * Math.cos( angle );
					ty = aY + yRadius * Math.sin( angle );

					if ( aRotation !== 0 ) {

						var x = tx, y = ty;

						// Rotate the point about the center of the ellipse.
						tx = ( x - aX ) * cos - ( y - aY ) * sin + aX;
						ty = ( x - aX ) * sin + ( y - aY ) * cos + aY;

					}

					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

					points.push( new THREE.Vector2( tx, ty ) );

				}

				//console.log(points);

				break;

			} // end switch

		}



		// Normalize to remove the closing point by default.
		var lastPoint = points[ points.length - 1 ];
		if ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&
				 Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )
			points.splice( points.length - 1, 1 );

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	};

	//
	// Breaks path into shapes
	//
	//	Assumptions (if parameter isCCW==true the opposite holds):
	//	- solid shapes are defined clockwise (CW)
	//	- holes are defined counterclockwise (CCW)
	//
	//	If parameter noHoles==true:
	//  - all subPaths are regarded as solid shapes
	//  - definition order CW/CCW has no relevance
	//

	THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {

		function extractSubpaths( inActions ) {

			var subPaths = [], lastPath = new THREE.Path();

			for ( var i = 0, l = inActions.length; i < l; i ++ ) {

				var item = inActions[ i ];

				var args = item.args;
				var action = item.action;

				if ( action === 'moveTo' ) {

					if ( lastPath.actions.length !== 0 ) {

						subPaths.push( lastPath );
						lastPath = new THREE.Path();

					}

				}

				lastPath[ action ].apply( lastPath, args );

			}

			if ( lastPath.actions.length !== 0 ) {

				subPaths.push( lastPath );

			}

			// console.log(subPaths);

			return	subPaths;

		}

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			//console.log("shape", shapes);

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt  = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = THREE.ShapeUtils.isClockWise;

		var subPaths = extractSubpaths( this.actions );
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new THREE.Shape();
			tmpShape.actions = tmpPath.actions;
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.actions = tmpPath.actions;
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	};

	// File:src/extras/core/Shape.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	THREE.Shape = function () {

		THREE.Path.apply( this, arguments );

		this.holes = [];

	};

	THREE.Shape.prototype = Object.create( THREE.Path.prototype );
	THREE.Shape.prototype.constructor = THREE.Shape;

	// Convenience method to return ExtrudeGeometry

	THREE.Shape.prototype.extrude = function ( options ) {

		return new THREE.ExtrudeGeometry( this, options );

	};

	// Convenience method to return ShapeGeometry

	THREE.Shape.prototype.makeGeometry = function ( options ) {

		return new THREE.ShapeGeometry( this, options );

	};

	// Get points of holes

	THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	};


	// Get points of shape and holes (keypoints based on segments parameter)

	THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	};

	THREE.Shape.prototype.extractPoints = function ( divisions ) {

		return this.extractAllPoints( divisions );

	};

	// File:src/extras/curves/LineCurve.js

	/**************************************************************
	 *	Line
	 **************************************************************/

	THREE.LineCurve = function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;

	THREE.LineCurve.prototype.getPoint = function ( t ) {

		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	THREE.LineCurve.prototype.getPointAt = function ( u ) {

		return this.getPoint( u );

	};

	THREE.LineCurve.prototype.getTangent = function( t ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	// File:src/extras/curves/QuadraticBezierCurve.js

	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/


	THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	};

	THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;


	THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

		var b2 = THREE.ShapeUtils.b2;

		return new THREE.Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);

	};


	THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

		var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;

		return new THREE.Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();

	};

	// File:src/extras/curves/CubicBezierCurve.js

	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/

	THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	};

	THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;

	THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

		var b3 = THREE.ShapeUtils.b3;

		return new THREE.Vector2( 
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);

	};

	THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

		var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;

		return new THREE.Vector2( 
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();

	};

	// File:src/extras/curves/SplineCurve.js

	/**************************************************************
	 *	Spline curve
	 **************************************************************/

	THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

		this.points = ( points == undefined ) ? [] : points;

	};

	THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;

	THREE.SplineCurve.prototype.getPoint = function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var interpolate = THREE.CurveUtils.interpolate;

		return new THREE.Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);

	};

	// File:src/extras/curves/EllipseCurve.js

	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/

	THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;
		
		this.aRotation = aRotation || 0;

	};

	THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;

	THREE.EllipseCurve.prototype.getPoint = function ( t ) {

		var deltaAngle = this.aEndAngle - this.aStartAngle;

		if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
		if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

		var angle;

		if ( this.aClockwise === true ) {

			angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

		} else {

			angle = this.aStartAngle + t * deltaAngle;

		}
		
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x, ty = y;

			// Rotate the point about the center of the ellipse.
			x = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;
			y = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;

		}

		return new THREE.Vector2( x, y );

	};

	// File:src/extras/curves/ArcCurve.js

	/**************************************************************
	 *	Arc curve
	 **************************************************************/

	THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	};

	THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
	THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;

	// File:src/extras/curves/LineCurve3.js

	/**************************************************************
	 *	Line3D
	 **************************************************************/

	THREE.LineCurve3 = THREE.Curve.create(

		function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var vector = new THREE.Vector3();

			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );

			return vector;

		}

	);

	// File:src/extras/curves/QuadraticBezierCurve3.js

	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/

	THREE.QuadraticBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		},

		function ( t ) {

			var b2 = THREE.ShapeUtils.b2;		

			return new THREE.Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);

		}

	);

	// File:src/extras/curves/CubicBezierCurve3.js

	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/

	THREE.CubicBezierCurve3 = THREE.Curve.create(

		function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		},

		function ( t ) {

			var b3 = THREE.ShapeUtils.b3;

			return new THREE.Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);

		}

	);

	// File:src/extras/curves/SplineCurve3.js

	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/


	THREE.SplineCurve3 = THREE.Curve.create(

		function ( points /* array of Vector3 */ ) {

			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points == undefined ) ? [] : points;

		},

		function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = THREE.CurveUtils.interpolate;

			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);

		}

	);

	// File:src/extras/curves/CatmullRomCurve3.js

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */

	THREE.CatmullRomCurve3 = ( function() {

		var
			tmp = new THREE.Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();

		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM

		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/

		function CubicPoly() {

		}

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

		};

		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			// initCubicPoly
			this.init( x1, x2, t1, t2 );

		};

		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		};

		CubicPoly.prototype.calc = function( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

		};

		// Subclass Three.js curve
		return THREE.Curve.create(

			function ( p /* array of Vector3 */ ) {

				this.points = p || [];
				this.closed = false;

			},

			function ( t ) {

				var points = this.points,
					point, intPoint, weight, l;

				l = points.length;

				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

				point = ( l - ( this.closed ? 0 : 1 ) ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				if ( this.closed ) {

					intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

				} else if ( weight === 0 && intPoint === l - 1 ) {

					intPoint = l - 2;
					weight = 1;

				}

				var p0, p1, p2, p3; // 4 points

				if ( this.closed || intPoint > 0 ) {

					p0 = points[ ( intPoint - 1 ) % l ];

				} else {

					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;

				}

				p1 = points[ intPoint % l ];
				p2 = points[ ( intPoint + 1 ) % l ];

				if ( this.closed || intPoint + 2 < l ) {

					p3 = points[ ( intPoint + 2 ) % l ];

				} else {

					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
					p3 = tmp;

				}

				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;

					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

				} else if ( this.type === 'catmullrom' ) {

					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

				}

				var v = new THREE.Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);

				return v;

			}

		);

	} )();

	// File:src/extras/curves/ClosedSplineCurve3.js

	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/


	THREE.ClosedSplineCurve3 = function ( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

		THREE.CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	};

	THREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );

	// File:src/extras/geometries/BoxGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */

	THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

		THREE.Geometry.call( this );

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		this.widthSegments = widthSegments || 1;
		this.heightSegments = heightSegments || 1;
		this.depthSegments = depthSegments || 1;

		var scope = this;

		var width_half = width / 2;
		var height_half = height / 2;
		var depth_half = depth / 2;

		buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
		buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
		buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
		buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
		buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
		buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz

		function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

			var w, ix, iy,
			gridX = scope.widthSegments,
			gridY = scope.heightSegments,
			width_half = width / 2,
			height_half = height / 2,
			offset = scope.vertices.length;

			if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

				w = 'z';

			} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

				w = 'y';
				gridY = scope.depthSegments;

			} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

				w = 'x';
				gridX = scope.depthSegments;

			}

			var gridX1 = gridX + 1,
			gridY1 = gridY + 1,
			segment_width = width / gridX,
			segment_height = height / gridY,
			normal = new THREE.Vector3();

			normal[ w ] = depth > 0 ? 1 : - 1;

			for ( iy = 0; iy < gridY1; iy ++ ) {

				for ( ix = 0; ix < gridX1; ix ++ ) {

					var vector = new THREE.Vector3();
					vector[ u ] = ( ix * segment_width - width_half ) * udir;
					vector[ v ] = ( iy * segment_height - height_half ) * vdir;
					vector[ w ] = depth;

					scope.vertices.push( vector );

				}

			}

			for ( iy = 0; iy < gridY; iy ++ ) {

				for ( ix = 0; ix < gridX; ix ++ ) {

					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;

					var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
					var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
					var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
					var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );

					var face = new THREE.Face3( a + offset, b + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;

					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

					face = new THREE.Face3( b + offset, c + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;

					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

				}

			}

		}

		this.mergeVertices();

	};

	THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;

	THREE.CubeGeometry = THREE.BoxGeometry;

	// File:src/extras/geometries/CircleGeometry.js

	/**
	 * @author hughes
	 */

	THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

	};

	THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;

	// File:src/extras/geometries/CircleBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	THREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		var vertices = segments + 2;

		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );

		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;

		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

			var segment = thetaStart + s / segments * thetaLength;

			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );

			normals[ i + 2 ] = 1; // normal z

			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

		}

		var indices = [];

		for ( var i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		this.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;

	// File:src/extras/geometries/CylinderGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;

		radialSegments = radialSegments || 8;
		heightSegments = heightSegments || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;

		var heightHalf = height / 2;

		var x, y, vertices = [], uvs = [];

		for ( y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];
			var uvsRow = [];

			var v = y / heightSegments;
			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var vertex = new THREE.Vector3();
				vertex.x = radius * Math.sin( u * thetaLength + thetaStart );
				vertex.y = - v * height + heightHalf;
				vertex.z = radius * Math.cos( u * thetaLength + thetaStart );

				this.vertices.push( vertex );

				verticesRow.push( this.vertices.length - 1 );
				uvsRow.push( new THREE.Vector2( u, 1 - v ) );

			}

			vertices.push( verticesRow );
			uvs.push( uvsRow );

		}

		var tanTheta = ( radiusBottom - radiusTop ) / height;
		var na, nb;

		for ( x = 0; x < radialSegments; x ++ ) {

			if ( radiusTop !== 0 ) {

				na = this.vertices[ vertices[ 0 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

			} else {

				na = this.vertices[ vertices[ 1 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

			}

			na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
			nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

			for ( y = 0; y < heightSegments; y ++ ) {

				var v1 = vertices[ y ][ x ];
				var v2 = vertices[ y + 1 ][ x ];
				var v3 = vertices[ y + 1 ][ x + 1 ];
				var v4 = vertices[ y ][ x + 1 ];

				var n1 = na.clone();
				var n2 = na.clone();
				var n3 = nb.clone();
				var n4 = nb.clone();

				var uv1 = uvs[ y ][ x ].clone();
				var uv2 = uvs[ y + 1 ][ x ].clone();
				var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
				var uv4 = uvs[ y ][ x + 1 ].clone();

				this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

				this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

			}

		}

		// top cap

		if ( openEnded === false && radiusTop > 0 ) {

			this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

			for ( x = 0; x < radialSegments; x ++ ) {

				var v1 = vertices[ 0 ][ x ];
				var v2 = vertices[ 0 ][ x + 1 ];
				var v3 = this.vertices.length - 1;

				var n1 = new THREE.Vector3( 0, 1, 0 );
				var n2 = new THREE.Vector3( 0, 1, 0 );
				var n3 = new THREE.Vector3( 0, 1, 0 );

				var uv1 = uvs[ 0 ][ x ].clone();
				var uv2 = uvs[ 0 ][ x + 1 ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 0 );

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			}

		}

		// bottom cap

		if ( openEnded === false && radiusBottom > 0 ) {

			this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

			for ( x = 0; x < radialSegments; x ++ ) {

				var v1 = vertices[ heightSegments ][ x + 1 ];
				var v2 = vertices[ heightSegments ][ x ];
				var v3 = this.vertices.length - 1;

				var n1 = new THREE.Vector3( 0, - 1, 0 );
				var n2 = new THREE.Vector3( 0, - 1, 0 );
				var n3 = new THREE.Vector3( 0, - 1, 0 );

				var uv1 = uvs[ heightSegments ][ x + 1 ].clone();
				var uv2 = uvs[ heightSegments ][ x ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 1 );

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			}

		}

		this.computeFaceNormals();

	};

	THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;

	// File:src/extras/geometries/EdgesGeometry.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.EdgesGeometry = function ( geometry, thresholdAngle ) {

		THREE.BufferGeometry.call( this );

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		var thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		var geometry2;

		if ( geometry instanceof THREE.BufferGeometry ) {

			geometry2 = new THREE.Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var vertices = geometry2.vertices;
		var faces = geometry2.faces;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					hash[ key ].face2 = i;

				}

			}

		}

		var coords = [];

		for ( var key in hash ) {

			var h = hash[ key ];

			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );

			}

		}

		this.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );

	};

	THREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;

	// File:src/extras/geometries/ExtrudeGeometry.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ExtrudeGeometry = function ( shapes, options ) {

		if ( typeof( shapes ) === "undefined" ) {

			shapes = [];
			return;

		}

		THREE.Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides

		//this.computeVertexNormals();

		//console.log( "took", ( Date.now() - startTime ) );

	};

	THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;

	THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

		var sl = shapes.length;

		for ( var s = 0; s < sl; s ++ ) {

			var shape = shapes[ s ];
			this.addShape( shape, options );

		}

	};

	THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

		var amount = options.amount !== undefined ? options.amount : 100;

		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var steps = options.steps !== undefined ? options.steps : 1;

		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;

		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {

			extrudePts = extrudePath.getSpacedPoints( steps );

			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion

			// SETUP TNB variables

			// Reuse TNB from TubeGeomtry for now.
			// TODO1 - have a .isClosed in spline?

			splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );

			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

			binormal = new THREE.Vector3();
			normal = new THREE.Vector3();
			position2 = new THREE.Vector3();

		}

		// Safeguards if bevels are not enabled

		if ( ! bevelEnabled ) {

			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;

		}

		// Variables initialization

		var ahole, h, hl; // looping of holes
		var scope = this;

		var shapesOffset = this.vertices.length;

		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe ...

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				if ( THREE.ShapeUtils.isClockWise( ahole ) ) {

					holes[ h ] = ahole.reverse();

				}

			}

			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

		}


		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		/* Vertices */

		var contour = vertices; // vertices has all points but contour has only points of circumference

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			vertices = vertices.concat( ahole );

		}


		function scalePt2 ( pt, vec, size ) {

			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

			return vec.clone().multiplyScalar( size ).add( pt );

		}

		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;


		// Find directions for point movement


		function getBevelVec( inPt, inPrev, inNext ) {

			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.

			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html

			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

			if ( Math.abs( collinear0 ) > Number.EPSILON ) {

				// not collinear

				// length of vectors for normalizing

				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

				// shift adjacent points by unit vectors to the left

				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

				// scaling factor for v_prev to intersection point

				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				// vector from inPt to intersection point

				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {

					return	new THREE.Vector2( v_trans_x, v_trans_y );

				} else {

					shrink_by = Math.sqrt( v_trans_lensq / 2 );

				}

			} else {

				// handle special case of collinear edges

				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {

					if ( v_next_x > Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( v_prev_x < - Number.EPSILON ) {

						if ( v_next_x < - Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

							direction_eq = true;

						}

					}

				}

				if ( direction_eq ) {

					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );

				} else {

					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );

				}

			}

			return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

		}


		var contourMovements = [];

		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)

			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

		}

		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			oneHoleMovements = [];

			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

			}

			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );

		}


		// Loop bevelSegments, 1 for the front, 1 for the back

		for ( b = 0; b < bevelSegments; b ++ ) {

			//for ( b = bevelSegments; b > 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );

			//z = bevelThickness * t;
			bs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved
			//bs = bevelSize * t; // linear

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

			}

		}

		bs = bevelSize;

		// Back facing vertices

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, 0 );

			} else {

				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

		// Add stepped vertices...
		// Including front facing vertices

		var s;

		for ( s = 1; s <= steps; s ++ ) {

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount / steps * s );

				} else {

					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

		}


		// Add bevel segments planes

		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {

			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );
			//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
			bs = bevelSize * Math.sin ( t * Math.PI / 2 );

			// contract shape

			for ( i = 0, il = contour.length; i < il; i ++ ) {

				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );

			}

			// expand holes

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];

				for ( i = 0, il = ahole.length; i < il; i ++ ) {

					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y,  amount + z );

					} else {

						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

					}

				}

			}

		}

		/* Faces */

		// Top and bottom faces

		buildLidFaces();

		// Sides faces

		buildSideFaces();


		/////  Internal functions

		function buildLidFaces() {

			if ( bevelEnabled ) {

				var layer = 0; // steps + 1
				var offset = vlen * layer;

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

				}

				layer = steps + bevelSegments * 2;
				offset = vlen * layer;

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

				}

			} else {

				// Bottom faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );

				}

				// Top faces

				for ( i = 0; i < flen; i ++ ) {

					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

				}

			}

		}

		// Create faces for the z-sides of the shape

		function buildSideFaces() {

			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );

				//, true
				layeroffset += ahole.length;

			}

		}

		function sidewalls( contour, layeroffset ) {

			var j, k;
			i = contour.length;

			while ( -- i >= 0 ) {

				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;

				//console.log('b', i,j, i-1, k,vertices.length);

				var s = 0, sl = steps  + bevelSegments * 2;

				for ( s = 0; s < sl; s ++ ) {

					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );

					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;

					f4( a, b, c, d, contour, s, sl, j, k );

				}

			}

		}


		function v( x, y, z ) {

			scope.vertices.push( new THREE.Vector3( x, y, z ) );

		}

		function f3( a, b, c ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );

			var uvs = uvgen.generateTopUV( scope, a, b, c );

			scope.faceVertexUvs[ 0 ].push( uvs );

		}

		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;

			scope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );

			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

		}

	};

	THREE.ExtrudeGeometry.WorldUVGenerator = {

		generateTopUV: function ( geometry, indexA, indexB, indexC ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];

			return [
				new THREE.Vector2( a.x, a.y ),
				new THREE.Vector2( b.x, b.y ),
				new THREE.Vector2( c.x, c.y )
			];

		},

		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

			var vertices = geometry.vertices;

			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];

			if ( Math.abs( a.y - b.y ) < 0.01 ) {

				return [
					new THREE.Vector2( a.x, 1 - a.z ),
					new THREE.Vector2( b.x, 1 - b.z ),
					new THREE.Vector2( c.x, 1 - c.z ),
					new THREE.Vector2( d.x, 1 - d.z )
				];

			} else {

				return [
					new THREE.Vector2( a.y, 1 - a.z ),
					new THREE.Vector2( b.y, 1 - b.z ),
					new THREE.Vector2( c.y, 1 - c.z ),
					new THREE.Vector2( d.y, 1 - d.z )
				];

			}

		}
	};

	// File:src/extras/geometries/ShapeGeometry.js

	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/

	THREE.ShapeGeometry = function ( shapes, options ) {

		THREE.Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

		this.addShapeList( shapes, options );

		this.computeFaceNormals();

	};

	THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;

	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			this.addShape( shapes[ i ], options );

		}

		return this;

	};

	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

		//

		var i, l, hole;

		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );

		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;

		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

		if ( reverse ) {

			vertices = vertices.reverse();

			// Maybe we should also check if holes are in the opposite direction, just to be safe...

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];

				if ( THREE.ShapeUtils.isClockWise( hole ) ) {

					holes[ i ] = hole.reverse();

				}

			}

			reverse = false;

		}

		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

		// Vertices

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];
			vertices = vertices.concat( hole );

		}

		//

		var vert, vlen = vertices.length;
		var face, flen = faces.length;

		for ( i = 0; i < vlen; i ++ ) {

			vert = vertices[ i ];

			this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

		}

		for ( i = 0; i < flen; i ++ ) {

			face = faces[ i ];

			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;

			this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

		}

	};

	// File:src/extras/geometries/LatheGeometry.js

	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */

	// points - to create a closed torus, one must use a set of points
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2*PI) range of the lathed section
	//    2*pi is a closed lathe, less than 2PI is a portion.

	THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

		THREE.Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = segments || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || 2 * Math.PI;

		var inversePointLength = 1.0 / ( points.length - 1 );
		var inverseSegments = 1.0 / segments;

		for ( var i = 0, il = segments; i <= il; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( var j = 0, jl = points.length; j < jl; j ++ ) {

				var point = points[ j ];

				var vertex = new THREE.Vector3();

				vertex.x = point.x * sin;
				vertex.y = point.y;
				vertex.z = point.x * cos;

				this.vertices.push( vertex );

			}

		}

		var np = points.length;

		for ( var i = 0, il = segments; i < il; i ++ ) {

			for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {

				var base = j + np * i;
				var a = base;
				var b = base + np;
				var c = base + 1 + np;
				var d = base + 1;

				var u0 = i * inverseSegments;
				var v0 = j * inversePointLength;
				var u1 = u0 + inverseSegments;
				var v1 = v0 + inversePointLength;

				this.faces.push( new THREE.Face3( a, b, d ) );

				this.faceVertexUvs[ 0 ].push( [

					new THREE.Vector2( u0, v0 ),
					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u0, v1 )

				] );

				this.faces.push( new THREE.Face3( b, c, d ) );

				this.faceVertexUvs[ 0 ].push( [

					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u1, v1 ),
					new THREE.Vector2( u0, v1 )

				] );


			}

		}

		this.mergeVertices();
		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;

	// File:src/extras/geometries/PlaneGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

	};

	THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;

	// File:src/extras/geometries/PlaneBufferGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */

	THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {

		THREE.BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );

		var offset = 0;
		var offset2 = 0;

		for ( var iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( var ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;

				normals[ offset + 2 ] = 1;

				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

				offset += 3;
				offset2 += 2;

			}

		}

		offset = 0;

		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

		for ( var iy = 0; iy < gridY; iy ++ ) {

			for ( var ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;

				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;

				offset += 6;

			}

		}

		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

	};

	THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;

	// File:src/extras/geometries/RingGeometry.js

	/**
	 * @author Kaleb Murphy
	 */

	THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0;
		outerRadius = outerRadius || 50;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;

		var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );

		for ( i = 0; i < phiSegments + 1; i ++ ) {

			// concentric circles inside ring

			for ( o = 0; o < thetaSegments + 1; o ++ ) {

				// number of segments per circle

				var vertex = new THREE.Vector3();
				var segment = thetaStart + o / thetaSegments * thetaLength;
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				this.vertices.push( vertex );
				uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );

			}

			radius += radiusStep;

		}

		var n = new THREE.Vector3( 0, 0, 1 );

		for ( i = 0; i < phiSegments; i ++ ) {

			// concentric circles inside ring

			var thetaSegment = i * ( thetaSegments + 1 );

			for ( o = 0; o < thetaSegments ; o ++ ) {

				// number of segments per circle

				var segment = o + thetaSegment;

				var v1 = segment;
				var v2 = segment + thetaSegments + 1;
				var v3 = segment + thetaSegments + 2;

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );

				v1 = segment;
				v2 = segment + thetaSegments + 2;
				v3 = segment + 1;

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );

			}

		}

		this.computeFaceNormals();

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;

	// File:src/extras/geometries/SphereGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

	};

	THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;

	// File:src/extras/geometries/SphereBufferGeometry.js

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */

	THREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		THREE.BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 50;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = thetaStart + thetaLength;

		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

		var positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

		var index = 0, vertices = [], normal = new THREE.Vector3();

		for ( var y = 0; y <= heightSegments; y ++ ) {

			var verticesRow = [];

			var v = y / heightSegments;

			for ( var x = 0; x <= widthSegments; x ++ ) {

				var u = x / widthSegments;

				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				normal.set( px, py, pz ).normalize();

				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );

				verticesRow.push( index );

				index ++;

			}

			vertices.push( verticesRow );

		}

		var indices = [];

		for ( var y = 0; y < heightSegments; y ++ ) {

			for ( var x = 0; x < widthSegments; x ++ ) {

				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];

				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

			}

		}

		this.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

	};

	THREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;

	// File:src/extras/geometries/TextGeometry.js

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float> // how far from text outline is bevel
	 * }
	 */

	THREE.TextGeometry = function ( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( font instanceof THREE.Font === false ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new THREE.Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

		// translate parameters to ExtrudeGeometry API

		parameters.amount = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

		THREE.ExtrudeGeometry.call( this, shapes, parameters );

		this.type = 'TextGeometry';

	};

	THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );
	THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;

	// File:src/extras/geometries/TorusGeometry.js

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */

	THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

		THREE.Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 8;
		tubularSegments = tubularSegments || 6;
		arc = arc || Math.PI * 2;

		var center = new THREE.Vector3(), uvs = [], normals = [];

		for ( var j = 0; j <= radialSegments; j ++ ) {

			for ( var i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );

				var vertex = new THREE.Vector3();
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				this.vertices.push( vertex );

				uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
				normals.push( vertex.clone().sub( center ).normalize() );

			}

		}

		for ( var j = 1; j <= radialSegments; j ++ ) {

			for ( var i = 1; i <= tubularSegments; i ++ ) {

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );

				face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );

			}

		}

		this.computeFaceNormals();

	};

	THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;

	// File:src/extras/geometries/TorusKnotGeometry.js

	/**
	 * @author oosmoxiecode
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
	 */

	THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

		THREE.Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			p: p,
			q: q,
			heightScale: heightScale
		};

		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 64;
		tubularSegments = tubularSegments || 8;
		p = p || 2;
		q = q || 3;
		heightScale = heightScale || 1;

		var grid = new Array( radialSegments );
		var tang = new THREE.Vector3();
		var n = new THREE.Vector3();
		var bitan = new THREE.Vector3();

		for ( var i = 0; i < radialSegments; ++ i ) {

			grid[ i ] = new Array( tubularSegments );
			var u = i / radialSegments * 2 * p * Math.PI;
			var p1 = getPos( u, q, p, radius, heightScale );
			var p2 = getPos( u + 0.01, q, p, radius, heightScale );
			tang.subVectors( p2, p1 );
			n.addVectors( p2, p1 );

			bitan.crossVectors( tang, n );
			n.crossVectors( bitan, tang );
			bitan.normalize();
			n.normalize();

			for ( var j = 0; j < tubularSegments; ++ j ) {

				var v = j / tubularSegments * 2 * Math.PI;
				var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				var cy = tube * Math.sin( v );

				var pos = new THREE.Vector3();
				pos.x = p1.x + cx * n.x + cy * bitan.x;
				pos.y = p1.y + cx * n.y + cy * bitan.y;
				pos.z = p1.z + cx * n.z + cy * bitan.z;

				grid[ i ][ j ] = this.vertices.push( pos ) - 1;

			}

		}

		for ( var i = 0; i < radialSegments; ++ i ) {

			for ( var j = 0; j < tubularSegments; ++ j ) {

				var ip = ( i + 1 ) % radialSegments;
				var jp = ( j + 1 ) % tubularSegments;

				var a = grid[ i ][ j ];
				var b = grid[ ip ][ j ];
				var c = grid[ ip ][ jp ];
				var d = grid[ i ][ jp ];

				var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
				var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
				var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
				var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );

				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		this.computeFaceNormals();
		this.computeVertexNormals();

		function getPos( u, in_q, in_p, radius, heightScale ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = in_q / in_p * u;
			var cs = Math.cos( quOverP );

			var tx = radius * ( 2 + cs ) * 0.5 * cu;
			var ty = radius * ( 2 + cs ) * su * 0.5;
			var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

			return new THREE.Vector3( tx, ty, tz );

		}

	};

	THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;

	// File:src/extras/geometries/TubeGeometry.js

	/**
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Modified from the TorusKnotGeometry by @oosmoxiecode
	 *
	 * Creates a tube which extrudes along a 3d spline
	 *
	 * Uses parallel transport frames as described in
	 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	 */

	THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {

		THREE.Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			segments: segments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed,
			taper: taper
		};

		segments = segments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;
		taper = taper || THREE.TubeGeometry.NoTaper;

		var grid = [];

		var scope = this,

			tangent,
			normal,
			binormal,

			numpoints = segments + 1,

			u, v, r,

			cx, cy,
			pos, pos2 = new THREE.Vector3(),
			i, j,
			ip, jp,
			a, b, c, d,
			uva, uvb, uvc, uvd;

		var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
			tangents = frames.tangents,
			normals = frames.normals,
			binormals = frames.binormals;

		// proxy internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		function vert( x, y, z ) {

			return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

		}

		// construct the grid

		for ( i = 0; i < numpoints; i ++ ) {

			grid[ i ] = [];

			u = i / ( numpoints - 1 );

			pos = path.getPointAt( u );

			tangent = tangents[ i ];
			normal = normals[ i ];
			binormal = binormals[ i ];

			r = radius * taper( u );

			for ( j = 0; j < radialSegments; j ++ ) {

				v = j / radialSegments * 2 * Math.PI;

				cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				cy = r * Math.sin( v );

				pos2.copy( pos );
				pos2.x += cx * normal.x + cy * binormal.x;
				pos2.y += cx * normal.y + cy * binormal.y;
				pos2.z += cx * normal.z + cy * binormal.z;

				grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

			}

		}


		// construct the mesh

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < radialSegments; j ++ ) {

				ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
				jp = ( j + 1 ) % radialSegments;

				a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
				b = grid[ ip ][ j ];
				c = grid[ ip ][ jp ];
				d = grid[ i ][ jp ];

				uva = new THREE.Vector2( i / segments, j / radialSegments );
				uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
				uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
				uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;

	THREE.TubeGeometry.NoTaper = function ( u ) {

		return 1;

	};

	THREE.TubeGeometry.SinusoidalTaper = function ( u ) {

		return Math.sin( Math.PI * u );

	};

	// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
	THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

		var	normal = new THREE.Vector3(),

			tangents = [],
			normals = [],
			binormals = [],

			vec = new THREE.Vector3(),
			mat = new THREE.Matrix4(),

			numpoints = segments + 1,
			theta,
			smallest,

			tx, ty, tz,
			i, u;


		// expose internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;

		// compute the tangent vectors for each segment on the path

		for ( i = 0; i < numpoints; i ++ ) {

			u = i / ( numpoints - 1 );

			tangents[ i ] = path.getTangentAt( u );
			tangents[ i ].normalize();

		}

		initialNormal3();

		/*
		function initialNormal1(lastBinormal) {
			// fixed start binormal. Has dangers of 0 vectors
			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
			normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
		}

		function initialNormal2() {

			// This uses the Frenet-Serret formula for deriving binormal
			var t2 = path.getTangentAt( epsilon );

			normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
			binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

			normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

		}
		*/

		function initialNormal3() {

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the smallest tangent xyz component

			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			smallest = Number.MAX_VALUE;
			tx = Math.abs( tangents[ 0 ].x );
			ty = Math.abs( tangents[ 0 ].y );
			tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= smallest ) {

				smallest = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= smallest ) {

				smallest = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= smallest ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );

		}


		// compute the slowly-varying normal and binormal vectors for each segment on the path

		for ( i = 1; i < numpoints; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}


		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed ) {

			theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
			theta /= ( numpoints - 1 );

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i < numpoints; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

	};

	// File:src/extras/geometries/PolyhedronGeometry.js

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

		THREE.Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		var that = this;

		for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

			prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

		}

		var p = this.vertices;

		var faces = [];

		for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

			var v1 = p[ indices[ i ] ];
			var v2 = p[ indices[ i + 1 ] ];
			var v3 = p[ indices[ i + 2 ] ];

			faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );

		}

		var centroid = new THREE.Vector3();

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			subdivide( faces[ i ], detail );

		}


		// Handle case when face straddles the seam

		for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

			var uvs = this.faceVertexUvs[ 0 ][ i ];

			var x0 = uvs[ 0 ].x;
			var x1 = uvs[ 1 ].x;
			var x2 = uvs[ 2 ].x;

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			if ( max > 0.9 && min < 0.1 ) {

				// 0.9 is somewhat arbitrary

				if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
				if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
				if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

			}

		}


		// Apply radius

		for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

			this.vertices[ i ].multiplyScalar( radius );

		}


		// Merge vertices

		this.mergeVertices();

		this.computeFaceNormals();

		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


		// Project vector onto sphere's surface

		function prepare( vector ) {

			var vertex = vector.normalize().clone();
			vertex.index = that.vertices.push( vertex ) - 1;

			// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

			var u = azimuth( vector ) / 2 / Math.PI + 0.5;
			var v = inclination( vector ) / Math.PI + 0.5;
			vertex.uv = new THREE.Vector2( u, 1 - v );

			return vertex;

		}


		// Approximate a curved face with recursively sub-divided triangles.

		function make( v1, v2, v3, materialIndex ) {

			var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );
			that.faces.push( face );

			centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

			var azi = azimuth( centroid );

			that.faceVertexUvs[ 0 ].push( [
				correctUV( v1.uv, v1, azi ),
				correctUV( v2.uv, v2, azi ),
				correctUV( v3.uv, v3, azi )
			] );

		}


		// Analytically subdivide a face to the required detail level.

		function subdivide( face, detail ) {

			var cols = Math.pow( 2, detail );
			var a = prepare( that.vertices[ face.a ] );
			var b = prepare( that.vertices[ face.b ] );
			var c = prepare( that.vertices[ face.c ] );
			var v = [];

			var materialIndex = face.materialIndex;

			// Construct all of the vertices for this subdivision.

			for ( var i = 0 ; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = prepare( a.clone().lerp( c, i / cols ) );
				var bj = prepare( b.clone().lerp( c, i / cols ) );
				var rows = cols - i;

				for ( var j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

					}

				}

			}

			// Construct all of the faces.

			for ( var i = 0; i < cols ; i ++ ) {

				for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k ],
							v[ i ][ k ],
							materialIndex
						);

					} else {

						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k + 1 ],
							v[ i + 1 ][ k ],
							materialIndex
						);

					}

				}

			}

		}


		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}


		// Texture fixing helper. Spheres have some odd behaviours.

		function correctUV( uv, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
			return uv.clone();

		}


	};

	THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;

	// File:src/extras/geometries/DodecahedronGeometry.js

	/**
	 * @author Abe Pazos / https://hamoid.com
	 */

	THREE.DodecahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,

			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,

			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];

		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;

	// File:src/extras/geometries/IcosahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.IcosahedronGeometry = function ( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];

		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;

	// File:src/extras/geometries/OctahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.OctahedronGeometry = function ( radius, detail ) {

		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];

		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;

	// File:src/extras/geometries/TetrahedronGeometry.js

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */

	THREE.TetrahedronGeometry = function ( radius, detail ) {

		var vertices = [
			 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];

		var indices = [
			 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];

		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	};

	THREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;

	// File:src/extras/geometries/ParametricGeometry.js

	/**
	 * @author zz85 / https://github.com/zz85
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 *
	 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
	 *
	 */

	THREE.ParametricGeometry = function ( func, slices, stacks ) {

		THREE.Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		var verts = this.vertices;
		var faces = this.faces;
		var uvs = this.faceVertexUvs[ 0 ];

		var i, j, p;
		var u, v;

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				u = j / slices;

				p = func( u, v );
				verts.push( p );

			}

		}

		var a, b, c, d;
		var uva, uvb, uvc, uvd;

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;

				uva = new THREE.Vector2( j / slices, i / stacks );
				uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
				uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
				uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

				faces.push( new THREE.Face3( a, b, d ) );
				uvs.push( [ uva, uvb, uvd ] );

				faces.push( new THREE.Face3( b, c, d ) );
				uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

		// console.log(this);

		// magic bullet
		// var diff = this.mergeVertices();
		// console.log('removed ', diff, ' vertices by merging');

		this.computeFaceNormals();
		this.computeVertexNormals();

	};

	THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;

	// File:src/extras/geometries/WireframeGeometry.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeGeometry = function ( geometry ) {

		THREE.BufferGeometry.call( this );

		var edge = [ 0, 0 ], hash = {};

		function sortFunction( a, b ) {

			return a - b;

		}

		var keys = [ 'a', 'b', 'c' ];

		if ( geometry instanceof THREE.Geometry ) {

			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;

			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var vertex = vertices[ edges [ 2 * i + j ] ];

					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;

				}

			}

			this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

		} else if ( geometry instanceof THREE.BufferGeometry ) {

			if ( geometry.index !== null ) {

				// Indexed BufferGeometry

				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var groups = geometry.groups;
				var numEdges = 0;

				if ( groups.length === 0 ) {

					geometry.addGroup( 0, indices.length );

				}

				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );

				for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

					var group = groups[ o ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						for ( var j = 0; j < 3; j ++ ) {

							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );

							var key = edge.toString();

							if ( hash[ key ] === undefined ) {

								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;

							}

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];

						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			} else {

				// non-indexed BufferGeometry

				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numTris; i < l; i ++ ) {

					for ( var j = 0; j < 3; j ++ ) {

						var index = 18 * i + 6 * j;

						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];

						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			}

		}

	};

	THREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;

	// File:src/extras/helpers/AxisHelper.js

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.AxisHelper = function ( size ) {

		size = size || 1;

		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );

		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );

		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;

	// File:src/extras/helpers/ArrowHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	THREE.ArrowHelper = ( function () {

		var lineGeometry = new THREE.Geometry();
		lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );

		var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );

		return function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

			// dir is assumed to be normalized

			THREE.Object3D.call( this );

			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			this.position.copy( origin );
			
			this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );

			this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );

			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );

		}

	}() );

	THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;

	THREE.ArrowHelper.prototype.setDirection = ( function () {

		var axis = new THREE.Vector3();
		var radians;

		return function setDirection( dir ) {

			// dir is assumed to be normalized

			if ( dir.y > 0.99999 ) {

				this.quaternion.set( 0, 0, 0, 1 );

			} else if ( dir.y < - 0.99999 ) {

				this.quaternion.set( 1, 0, 0, 0 );

			} else {

				axis.set( dir.z, 0, - dir.x ).normalize();

				radians = Math.acos( dir.y );

				this.quaternion.setFromAxisAngle( axis, radians );

			}

		};

	}() );

	THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	THREE.ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.set( color );
		this.cone.material.color.set( color );

	};

	// File:src/extras/helpers/BoxHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.BoxHelper = function ( object ) {

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );

		if ( object !== undefined ) {

			this.update( object );

		}

	};

	THREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;

	THREE.BoxHelper.prototype.update = ( function () {

		var box = new THREE.Box3();

		return function ( object ) {

			box.setFromObject( object );

			if ( box.isEmpty() ) return;

			var min = box.min;
			var max = box.max;

			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/

			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/

			var position = this.geometry.attributes.position;
			var array = position.array;

			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

			position.needsUpdate = true;

			this.geometry.computeBoundingSphere();

		};

	} )();

	// File:src/extras/helpers/BoundingBoxHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	// a helper to show the world-axis-aligned bounding box for an object

	THREE.BoundingBoxHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0x888888;

		this.object = object;

		this.box = new THREE.Box3();

		THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

	};

	THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;

	THREE.BoundingBoxHelper.prototype.update = function () {

		this.box.setFromObject( this.object );

		this.box.size( this.scale );

		this.box.center( this.position );

	};

	// File:src/extras/helpers/CameraHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	THREE.CameraHelper = function ( camera ) {

		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

		var pointMap = {};

		// colors

		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;

		// near

		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );

		// far

		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );

		// sides

		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );

		// cone

		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );

		// up

		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );

		// target

		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );

		// cross

		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );

		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );

		function addLine( a, b, hex ) {

			addPoint( a, hex );
			addPoint( b, hex );

		}

		function addPoint( id, hex ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.colors.push( new THREE.Color( hex ) );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( geometry.vertices.length - 1 );

		}

		THREE.LineSegments.call( this, geometry, material );

		this.camera = camera;
		this.camera.updateProjectionMatrix();

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	};

	THREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;

	THREE.CameraHelper.prototype.update = function () {

		var geometry, pointMap;

		var vector = new THREE.Vector3();
		var camera = new THREE.Camera();

		function setPoint( point, x, y, z ) {

			vector.set( x, y, z ).unproject( camera );

			var points = pointMap[ point ];

			if ( points !== undefined ) {

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					geometry.vertices[ points[ i ] ].copy( vector );

				}

			}

		}

		return function () {

			geometry = this.geometry;
			pointMap = this.pointMap;

			var w = 1, h = 1;

			// we need just camera projection matrix
			// world matrix must be identity

			camera.projectionMatrix.copy( this.camera.projectionMatrix );

			// center / target

			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );

			// near

			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );

			// far

			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );

			// up

			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );

			// cross

			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );

			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );

			geometry.verticesNeedUpdate = true;

		};

	}();

	// File:src/extras/helpers/DirectionalLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	THREE.DirectionalLightHelper = function ( light, size ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		size = size || 1;

		var geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3( - size,   size, 0 ),
			new THREE.Vector3(   size,   size, 0 ),
			new THREE.Vector3(   size, - size, 0 ),
			new THREE.Vector3( - size, - size, 0 ),
			new THREE.Vector3( - size,   size, 0 )
		);

		var material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.lightPlane = new THREE.Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3(),
			new THREE.Vector3()
		);

		material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.targetLine = new THREE.Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	};

	THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;

	THREE.DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	THREE.DirectionalLightHelper.prototype.update = function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var v3 = new THREE.Vector3();

		return function () {

			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );

			this.lightPlane.lookAt( v3 );
			this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			this.targetLine.geometry.vertices[ 1 ].copy( v3 );
			this.targetLine.geometry.verticesNeedUpdate = true;
			this.targetLine.material.color.copy( this.lightPlane.material.color );

		};

	}();

	// File:src/extras/helpers/EdgesHelper.js

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @param object THREE.Mesh whose geometry will be used
	 * @param hex line color
	 * @param thresholdAngle the minimum angle (in degrees),
	 * between the face normals of adjacent faces,
	 * that is required to render an edge. A value of 10 means
	 * an edge is only rendered if the angle is at least 10 degrees.
	 */

	THREE.EdgesHelper = function ( object, hex, thresholdAngle ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;

	// File:src/extras/helpers/FaceNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	};

	THREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;

	THREE.FaceNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var normal = face.normal;

				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );

				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

			position.needsUpdate = true;

			return this;

		}

	}() );

	// File:src/extras/helpers/GridHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.GridHelper = function ( size, step ) {

		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

		this.color1 = new THREE.Color( 0x444444 );
		this.color2 = new THREE.Color( 0x888888 );

		for ( var i = - size; i <= size; i += step ) {

			geometry.vertices.push(
				new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
				new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
			);

			var color = i === 0 ? this.color1 : this.color2;

			geometry.colors.push( color, color, color, color );

		}

		THREE.LineSegments.call( this, geometry, material );

	};

	THREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;

	THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {

		this.color1.set( colorCenterLine );
		this.color2.set( colorGrid );

		this.geometry.colorsNeedUpdate = true;

	};

	// File:src/extras/helpers/HemisphereLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.HemisphereLightHelper = function ( light, sphereSize ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.colors = [ new THREE.Color(), new THREE.Color() ];

		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );

		for ( var i = 0, il = 8; i < il; i ++ ) {

			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

		}

		var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

		this.lightSphere = new THREE.Mesh( geometry, material );
		this.add( this.lightSphere );

		this.update();

	};

	THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;

	THREE.HemisphereLightHelper.prototype.dispose = function () {

		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();

	};

	THREE.HemisphereLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();

		return function () {

			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;

		}

	}();

	// File:src/extras/helpers/PointLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.PointLightHelper = function ( light, sphereSize ) {

		this.light = light;
		this.light.updateMatrixWorld();

		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		THREE.Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	};

	THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;

	THREE.PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	THREE.PointLightHelper.prototype.update = function () {

		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	// File:src/extras/helpers/SkeletonHelper.js

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */

	THREE.SkeletonHelper = function ( object ) {

		this.bones = this.getBoneList( object );

		var geometry = new THREE.Geometry();

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				geometry.vertices.push( new THREE.Vector3() );
				geometry.vertices.push( new THREE.Vector3() );
				geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
				geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

			}

		}

		geometry.dynamic = true;

		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		THREE.LineSegments.call( this, geometry, material );

		this.root = object;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();

	};


	THREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;

	THREE.SkeletonHelper.prototype.getBoneList = function( object ) {

		var boneList = [];

		if ( object instanceof THREE.Bone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

		}

		return boneList;

	};

	THREE.SkeletonHelper.prototype.update = function () {

		var geometry = this.geometry;

		var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );

		var boneMatrix = new THREE.Matrix4();

		var j = 0;

		for ( var i = 0; i < this.bones.length; i ++ ) {

			var bone = this.bones[ i ];

			if ( bone.parent instanceof THREE.Bone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

				j += 2;

			}

		}

		geometry.verticesNeedUpdate = true;

		geometry.computeBoundingSphere();

	};

	// File:src/extras/helpers/SpotLightHelper.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.SpotLightHelper = function ( light ) {

		THREE.Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );

		geometry.translate( 0, - 0.5, 0 );
		geometry.rotateX( - Math.PI / 2 );

		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );

		this.cone = new THREE.Mesh( geometry, material );
		this.add( this.cone );

		this.update();

	};

	THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;

	THREE.SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	THREE.SpotLightHelper.prototype.update = function () {

		var vector = new THREE.Vector3();
		var vector2 = new THREE.Vector3();

		return function () {

			var coneLength = this.light.distance ? this.light.distance : 10000;
			var coneWidth = coneLength * Math.tan( this.light.angle );

			this.cone.scale.set( coneWidth, coneWidth, coneLength );

			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );

			this.cone.lookAt( vector2.sub( vector ) );

			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		};

	}();

	// File:src/extras/helpers/VertexNormalsHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry instanceof THREE.Geometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry instanceof THREE.BufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count

		}

		//

		var geometry = new THREE.BufferGeometry();

		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

		geometry.addAttribute( 'position', positions );

		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	};

	THREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;

	THREE.VertexNormalsHelper.prototype.update = ( function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();

		return function update() {

			var keys = [ 'a', 'b', 'c' ];

			this.object.updateMatrixWorld( true );

			normalMatrix.getNormalMatrix( this.object.matrixWorld );

			var matrixWorld = this.object.matrixWorld;

			var position = this.geometry.attributes.position;

			//

			var objGeometry = this.object.geometry;

			if ( objGeometry instanceof THREE.Geometry ) {

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						var vertex = vertices[ face[ keys[ j ] ] ];

						var normal = face.vertexNormals[ j ];

						v1.copy( vertex ).applyMatrix4( matrixWorld );

						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

			} else if ( objGeometry instanceof THREE.BufferGeometry ) {

				var objPos = objGeometry.attributes.position;

				var objNorm = objGeometry.attributes.normal;

				var idx = 0;

				// for simplicity, ignore index and drawcalls, and render every normal

				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

			position.needsUpdate = true;

			return this;

		}

	}() );

	// File:src/extras/helpers/WireframeHelper.js

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	THREE.WireframeHelper = function ( object, hex ) {

		var color = ( hex !== undefined ) ? hex : 0xffffff;

		THREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	};

	THREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;

	// File:src/extras/objects/ImmediateRenderObject.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.ImmediateRenderObject = function ( material ) {

		THREE.Object3D.call( this );

		this.material = material;
		this.render = function ( renderCallback ) {};

	};

	THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;

	// File:src/extras/objects/MorphBlendMesh.js

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.MorphBlendMesh = function( geometry, material ) {

		THREE.Mesh.call( this, geometry, material );

		this.animationsMap = {};
		this.animationsList = [];

		// prepare default animation
		// (all frames played together in 1 second)

		var numFrames = this.geometry.morphTargets.length;

		var name = "__default";

		var startFrame = 0;
		var endFrame = numFrames - 1;

		var fps = numFrames / 1;

		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );

	};

	THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;

	THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

		var animation = {

			start: start,
			end: end,

			length: end - start + 1,

			fps: fps,
			duration: ( end - start ) / fps,

			lastFrame: 0,
			currentFrame: 0,

			active: false,

			time: 0,
			direction: 1,
			weight: 1,

			directionBackwards: false,
			mirroredLoop: false

		};

		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );

	};

	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

		var pattern = /([a-z]+)_?(\d+)/i;

		var firstAnimation, frameRanges = {};

		var geometry = this.geometry;

		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );

			if ( chunks && chunks.length > 1 ) {

				var name = chunks[ 1 ];

				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

				var range = frameRanges[ name ];

				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;

				if ( ! firstAnimation ) firstAnimation = name;

			}

		}

		for ( var name in frameRanges ) {

			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );

		}

		this.firstAnimation = firstAnimation;

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = 1;
			animation.directionBackwards = false;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.direction = - 1;
			animation.directionBackwards = true;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.weight = weight;

		}

	};

	THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = time;

		}

	};

	THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

		var time = 0;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			time = animation.time;

		}

		return time;

	};

	THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

		var duration = - 1;

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			duration = animation.duration;

		}

		return duration;

	};

	THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.time = 0;
			animation.active = true;

		} else {

			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

		}

	};

	THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

		var animation = this.animationsMap[ name ];

		if ( animation ) {

			animation.active = false;

		}

	};

	THREE.MorphBlendMesh.prototype.update = function ( delta ) {

		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

			var animation = this.animationsList[ i ];

			if ( ! animation.active ) continue;

			var frameTime = animation.duration / animation.length;

			animation.time += animation.direction * delta;

			if ( animation.mirroredLoop ) {

				if ( animation.time > animation.duration || animation.time < 0 ) {

					animation.direction *= - 1;

					if ( animation.time > animation.duration ) {

						animation.time = animation.duration;
						animation.directionBackwards = true;

					}

					if ( animation.time < 0 ) {

						animation.time = 0;
						animation.directionBackwards = false;

					}

				}

			} else {

				animation.time = animation.time % animation.duration;

				if ( animation.time < 0 ) animation.time += animation.duration;

			}

			var keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;

			if ( keyframe !== animation.currentFrame ) {

				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

				this.morphTargetInfluences[ keyframe ] = 0;

				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;

			}

			var mix = ( animation.time % frameTime ) / frameTime;

			if ( animation.directionBackwards ) mix = 1 - mix;

			if ( animation.currentFrame !== animation.lastFrame ) {

				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

			} else {

				this.morphTargetInfluences[ animation.currentFrame ] = weight;

			}

		}

	};


	// Export the THREE object for **Node.js**, with
	// backwards-compatibility for the old `require()` API. If we're in
	// the browser, add `_` as a global object via a string identifier,
	// for Closure Compiler "advanced" mode.
	if (true) {
	  if (typeof module !== 'undefined' && module.exports) {
	    exports = module.exports = THREE;
	  }
	  exports.THREE = THREE;
	} else {
	  this['THREE'] = THREE;
	}


/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * @author sole / http://soledadpenades.com
	 * @author mrdoob / http://mrdoob.com
	 * @author Robert Eisele / http://www.xarg.org
	 * @author Philippe / http://philippe.elsass.me
	 * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html
	 * @author Paul Lewis / http://www.aerotwist.com/
	 * @author lechecacharro
	 * @author Josh Faul / http://jocafa.com/
	 * @author egraether / http://egraether.com/
	 */

	if ( Date.now === undefined ) {

	  Date.now = function () {

	    return new Date().valueOf();

	  }

	}

	var TWEEN = TWEEN || ( function () {

	  var _tweens = [];

	  return {

	    REVISION: '8',

	    getAll: function () {

	      return _tweens;

	    },

	    removeAll: function () {

	      _tweens = [];

	    },

	    add: function ( tween ) {

	      _tweens.push( tween );

	    },

	    remove: function ( tween ) {

	      var i = _tweens.indexOf( tween );

	      if ( i !== -1 ) {

	        _tweens.splice( i, 1 );

	      }

	    },

	    update: function ( time ) {

	      if ( _tweens.length === 0 ) return false;

	      var i = 0, numTweens = _tweens.length;

	      time = time !== undefined ? time : Date.now();

	      while ( i < numTweens ) {

	        if ( _tweens[ i ].update( time ) ) {

	          i ++;

	        } else {

	          _tweens.splice( i, 1 );

	          numTweens --;

	        }

	      }

	      return true;

	    }

	  };

	} )();

	TWEEN.Tween = function ( object ) {

	  var _object = object;
	  var _valuesStart = {};
	  var _valuesEnd = {};
	  var _duration = 1000;
	  var _delayTime = 0;
	  var _startTime = null;
	  var _easingFunction = TWEEN.Easing.Linear.None;
	  var _interpolationFunction = TWEEN.Interpolation.Linear;
	  var _chainedTweens = [];
	  var _onStartCallback = null;
	  var _onStartCallbackFired = false;
	  var _onUpdateCallback = null;
	  var _onCompleteCallback = null;

	  this.to = function ( properties, duration ) {

	    if ( duration !== undefined ) {

	      _duration = duration;

	    }

	    _valuesEnd = properties;

	    return this;

	  };

	  this.start = function ( time ) {

	    TWEEN.add( this );

	    _onStartCallbackFired = false;

	    _startTime = time !== undefined ? time : Date.now();
	    _startTime += _delayTime;

	    for ( var property in _valuesEnd ) {

	      // This prevents the interpolation of null values or of non-existing properties
	      if( _object[ property ] === null || !(property in _object) ) {

	        continue;

	      }

	      // check if an Array was provided as property value
	      if ( _valuesEnd[ property ] instanceof Array ) {

	        if ( _valuesEnd[ property ].length === 0 ) {

	          continue;

	        }

	        // create a local copy of the Array with the start value at the front
	        _valuesEnd[ property ] = [ _object[ property ] ].concat( _valuesEnd[ property ] );

	      }

	      _valuesStart[ property ] = _object[ property ];

	    }

	    return this;

	  };

	  this.stop = function () {

	    TWEEN.remove( this );
	    return this;

	  };

	  this.delay = function ( amount ) {

	    _delayTime = amount;
	    return this;

	  };

	  this.easing = function ( easing ) {

	    _easingFunction = easing;
	    return this;

	  };

	  this.interpolation = function ( interpolation ) {

	    _interpolationFunction = interpolation;
	    return this;

	  };

	  this.chain = function () {

	    _chainedTweens = arguments;
	    return this;

	  };

	  this.onStart = function ( callback ) {

	    _onStartCallback = callback;
	    return this;

	  };

	  this.onUpdate = function ( callback ) {

	    _onUpdateCallback = callback;
	    return this;

	  };

	  this.onComplete = function ( callback ) {

	    _onCompleteCallback = callback;
	    return this;

	  };

	  this.update = function ( time ) {

	    if ( time < _startTime ) {

	      return true;

	    }

	    if ( _onStartCallbackFired === false ) {

	      if ( _onStartCallback !== null ) {

	        _onStartCallback.call( _object );

	      }

	      _onStartCallbackFired = true;

	    }

	    var elapsed = ( time - _startTime ) / _duration;
	    elapsed = elapsed > 1 ? 1 : elapsed;

	    var value = _easingFunction( elapsed );

	    for ( var property in _valuesStart ) {

	      var start = _valuesStart[ property ];
	      var end = _valuesEnd[ property ];

	      if ( end instanceof Array ) {

	        _object[ property ] = _interpolationFunction( end, value );

	      } else {

	        _object[ property ] = start + ( end - start ) * value;

	      }

	    }

	    if ( _onUpdateCallback !== null ) {

	      _onUpdateCallback.call( _object, value );

	    }

	    if ( elapsed == 1 ) {

	      if ( _onCompleteCallback !== null ) {

	        _onCompleteCallback.call( _object );

	      }

	      for ( var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i ++ ) {

	        _chainedTweens[ i ].start( time );

	      }

	      return false;

	    }

	    return true;

	  };

	};

	TWEEN.Easing = {

	  Linear: {

	    None: function ( k ) {

	      return k;

	    }

	  },

	  Quadratic: {

	    In: function ( k ) {

	      return k * k;

	    },

	    Out: function ( k ) {

	      return k * ( 2 - k );

	    },

	    InOut: function ( k ) {

	      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k;
	      return - 0.5 * ( --k * ( k - 2 ) - 1 );

	    }

	  },

	  Cubic: {

	    In: function ( k ) {

	      return k * k * k;

	    },

	    Out: function ( k ) {

	      return --k * k * k + 1;

	    },

	    InOut: function ( k ) {

	      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k;
	      return 0.5 * ( ( k -= 2 ) * k * k + 2 );

	    }

	  },

	  Quartic: {

	    In: function ( k ) {

	      return k * k * k * k;

	    },

	    Out: function ( k ) {

	      return 1 - ( --k * k * k * k );

	    },

	    InOut: function ( k ) {

	      if ( ( k *= 2 ) < 1) return 0.5 * k * k * k * k;
	      return - 0.5 * ( ( k -= 2 ) * k * k * k - 2 );

	    }

	  },

	  Quintic: {

	    In: function ( k ) {

	      return k * k * k * k * k;

	    },

	    Out: function ( k ) {

	      return --k * k * k * k * k + 1;

	    },

	    InOut: function ( k ) {

	      if ( ( k *= 2 ) < 1 ) return 0.5 * k * k * k * k * k;
	      return 0.5 * ( ( k -= 2 ) * k * k * k * k + 2 );

	    }

	  },

	  Sinusoidal: {

	    In: function ( k ) {

	      return 1 - Math.cos( k * Math.PI / 2 );

	    },

	    Out: function ( k ) {

	      return Math.sin( k * Math.PI / 2 );

	    },

	    InOut: function ( k ) {

	      return 0.5 * ( 1 - Math.cos( Math.PI * k ) );

	    }

	  },

	  Exponential: {

	    In: function ( k ) {

	      return k === 0 ? 0 : Math.pow( 1024, k - 1 );

	    },

	    Out: function ( k ) {

	      return k === 1 ? 1 : 1 - Math.pow( 2, - 10 * k );

	    },

	    InOut: function ( k ) {

	      if ( k === 0 ) return 0;
	      if ( k === 1 ) return 1;
	      if ( ( k *= 2 ) < 1 ) return 0.5 * Math.pow( 1024, k - 1 );
	      return 0.5 * ( - Math.pow( 2, - 10 * ( k - 1 ) ) + 2 );

	    }

	  },

	  Circular: {

	    In: function ( k ) {

	      return 1 - Math.sqrt( 1 - k * k );

	    },

	    Out: function ( k ) {

	      return Math.sqrt( 1 - ( --k * k ) );

	    },

	    InOut: function ( k ) {

	      if ( ( k *= 2 ) < 1) return - 0.5 * ( Math.sqrt( 1 - k * k) - 1);
	      return 0.5 * ( Math.sqrt( 1 - ( k -= 2) * k) + 1);

	    }

	  },

	  Elastic: {

	    In: function ( k ) {

	      var s, a = 0.1, p = 0.4;
	      if ( k === 0 ) return 0;
	      if ( k === 1 ) return 1;
	      if ( !a || a < 1 ) { a = 1; s = p / 4; }
	      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
	      return - ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );

	    },

	    Out: function ( k ) {

	      var s, a = 0.1, p = 0.4;
	      if ( k === 0 ) return 0;
	      if ( k === 1 ) return 1;
	      if ( !a || a < 1 ) { a = 1; s = p / 4; }
	      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
	      return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );

	    },

	    InOut: function ( k ) {

	      var s, a = 0.1, p = 0.4;
	      if ( k === 0 ) return 0;
	      if ( k === 1 ) return 1;
	      if ( !a || a < 1 ) { a = 1; s = p / 4; }
	      else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
	      if ( ( k *= 2 ) < 1 ) return - 0.5 * ( a * Math.pow( 2, 10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) );
	      return a * Math.pow( 2, -10 * ( k -= 1 ) ) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) * 0.5 + 1;

	    }

	  },

	  Back: {

	    In: function ( k ) {

	      var s = 1.70158;
	      return k * k * ( ( s + 1 ) * k - s );

	    },

	    Out: function ( k ) {

	      var s = 1.70158;
	      return --k * k * ( ( s + 1 ) * k + s ) + 1;

	    },

	    InOut: function ( k ) {

	      var s = 1.70158 * 1.525;
	      if ( ( k *= 2 ) < 1 ) return 0.5 * ( k * k * ( ( s + 1 ) * k - s ) );
	      return 0.5 * ( ( k -= 2 ) * k * ( ( s + 1 ) * k + s ) + 2 );

	    }

	  },

	  Bounce: {

	    In: function ( k ) {

	      return 1 - TWEEN.Easing.Bounce.Out( 1 - k );

	    },

	    Out: function ( k ) {

	      if ( k < ( 1 / 2.75 ) ) {

	        return 7.5625 * k * k;

	      } else if ( k < ( 2 / 2.75 ) ) {

	        return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;

	      } else if ( k < ( 2.5 / 2.75 ) ) {

	        return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;

	      } else {

	        return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;

	      }

	    },

	    InOut: function ( k ) {

	      if ( k < 0.5 ) return TWEEN.Easing.Bounce.In( k * 2 ) * 0.5;
	      return TWEEN.Easing.Bounce.Out( k * 2 - 1 ) * 0.5 + 0.5;

	    }

	  }

	};

	TWEEN.Interpolation = {

	  Linear: function ( v, k ) {

	    var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.Linear;

	    if ( k < 0 ) return fn( v[ 0 ], v[ 1 ], f );
	    if ( k > 1 ) return fn( v[ m ], v[ m - 1 ], m - f );

	    return fn( v[ i ], v[ i + 1 > m ? m : i + 1 ], f - i );

	  },

	  Bezier: function ( v, k ) {

	    var b = 0, n = v.length - 1, pw = Math.pow, bn = TWEEN.Interpolation.Utils.Bernstein, i;

	    for ( i = 0; i <= n; i++ ) {
	      b += pw( 1 - k, n - i ) * pw( k, i ) * v[ i ] * bn( n, i );
	    }

	    return b;

	  },

	  CatmullRom: function ( v, k ) {

	    var m = v.length - 1, f = m * k, i = Math.floor( f ), fn = TWEEN.Interpolation.Utils.CatmullRom;

	    if ( v[ 0 ] === v[ m ] ) {

	      if ( k < 0 ) i = Math.floor( f = m * ( 1 + k ) );

	      return fn( v[ ( i - 1 + m ) % m ], v[ i ], v[ ( i + 1 ) % m ], v[ ( i + 2 ) % m ], f - i );

	    } else {

	      if ( k < 0 ) return v[ 0 ] - ( fn( v[ 0 ], v[ 0 ], v[ 1 ], v[ 1 ], -f ) - v[ 0 ] );
	      if ( k > 1 ) return v[ m ] - ( fn( v[ m ], v[ m ], v[ m - 1 ], v[ m - 1 ], f - m ) - v[ m ] );

	      return fn( v[ i ? i - 1 : 0 ], v[ i ], v[ m < i + 1 ? m : i + 1 ], v[ m < i + 2 ? m : i + 2 ], f - i );

	    }

	  },

	  Utils: {

	    Linear: function ( p0, p1, t ) {

	      return ( p1 - p0 ) * t + p0;

	    },

	    Bernstein: function ( n , i ) {

	      var fc = TWEEN.Interpolation.Utils.Factorial;
	      return fc( n ) / fc( i ) / fc( n - i );

	    },

	    Factorial: ( function () {

	      var a = [ 1 ];

	      return function ( n ) {

	        var s = 1, i;
	        if ( a[ n ] ) return a[ n ];
	        for ( i = n; i > 1; i-- ) s *= i;
	        return a[ n ] = s;

	      };

	    } )(),

	    CatmullRom: function ( p0, p1, p2, p3, t ) {

	      var v0 = ( p2 - p0 ) * 0.5, v1 = ( p3 - p1 ) * 0.5, t2 = t * t, t3 = t * t2;
	      return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	    }

	  }

	};

	module.exports = TWEEN;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.init = init;
	exports.animate = animate;

	var _three = __webpack_require__(163);

	var _three2 = _interopRequireDefault(_three);

	var _tween = __webpack_require__(164);

	var _tween2 = _interopRequireDefault(_tween);

	var _audioData = __webpack_require__(166);

	var _audioData2 = _interopRequireDefault(_audioData);

	var _fft2 = __webpack_require__(168);

	var _fft3 = _interopRequireDefault(_fft2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	window.THREE = _three2.default;

	__webpack_require__(169);
	__webpack_require__(170);
	__webpack_require__(171);
	__webpack_require__(172);
	__webpack_require__(173);
	__webpack_require__(174);
	__webpack_require__(175);
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(179);
	__webpack_require__(180);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);
	__webpack_require__(184);
	__webpack_require__(185);
	__webpack_require__(186);

	var PARTICLE_COUNT = 250;

	var screenX = window.innerWidth;
	var screenY = window.innerHeight;

	var scene;
	var camera;
	var renderer;
	var plane;
	var particleSystem;
	var particleSystem1;
	var renderer;
	var mesh;
	var mesh1;
	var composer;
	var hblur;
	var vblur;
	var targetRotationX = 0;
	var targetRotationY = 0;
	var mouseX = 0;
	var mouseY = 0;
	var stereo;
	var tweening = false;
	var tween;
	var controls;
	var videoTexture;
	var spotLight;
	var light;

	var _fft = (0, _fft3.default)();

	var analyser = _fft.analyser;
	var audio = _fft.audio;

	// AUDIO STUFF

	function getBeatsByTime() {
	  var beats = {};
	  _audioData2.default.beats.forEach(function (b) {
	    beats[b.start.toFixed(1)] = { duration: b.duration, end: b.start + b.duration, confidence: b.confidence };
	  });
	  return beats;
	}

	function getSegmentsByTime() {
	  var segments = {};
	  _audioData2.default.segments.forEach(function (b) {
	    segments[b.start.toFixed(1)] = {
	      duration: b.duration,
	      end: b.start + b.duration,
	      confidence: b.confidence,
	      loudnessStart: b.loudness_start,
	      loudnessMax: b.loudness_max,
	      loudnessMaxTime: b.loudness_max_time
	    };
	  });
	  return segments;
	}

	var beatsByTime = getBeatsByTime();
	var segmentsByTime = getSegmentsByTime();

	function init() {

	  // scene
	  scene = new _three2.default.Scene();

	  scene.fog = new _three2.default.Fog(0x121212, 0.9, 1600);
	  scene.add(new _three2.default.AmbientLight(0xffffff));

	  // camera
	  camera = new _three2.default.PerspectiveCamera(70, screenX / screenY, 1, 2000);

	  camera.position.z = 500;
	  camera.lookAt(scene.position);

	  // main object
	  var geometry = new _three2.default.IcosahedronGeometry(320);
	  //const geometry = new THREE.TorusKnotGeometry(320, 40, 120, 4)
	  var material = new _three2.default.MeshPhongMaterial({
	    color: 0xffffff,
	    wireframe: true
	  });
	  mesh = new _three2.default.Mesh(geometry, material);

	  scene.add(mesh);

	  //renderer
	  renderer = new _three2.default.WebGLRenderer({
	    antialias: true,
	    alpha: true
	  });

	  renderer.setPixelRatio(window.devicePixelRatio);
	  renderer.setSize(screenX, screenY);
	  //renderer.setClearColor(0x121212)

	  // append canvas
	  document.getElementById('visualization').appendChild(renderer.domElement);

	  // play audio
	  audio.play();
	}

	function tweenSegment(segment) {
	  tweening = true;

	  var scale = segment.loudnessMax * -1 * 0.1;

	  var tween = new _tween2.default.Tween(mesh.scale).to({ x: scale, y: scale, z: scale }, (segment.duration - segment.loudnessMaxTime) * 100).easing(_tween2.default.Easing.Quadratic.In).onComplete(function () {
	    new _tween2.default.Tween(mesh.scale).to({ x: 1, y: 1, z: 1 }, segment.loudnessMaxTime).easing(_tween2.default.Easing.Quadratic.Out).onComplete(function () {
	      tweening = false;
	    }).start();
	  }).start();
	}

	audio.currentTime = 200;
	function animate(time) {
	  var segment = segmentsByTime[audio.currentTime.toFixed(1)];

	  if (segment && segment.duration > 0.125 && !tweening) {
	    tweenSegment(segment);
	  }

	  mesh.rotation.x += 0.01;
	  requestAnimationFrame(animate);
	  renderer.render(scene, camera);

	  _tween2.default.update();
	}

	//EVENTS

	function onWindowResize() {
	  camera.aspect = window.innerWidth / window.innerHeight;
	  camera.updateProjectionMatrix();
	  renderer.setSize(window.innerWidth, window.innerHeight);
	}

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _trackData = __webpack_require__(167);

	var _trackData2 = _interopRequireDefault(_trackData);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var audioData = {
	  beats: _trackData2.default.beats,
	  bars: _trackData2.default.bars,
	  segments: _trackData2.default.segments,
	  info: {
	    bpm: _trackData2.default.track.tempo,
	    key: _trackData2.default.track.key,
	    fadeOutStart: _trackData2.default.track.start_of_fade_out,
	    loudness: _trackData2.default.track.loudness
	  }
	};

	module.exports = audioData;

/***/ },
/* 167 */
/***/ function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});var audioData={"meta":{"analyzer_version":"3.2.2","platform":"Linux","detailed_status":"OK","filename":"filename.mp3","artist":"","album":"","title":"","genre":"","bitrate":128,"sample_rate":44100,"seconds":314,"status_code":0,"timestamp":1456788978,"analysis_time":5.67495},"track":{"num_samples":6929683,"duration":314.27134,"sample_md5":"1d223de11935a8128cc5c31b74333e4d","decoder":"mpg123","decoder_version":"mpg123 1.16.0","offset_seconds":0,"window_seconds":0,"analysis_sample_rate":22050,"analysis_channels":1,"end_of_fade_in":0.00000,"start_of_fade_out":310.07927,"loudness":-11.120,"tempo":105.992,"tempo_confidence":0.855,"time_signature":4,"time_signature_confidence":1.000,"key":5,"key_confidence":0.399,"mode":0,"mode_confidence":0.457,"codestring":"","code_version":3.15,"echoprintstring":"","echoprint_version":4.12,"synchstring":"eJx9VwkS4yAM-wpPwNz8_2MrySah7e7OpCkBYwsfAkrJPaeaWp2pJzV3S5a3fmumjW6M2U61pTrYruppkN3qWec99fbGPDJHINqb09nuR_iSfz8fneu059_k_dmn4frX37Tdwusfwl_a1vkcn6j2D-b5IzB_FvIfPF9o539X_S-cvzJ_fY8fJBe8VlO1VGsqORVFvJRUpJONrqGRymIn-yGcOYR3LadRKUnhIuEt-aEhS6UeGZMJV6hRKtSbn665XjCWpq9L5zqaXbhJpqohbA4yxPYrzEaXZlPDhV2tv_1p0raE2Y7wuITnwayJWC-H3AmZEw0ulfPknoAmwcclAU1ahyVraYzUF2VspG2pNz670GE7qyyLHNhRo4a-jr7KKb1H4a60ZzS7Pr0Ndcu7rL9S7GohCZtW8cuudaAJWsDDzpKWW6S2Xbn0baFgPpb9B_ls8ZtSKOXUKEOUz9IuWDO6RkzPlypzfJbDxFF7sJTA72vZxHx97gBgr6bLRVQq6UUHszkQMVobaVX5Cb4fNU0EJCmPJmZTN53REbLpnqmMXECBC9vkLK61EhLIbiik0NaU0aNO8Cxq2BRnTObopHHoWkABN0FywTssAK1iMAEDL_Om8QOCzZhpoGi02QmtaiBPTGKsI1UcQBUZLMonSLLRSMhFTxuaUjSEdSyJTa2uq2ZFDjFRmdpOJ8EpOYussCETrpAwJBmfFghhengbyCsBtMIHYnAudc7AgDbdA6kuDIWdipYmllg-q2u_jNHEAM5GU66cp5qrLKuU6X3NXvOQHwmRfQ8bDtZBVakVBwr0YuEu78Sol3UPLlv9MJHziGh01cAyvdCtBuom4kGOdbcnD40sClSuYIKJ3pB7mIICrOJj06aEcFUnASy_iV0x093rDDlH0vIbk202ZjEyvytamA1TcPrKARsolMZZQotpBf9wkV1CypEBCzTmxSW7poxqqqqmnUVZm5X_nXbRuxrVjM6loA19oDeobyJWlIALADfb5iTUiMzXzjrphEiHNlYKCdCkA-twURLoI40VAwIzhSca8AFaqzCSGFXBTQFgZjuLd66AB5YTjqpDESmda1TeYMCYYU732pi5Im1FVFpVVQxFJxfAKzIgUSVNO_sz-mlOCcAFK72a8hYy2x1X6FpRg9wGIS6tqQvB5mKa1mwKq0UqWXHTnOue5qGPPA4PGFMR7h0KPMKKkaWHWl2ZYQVTRzoaMyWQweljM4YkMIVzkA8m4TT1M3EGsQaZzql0H-SZTFZcTuwQIrWaZo0itw14d6ya-6pnJ24kr96CMGOjrWfDHioUHTTLXXdTpbevM4emYAVLVFX3OQdogzcFJEp4xBYd279yp7Sjp5wzh4p62OlxDjIm4n1iiA2_a1PdUZaOcx12pryORMunt-CKV0ZKhgc-M6eLlHShQkJ10UnVTlCdWnTo6f3kqzcmswVIikjMdLyrM3aL7v5c8oYfODIDQ-oT4fpJsYriuQ1Or7847CD3hgB0X6MfmLLSmRsxHx1YBBJppK0Bqd85tSoFo_CQ1PpXRbAMD5rqid6ZtE3O7TpudR3E2gpWry1KrCtO7HGyzmLaFXBjCxhi8CrNmW1tAQ_Uzg25yNkE1OVXJeNSwTlTe-6QlTxi4s0md3blZtftqY2IWxV_hYZC4VVCrQcz1txPGKugd7qt0dGlHFOmIJk6s-i7JIkKNlJGW8DQWZRf9PjQrqSmb2aFWWWMCqQdc6bGHSlF5tBE7sdF7Dq0s44aWwJsTQo5AMuBZ_qJSRZZ3Hyz9KmMDu4yDIWkAb08VTaB4FXYRZ5I-2Sfa4divraOA2PphGbSStQYmWI4IDBlOnfS2aNmcC6e2va2eHDRmGdpV10vCx_Xdl0DyrlF5OsWMT-G4u4xXyapdtjj6clBUx89zyVnXwrX1bnOLDu27tvLbXSfu8o962K2GNo_1g9BfVx1vjSvjyvQs8CQfEbnuRC2yzn73IRWsOJzMQr_nEvmNxXfjuqvA1_PrLcIP6Cud9bjlu_pz7XsXEpfsS9nfg49gO8QvBbnJXO75Wv6-oxFeQ-N7w15HLfU41K7nOkyOW6edi68eP4A2jQutA==","synch_version":1.00,"rhythmstring":"","rhythm_version":1.00},"bars":[{"start":1.26395,"duration":2.29768,"confidence":0.786},{"start":3.56163,"duration":2.26305,"confidence":0.432},{"start":5.82468,"duration":2.26366,"confidence":0.560},{"start":8.08833,"duration":2.27386,"confidence":0.335},{"start":10.36219,"duration":2.26366,"confidence":0.734},{"start":12.62586,"duration":2.25446,"confidence":0.193},{"start":14.88032,"duration":2.26185,"confidence":0.423},{"start":17.14217,"duration":2.26648,"confidence":0.714},{"start":19.40866,"duration":2.26569,"confidence":0.647},{"start":21.67434,"duration":2.26389,"confidence":0.143},{"start":23.93823,"duration":2.26266,"confidence":0.756},{"start":26.20090,"duration":2.25602,"confidence":0.335},{"start":28.45691,"duration":2.26020,"confidence":0.540},{"start":30.71711,"duration":2.26572,"confidence":0.581},{"start":32.98283,"duration":2.26325,"confidence":0.706},{"start":35.24608,"duration":2.26435,"confidence":0.791},{"start":37.51043,"duration":2.26480,"confidence":0.334},{"start":39.77523,"duration":2.26354,"confidence":0.779},{"start":42.03877,"duration":2.26372,"confidence":0.628},{"start":44.30249,"duration":2.26370,"confidence":0.660},{"start":46.56619,"duration":2.26509,"confidence":0.449},{"start":48.83128,"duration":2.26376,"confidence":0.147},{"start":51.09505,"duration":2.26489,"confidence":0.367},{"start":53.35994,"duration":2.26406,"confidence":0.502},{"start":55.62400,"duration":2.26359,"confidence":0.616},{"start":57.88759,"duration":2.26517,"confidence":0.675},{"start":60.15276,"duration":2.26459,"confidence":0.487},{"start":62.41735,"duration":2.26855,"confidence":0.237},{"start":64.68589,"duration":2.26800,"confidence":0.576},{"start":66.95389,"duration":2.26184,"confidence":0.183},{"start":69.21574,"duration":2.26292,"confidence":0.097},{"start":71.47865,"duration":2.25539,"confidence":0.353},{"start":73.73404,"duration":2.25728,"confidence":0.148},{"start":75.99132,"duration":2.26286,"confidence":0.311},{"start":78.25418,"duration":2.26931,"confidence":0.181},{"start":80.52349,"duration":2.27324,"confidence":0.495},{"start":82.79673,"duration":1.71828,"confidence":0.371},{"start":84.51502,"duration":2.34765,"confidence":0.713},{"start":86.86267,"duration":2.30875,"confidence":0.458},{"start":89.17142,"duration":2.26023,"confidence":0.691},{"start":91.43165,"duration":2.26331,"confidence":0.664},{"start":93.69496,"duration":2.26420,"confidence":0.547},{"start":95.95916,"duration":2.26129,"confidence":0.196},{"start":98.22045,"duration":2.26176,"confidence":0.364},{"start":100.48221,"duration":2.26620,"confidence":0.327},{"start":102.74841,"duration":2.26682,"confidence":0.230},{"start":105.01523,"duration":2.26705,"confidence":0.188},{"start":107.28228,"duration":2.27106,"confidence":0.338},{"start":109.55334,"duration":2.26295,"confidence":0.660},{"start":111.81629,"duration":2.26492,"confidence":0.783},{"start":114.08121,"duration":2.26383,"confidence":0.690},{"start":116.34505,"duration":2.26221,"confidence":0.775},{"start":118.60725,"duration":2.26615,"confidence":0.708},{"start":120.87340,"duration":2.26659,"confidence":0.767},{"start":123.14000,"duration":2.25995,"confidence":0.790},{"start":125.39995,"duration":2.25990,"confidence":0.211},{"start":127.65985,"duration":2.26292,"confidence":0.709},{"start":129.92277,"duration":2.26545,"confidence":0.870},{"start":132.18822,"duration":2.26695,"confidence":0.786},{"start":134.45517,"duration":2.26248,"confidence":0.714},{"start":136.71765,"duration":2.26211,"confidence":0.469},{"start":138.97977,"duration":2.26671,"confidence":0.688},{"start":141.24648,"duration":2.26563,"confidence":0.835},{"start":143.51211,"duration":2.26045,"confidence":0.916},{"start":145.77256,"duration":2.26421,"confidence":0.804},{"start":148.03677,"duration":2.26388,"confidence":0.743},{"start":150.30064,"duration":2.26071,"confidence":0.620},{"start":152.56135,"duration":2.26822,"confidence":0.863},{"start":154.82958,"duration":2.26420,"confidence":0.623},{"start":157.09378,"duration":2.26208,"confidence":0.722},{"start":159.35586,"duration":2.26297,"confidence":0.774},{"start":161.61883,"duration":2.26714,"confidence":0.272},{"start":163.88597,"duration":2.26623,"confidence":0.790},{"start":166.15220,"duration":2.26178,"confidence":0.883},{"start":168.41398,"duration":2.26202,"confidence":0.740},{"start":170.67600,"duration":2.26547,"confidence":0.842},{"start":172.94146,"duration":2.26438,"confidence":0.529},{"start":175.20585,"duration":2.26365,"confidence":0.630},{"start":177.46950,"duration":2.26430,"confidence":0.900},{"start":179.73380,"duration":2.26598,"confidence":0.855},{"start":181.99978,"duration":2.26472,"confidence":0.704},{"start":184.26450,"duration":2.26297,"confidence":0.734},{"start":186.52747,"duration":2.26385,"confidence":0.774},{"start":188.79132,"duration":2.26332,"confidence":0.677},{"start":191.05464,"duration":2.26220,"confidence":0.540},{"start":193.31684,"duration":2.26389,"confidence":0.501},{"start":195.58073,"duration":2.26548,"confidence":0.502},{"start":197.84621,"duration":2.26703,"confidence":0.758},{"start":200.11324,"duration":2.26254,"confidence":0.392},{"start":202.37578,"duration":2.26221,"confidence":0.627},{"start":204.63799,"duration":2.26450,"confidence":0.223},{"start":206.90249,"duration":2.26523,"confidence":0.230},{"start":209.16771,"duration":2.26631,"confidence":0.471},{"start":211.43402,"duration":2.26218,"confidence":0.375},{"start":213.69621,"duration":2.26301,"confidence":0.439},{"start":215.95922,"duration":2.26638,"confidence":0.597},{"start":218.22560,"duration":2.26431,"confidence":0.420},{"start":220.48991,"duration":2.26245,"confidence":0.609},{"start":222.75236,"duration":2.26328,"confidence":0.113},{"start":225.01564,"duration":2.26551,"confidence":0.568},{"start":227.28115,"duration":2.26505,"confidence":0.278},{"start":229.54620,"duration":2.26300,"confidence":0.426},{"start":231.80920,"duration":2.26394,"confidence":0.441},{"start":234.07314,"duration":2.26622,"confidence":0.386},{"start":236.33937,"duration":2.26784,"confidence":0.472},{"start":238.60721,"duration":2.26316,"confidence":0.901},{"start":240.87036,"duration":2.26300,"confidence":0.886},{"start":243.13336,"duration":2.26620,"confidence":0.913},{"start":245.39956,"duration":2.26509,"confidence":0.713},{"start":247.66465,"duration":2.26345,"confidence":0.772},{"start":249.92810,"duration":2.26080,"confidence":0.955},{"start":252.18890,"duration":2.26388,"confidence":0.692},{"start":254.45278,"duration":2.26277,"confidence":0.950},{"start":256.71555,"duration":2.26748,"confidence":0.773},{"start":258.98302,"duration":2.26589,"confidence":0.935},{"start":261.24892,"duration":2.26302,"confidence":0.874},{"start":263.51193,"duration":2.26347,"confidence":0.808},{"start":265.77540,"duration":2.26534,"confidence":0.863},{"start":268.04074,"duration":2.26321,"confidence":0.846},{"start":270.30396,"duration":1.69749,"confidence":0.756},{"start":272.00144,"duration":2.26261,"confidence":0.549},{"start":274.26405,"duration":2.26957,"confidence":0.655},{"start":276.53362,"duration":2.26636,"confidence":0.320},{"start":278.79998,"duration":2.26203,"confidence":0.365},{"start":281.06202,"duration":2.26466,"confidence":0.579},{"start":283.32667,"duration":2.26675,"confidence":0.280},{"start":285.59343,"duration":2.26326,"confidence":0.772},{"start":287.85669,"duration":2.26228,"confidence":0.365},{"start":290.11897,"duration":2.26689,"confidence":0.554},{"start":292.38586,"duration":2.26500,"confidence":0.439},{"start":294.65086,"duration":2.26368,"confidence":0.421},{"start":296.91453,"duration":2.26284,"confidence":0.411},{"start":299.17737,"duration":2.26262,"confidence":0.152},{"start":301.43999,"duration":2.26403,"confidence":0.467},{"start":303.70402,"duration":2.26212,"confidence":0.513},{"start":305.96613,"duration":2.26421,"confidence":0.402},{"start":308.23034,"duration":3.37138,"confidence":0.322}],"beats":[{"start":0.05261,"duration":0.62459,"confidence":1.000},{"start":0.67720,"duration":0.58676,"confidence":0.079},{"start":1.26395,"duration":0.57567,"confidence":0.655},{"start":1.83962,"duration":0.58372,"confidence":0.197},{"start":2.42334,"duration":0.57349,"confidence":0.239},{"start":2.99683,"duration":0.56480,"confidence":0.068},{"start":3.56163,"duration":0.56629,"confidence":0.521},{"start":4.12792,"duration":0.56780,"confidence":0.368},{"start":4.69572,"duration":0.56576,"confidence":0.205},{"start":5.26148,"duration":0.56320,"confidence":0.059},{"start":5.82468,"duration":0.56470,"confidence":0.501},{"start":6.38937,"duration":0.56773,"confidence":0.363},{"start":6.95710,"duration":0.56615,"confidence":0.208},{"start":7.52325,"duration":0.56508,"confidence":0.074},{"start":8.08833,"duration":0.56501,"confidence":0.519},{"start":8.65334,"duration":0.56952,"confidence":0.372},{"start":9.22287,"duration":0.56792,"confidence":0.367},{"start":9.79079,"duration":0.57141,"confidence":0.146},{"start":10.36219,"duration":0.56472,"confidence":0.495},{"start":10.92692,"duration":0.56823,"confidence":0.331},{"start":11.49515,"duration":0.56614,"confidence":0.200},{"start":12.06128,"duration":0.56457,"confidence":0.035},{"start":12.62586,"duration":0.56403,"confidence":0.436},{"start":13.18989,"duration":0.56756,"confidence":0.304},{"start":13.75745,"duration":0.55890,"confidence":0.190},{"start":14.31635,"duration":0.56397,"confidence":0.062},{"start":14.88032,"duration":0.56447,"confidence":0.417},{"start":15.44479,"duration":0.56649,"confidence":0.290},{"start":16.01127,"duration":0.56647,"confidence":0.173},{"start":16.57775,"duration":0.56443,"confidence":0.091},{"start":17.14217,"duration":0.56542,"confidence":0.373},{"start":17.70759,"duration":0.56944,"confidence":0.314},{"start":18.27704,"duration":0.56737,"confidence":0.177},{"start":18.84441,"duration":0.56425,"confidence":0.040},{"start":19.40866,"duration":0.56722,"confidence":0.364},{"start":19.97588,"duration":0.56813,"confidence":0.255},{"start":20.54401,"duration":0.56600,"confidence":0.141},{"start":21.11001,"duration":0.56434,"confidence":0.023},{"start":21.67434,"duration":0.56474,"confidence":0.413},{"start":22.23909,"duration":0.56716,"confidence":0.283},{"start":22.80624,"duration":0.56858,"confidence":0.233},{"start":23.37482,"duration":0.56341,"confidence":0.110},{"start":23.93823,"duration":0.56587,"confidence":0.420},{"start":24.50411,"duration":0.56885,"confidence":0.269},{"start":25.07296,"duration":0.56526,"confidence":0.131},{"start":25.63821,"duration":0.56268,"confidence":0.010},{"start":26.20090,"duration":0.56368,"confidence":0.364},{"start":26.76457,"duration":0.56313,"confidence":0.259},{"start":27.32770,"duration":0.56614,"confidence":0.426},{"start":27.89384,"duration":0.56307,"confidence":0.432},{"start":28.45691,"duration":0.56304,"confidence":0.565},{"start":29.01995,"duration":0.56505,"confidence":0.476},{"start":29.58501,"duration":0.56656,"confidence":0.464},{"start":30.15156,"duration":0.56555,"confidence":0.428},{"start":30.71711,"duration":0.56813,"confidence":0.539},{"start":31.28524,"duration":0.56665,"confidence":0.413},{"start":31.85188,"duration":0.56570,"confidence":0.450},{"start":32.41758,"duration":0.56525,"confidence":0.366},{"start":32.98283,"duration":0.56735,"confidence":0.505},{"start":33.55018,"duration":0.56640,"confidence":0.430},{"start":34.11657,"duration":0.56598,"confidence":0.488},{"start":34.68256,"duration":0.56352,"confidence":0.401},{"start":35.24608,"duration":0.56614,"confidence":0.559},{"start":35.81221,"duration":0.56720,"confidence":0.479},{"start":36.37942,"duration":0.56624,"confidence":0.479},{"start":36.94566,"duration":0.56476,"confidence":0.352},{"start":37.51043,"duration":0.56684,"confidence":0.536},{"start":38.07726,"duration":0.56735,"confidence":0.428},{"start":38.64461,"duration":0.56633,"confidence":0.441},{"start":39.21094,"duration":0.56429,"confidence":0.366},{"start":39.77523,"duration":0.56575,"confidence":0.497},{"start":40.34098,"duration":0.56671,"confidence":0.428},{"start":40.90770,"duration":0.56610,"confidence":0.427},{"start":41.47379,"duration":0.56497,"confidence":0.313},{"start":42.03877,"duration":0.56583,"confidence":0.466},{"start":42.60459,"duration":0.56567,"confidence":0.381},{"start":43.17026,"duration":0.56749,"confidence":0.429},{"start":43.73775,"duration":0.56474,"confidence":0.380},{"start":44.30249,"duration":0.56604,"confidence":0.548},{"start":44.86853,"duration":0.56638,"confidence":0.476},{"start":45.43491,"duration":0.56672,"confidence":0.299},{"start":46.00163,"duration":0.56457,"confidence":0.431},{"start":46.56619,"duration":0.56748,"confidence":0.612},{"start":47.13367,"duration":0.56487,"confidence":0.492},{"start":47.69854,"duration":0.56739,"confidence":0.439},{"start":48.26593,"duration":0.56535,"confidence":0.498},{"start":48.83128,"duration":0.56684,"confidence":0.618},{"start":49.39813,"duration":0.56479,"confidence":0.527},{"start":49.96292,"duration":0.56682,"confidence":0.469},{"start":50.52974,"duration":0.56531,"confidence":0.505},{"start":51.09505,"duration":0.56734,"confidence":0.584},{"start":51.66239,"duration":0.56583,"confidence":0.481},{"start":52.22822,"duration":0.56585,"confidence":0.379},{"start":52.79407,"duration":0.56587,"confidence":0.493},{"start":53.35994,"duration":0.56792,"confidence":0.631},{"start":53.92786,"duration":0.56539,"confidence":0.539},{"start":54.49325,"duration":0.56589,"confidence":0.457},{"start":55.05914,"duration":0.56486,"confidence":0.421},{"start":55.62400,"duration":0.56635,"confidence":0.557},{"start":56.19035,"duration":0.56681,"confidence":0.527},{"start":56.75716,"duration":0.56524,"confidence":0.427},{"start":57.32240,"duration":0.56518,"confidence":0.457},{"start":57.88759,"duration":0.56766,"confidence":0.604},{"start":58.45525,"duration":0.56659,"confidence":0.532},{"start":59.02184,"duration":0.56601,"confidence":0.412},{"start":59.58784,"duration":0.56492,"confidence":0.435},{"start":60.15276,"duration":0.56639,"confidence":0.575},{"start":60.71915,"duration":0.56682,"confidence":0.513},{"start":61.28596,"duration":0.56573,"confidence":0.407},{"start":61.85170,"duration":0.56565,"confidence":0.485},{"start":62.41735,"duration":0.56558,"confidence":0.612},{"start":62.98293,"duration":0.56805,"confidence":0.534},{"start":63.55097,"duration":0.56850,"confidence":0.375},{"start":64.11948,"duration":0.56642,"confidence":0.367},{"start":64.68589,"duration":0.56690,"confidence":0.314},{"start":65.25279,"duration":0.56738,"confidence":0.658},{"start":65.82017,"duration":0.56838,"confidence":0.519},{"start":66.38856,"duration":0.56534,"confidence":0.416},{"start":66.95389,"duration":0.56483,"confidence":0.352},{"start":67.51873,"duration":0.56484,"confidence":0.691},{"start":68.08356,"duration":0.56685,"confidence":0.541},{"start":68.65041,"duration":0.56532,"confidence":0.400},{"start":69.21574,"duration":0.56531,"confidence":0.349},{"start":69.78104,"duration":0.56425,"confidence":0.660},{"start":70.34529,"duration":0.56775,"confidence":0.537},{"start":70.91304,"duration":0.56561,"confidence":0.528},{"start":71.47865,"duration":0.56499,"confidence":0.454},{"start":72.04364,"duration":0.56231,"confidence":0.728},{"start":72.60595,"duration":0.56265,"confidence":0.539},{"start":73.16860,"duration":0.56544,"confidence":0.566},{"start":73.73404,"duration":0.56514,"confidence":0.650},{"start":74.29918,"duration":0.56384,"confidence":0.716},{"start":74.86302,"duration":0.56304,"confidence":0.393},{"start":75.42606,"duration":0.56526,"confidence":0.450},{"start":75.99132,"duration":0.56702,"confidence":0.651},{"start":76.55834,"duration":0.56727,"confidence":0.694},{"start":77.12561,"duration":0.56358,"confidence":0.353},{"start":77.68918,"duration":0.56499,"confidence":0.549},{"start":78.25418,"duration":0.56641,"confidence":0.604},{"start":78.82059,"duration":0.56843,"confidence":0.679},{"start":79.38902,"duration":0.56793,"confidence":0.434},{"start":79.95695,"duration":0.56654,"confidence":0.500},{"start":80.52349,"duration":0.56717,"confidence":0.500},{"start":81.09066,"duration":0.56939,"confidence":0.611},{"start":81.66005,"duration":0.56970,"confidence":0.543},{"start":82.22975,"duration":0.56698,"confidence":0.400},{"start":82.79673,"duration":0.56685,"confidence":0.253},{"start":83.36358,"duration":0.57126,"confidence":0.727},{"start":83.93484,"duration":0.58017,"confidence":0.538},{"start":84.51502,"duration":0.58810,"confidence":0.366},{"start":85.10311,"duration":0.58634,"confidence":0.331},{"start":85.68945,"duration":0.58450,"confidence":0.372},{"start":86.27395,"duration":0.58872,"confidence":0.163},{"start":86.86267,"duration":0.58730,"confidence":0.324},{"start":87.44997,"duration":0.58085,"confidence":0.352},{"start":88.03082,"duration":0.57332,"confidence":0.345},{"start":88.60414,"duration":0.56729,"confidence":0.174},{"start":89.17142,"duration":0.56529,"confidence":0.208},{"start":89.73672,"duration":0.56429,"confidence":0.202},{"start":90.30101,"duration":0.56431,"confidence":0.384},{"start":90.86532,"duration":0.56633,"confidence":0.303},{"start":91.43165,"duration":0.56684,"confidence":0.375},{"start":91.99849,"duration":0.56482,"confidence":0.542},{"start":92.56331,"duration":0.56431,"confidence":0.654},{"start":93.12762,"duration":0.56734,"confidence":0.703},{"start":93.69496,"duration":0.56784,"confidence":0.672},{"start":94.26280,"duration":0.56429,"confidence":0.657},{"start":94.82709,"duration":0.56529,"confidence":0.671},{"start":95.39237,"duration":0.56679,"confidence":0.721},{"start":95.95916,"duration":0.56727,"confidence":0.675},{"start":96.52643,"duration":0.56522,"confidence":0.632},{"start":97.09164,"duration":0.56367,"confidence":0.686},{"start":97.65531,"duration":0.56514,"confidence":0.726},{"start":98.22045,"duration":0.56712,"confidence":0.670},{"start":98.78757,"duration":0.56505,"confidence":0.654},{"start":99.35262,"duration":0.56440,"confidence":0.533},{"start":99.91702,"duration":0.56519,"confidence":0.345},{"start":100.48221,"duration":0.56547,"confidence":0.342},{"start":101.04769,"duration":0.56779,"confidence":0.543},{"start":101.61548,"duration":0.56708,"confidence":0.685},{"start":102.18255,"duration":0.56586,"confidence":0.623},{"start":102.74841,"duration":0.56667,"confidence":0.628},{"start":103.31509,"duration":0.56606,"confidence":0.706},{"start":103.88115,"duration":0.56705,"confidence":0.740},{"start":104.44819,"duration":0.56704,"confidence":0.595},{"start":105.01523,"duration":0.56551,"confidence":0.589},{"start":105.58074,"duration":0.56550,"confidence":0.709},{"start":106.14624,"duration":0.56802,"confidence":0.740},{"start":106.71426,"duration":0.56802,"confidence":0.640},{"start":107.28228,"duration":0.56903,"confidence":0.626},{"start":107.85131,"duration":0.56701,"confidence":0.717},{"start":108.41832,"duration":0.56802,"confidence":0.696},{"start":108.98634,"duration":0.56701,"confidence":0.223},{"start":109.55334,"duration":0.56852,"confidence":0.178},{"start":110.12186,"duration":0.56448,"confidence":0.233},{"start":110.68634,"duration":0.56448,"confidence":0.216},{"start":111.25081,"duration":0.56548,"confidence":0.153},{"start":111.81629,"duration":0.56750,"confidence":0.188},{"start":112.38379,"duration":0.56648,"confidence":0.295},{"start":112.95027,"duration":0.56648,"confidence":0.356},{"start":113.51675,"duration":0.56446,"confidence":0.296},{"start":114.08121,"duration":0.56950,"confidence":0.207},{"start":114.65071,"duration":0.56647,"confidence":0.277},{"start":115.21718,"duration":0.56394,"confidence":0.260},{"start":115.78111,"duration":0.56393,"confidence":0.179},{"start":116.34505,"duration":0.56695,"confidence":0.133},{"start":116.91200,"duration":0.56694,"confidence":0.133},{"start":117.47894,"duration":0.56542,"confidence":0.187},{"start":118.04436,"duration":0.56289,"confidence":0.222},{"start":118.60725,"duration":0.56793,"confidence":0.188},{"start":119.17518,"duration":0.56641,"confidence":0.182},{"start":119.74160,"duration":0.56641,"confidence":0.191},{"start":120.30801,"duration":0.56540,"confidence":0.159},{"start":120.87340,"duration":0.56842,"confidence":0.194},{"start":121.44182,"duration":0.56842,"confidence":0.228},{"start":122.01024,"duration":0.56589,"confidence":0.281},{"start":122.57613,"duration":0.56386,"confidence":0.256},{"start":123.14000,"duration":0.56790,"confidence":0.125},{"start":123.70789,"duration":0.56385,"confidence":0.125},{"start":124.27175,"duration":0.56385,"confidence":0.176},{"start":124.83560,"duration":0.56435,"confidence":0.267},{"start":125.39995,"duration":0.56485,"confidence":0.251},{"start":125.96480,"duration":0.56535,"confidence":0.383},{"start":126.53015,"duration":0.56586,"confidence":0.522},{"start":127.09601,"duration":0.56384,"confidence":0.179},{"start":127.65985,"duration":0.56838,"confidence":0.276},{"start":128.22822,"duration":0.56535,"confidence":0.380},{"start":128.79358,"duration":0.56434,"confidence":0.435},{"start":129.35792,"duration":0.56485,"confidence":0.268},{"start":129.92277,"duration":0.56687,"confidence":0.291},{"start":130.48964,"duration":0.56737,"confidence":0.453},{"start":131.05701,"duration":0.56586,"confidence":0.509},{"start":131.62287,"duration":0.56535,"confidence":0.328},{"start":132.18822,"duration":0.56838,"confidence":0.215},{"start":132.75660,"duration":0.56535,"confidence":0.328},{"start":133.32195,"duration":0.56586,"confidence":0.422},{"start":133.88780,"duration":0.56737,"confidence":0.259},{"start":134.45517,"duration":0.56687,"confidence":0.294},{"start":135.02204,"duration":0.56587,"confidence":0.417},{"start":135.58791,"duration":0.56537,"confidence":0.520},{"start":136.15328,"duration":0.56437,"confidence":0.303},{"start":136.71765,"duration":0.56640,"confidence":0.261},{"start":137.28405,"duration":0.56540,"confidence":0.377},{"start":137.84945,"duration":0.56541,"confidence":0.426},{"start":138.41486,"duration":0.56491,"confidence":0.248},{"start":138.97977,"duration":0.56693,"confidence":0.254},{"start":139.54670,"duration":0.56744,"confidence":0.433},{"start":140.11414,"duration":0.56643,"confidence":0.526},{"start":140.68056,"duration":0.56592,"confidence":0.330},{"start":141.24648,"duration":0.56844,"confidence":0.297},{"start":141.81492,"duration":0.56641,"confidence":0.414},{"start":142.38132,"duration":0.56539,"confidence":0.460},{"start":142.94672,"duration":0.56539,"confidence":0.252},{"start":143.51211,"duration":0.56538,"confidence":0.193},{"start":144.07749,"duration":0.56537,"confidence":0.303},{"start":144.64286,"duration":0.56536,"confidence":0.343},{"start":145.20822,"duration":0.56433,"confidence":0.280},{"start":145.77256,"duration":0.56684,"confidence":0.257},{"start":146.33940,"duration":0.56581,"confidence":0.364},{"start":146.90521,"duration":0.56579,"confidence":0.428},{"start":147.47100,"duration":0.56577,"confidence":0.228},{"start":148.03677,"duration":0.56776,"confidence":0.290},{"start":148.60453,"duration":0.56623,"confidence":0.442},{"start":149.17075,"duration":0.56571,"confidence":0.520},{"start":149.73646,"duration":0.56418,"confidence":0.297},{"start":150.30064,"duration":0.56468,"confidence":0.253},{"start":150.86532,"duration":0.56517,"confidence":0.373},{"start":151.43049,"duration":0.56568,"confidence":0.427},{"start":151.99617,"duration":0.56518,"confidence":0.243},{"start":152.56135,"duration":0.56774,"confidence":0.286},{"start":153.12909,"duration":0.56627,"confidence":0.470},{"start":153.69537,"duration":0.56581,"confidence":0.532},{"start":154.26118,"duration":0.56840,"confidence":0.279},{"start":154.82958,"duration":0.56897,"confidence":0.232},{"start":155.39855,"duration":0.56551,"confidence":0.368},{"start":155.96406,"duration":0.56508,"confidence":0.454},{"start":156.52914,"duration":0.56464,"confidence":0.265},{"start":157.09378,"duration":0.56671,"confidence":0.289},{"start":157.66049,"duration":0.56626,"confidence":0.437},{"start":158.22675,"duration":0.56428,"confidence":0.518},{"start":158.79103,"duration":0.56482,"confidence":0.320},{"start":159.35586,"duration":0.56686,"confidence":0.247},{"start":159.92272,"duration":0.56587,"confidence":0.350},{"start":160.48859,"duration":0.56537,"confidence":0.426},{"start":161.05396,"duration":0.56487,"confidence":0.240},{"start":161.61883,"duration":0.56741,"confidence":0.166},{"start":162.18624,"duration":0.56843,"confidence":0.220},{"start":162.75466,"duration":0.56540,"confidence":0.137},{"start":163.32006,"duration":0.56591,"confidence":0.327},{"start":163.88597,"duration":0.56693,"confidence":0.600},{"start":164.45290,"duration":0.56794,"confidence":0.735},{"start":165.02085,"duration":0.56643,"confidence":0.776},{"start":165.58728,"duration":0.56492,"confidence":0.808},{"start":166.15220,"duration":0.56442,"confidence":0.803},{"start":166.71662,"duration":0.56645,"confidence":0.827},{"start":167.28307,"duration":0.56595,"confidence":0.774},{"start":167.84903,"duration":0.56495,"confidence":0.824},{"start":168.41398,"duration":0.56446,"confidence":0.823},{"start":168.97844,"duration":0.56600,"confidence":0.841},{"start":169.54444,"duration":0.56602,"confidence":0.787},{"start":170.11046,"duration":0.56554,"confidence":0.815},{"start":170.67600,"duration":0.56607,"confidence":0.800},{"start":171.24207,"duration":0.56661,"confidence":0.835},{"start":171.80867,"duration":0.56663,"confidence":0.778},{"start":172.37531,"duration":0.56616,"confidence":0.815},{"start":172.94146,"duration":0.56669,"confidence":0.809},{"start":173.50816,"duration":0.56621,"confidence":0.825},{"start":174.07437,"duration":0.56623,"confidence":0.743},{"start":174.64060,"duration":0.56525,"confidence":0.800},{"start":175.20585,"duration":0.56577,"confidence":0.810},{"start":175.77162,"duration":0.56629,"confidence":0.836},{"start":176.33791,"duration":0.56579,"confidence":0.773},{"start":176.90370,"duration":0.56580,"confidence":0.813},{"start":177.46950,"duration":0.56581,"confidence":0.819},{"start":178.03532,"duration":0.56683,"confidence":0.853},{"start":178.60214,"duration":0.56633,"confidence":0.805},{"start":179.16847,"duration":0.56533,"confidence":0.810},{"start":179.73380,"duration":0.56584,"confidence":0.821},{"start":180.29964,"duration":0.56788,"confidence":0.838},{"start":180.86752,"duration":0.56637,"confidence":0.778},{"start":181.43390,"duration":0.56588,"confidence":0.814},{"start":181.99978,"duration":0.56540,"confidence":0.781},{"start":182.56517,"duration":0.56693,"confidence":0.814},{"start":183.13211,"duration":0.56644,"confidence":0.715},{"start":183.69855,"duration":0.56595,"confidence":0.826},{"start":184.26450,"duration":0.56445,"confidence":0.853},{"start":184.82895,"duration":0.56599,"confidence":0.873},{"start":185.39494,"duration":0.56651,"confidence":0.882},{"start":185.96145,"duration":0.56603,"confidence":0.860},{"start":186.52747,"duration":0.56503,"confidence":0.867},{"start":187.09251,"duration":0.56607,"confidence":0.864},{"start":187.65858,"duration":0.56610,"confidence":0.861},{"start":188.22468,"duration":0.56664,"confidence":0.847},{"start":188.79132,"duration":0.56616,"confidence":0.869},{"start":189.35748,"duration":0.56569,"confidence":0.868},{"start":189.92317,"duration":0.56572,"confidence":0.879},{"start":190.48889,"duration":0.56575,"confidence":0.872},{"start":191.05464,"duration":0.56577,"confidence":0.876},{"start":191.62041,"duration":0.56630,"confidence":0.882},{"start":192.18671,"duration":0.56531,"confidence":0.867},{"start":192.75202,"duration":0.56482,"confidence":0.837},{"start":193.31684,"duration":0.56584,"confidence":0.864},{"start":193.88267,"duration":0.56635,"confidence":0.884},{"start":194.44902,"duration":0.56585,"confidence":0.873},{"start":195.01487,"duration":0.56585,"confidence":0.860},{"start":195.58073,"duration":0.56637,"confidence":0.861},{"start":196.14709,"duration":0.56687,"confidence":0.853},{"start":196.71397,"duration":0.56637,"confidence":0.862},{"start":197.28034,"duration":0.56587,"confidence":0.828},{"start":197.84621,"duration":0.56688,"confidence":0.863},{"start":198.41309,"duration":0.56688,"confidence":0.863},{"start":198.97997,"duration":0.56688,"confidence":0.812},{"start":199.54686,"duration":0.56638,"confidence":0.649},{"start":200.11324,"duration":0.56537,"confidence":0.611},{"start":200.67861,"duration":0.56740,"confidence":0.747},{"start":201.24601,"duration":0.56589,"confidence":0.897},{"start":201.81191,"duration":0.56387,"confidence":0.670},{"start":202.37578,"duration":0.56540,"confidence":0.671},{"start":202.94118,"duration":0.56694,"confidence":0.631},{"start":203.50812,"duration":0.56442,"confidence":0.455},{"start":204.07254,"duration":0.56545,"confidence":0.614},{"start":204.63799,"duration":0.56547,"confidence":0.648},{"start":205.20345,"duration":0.56700,"confidence":0.566},{"start":205.77046,"duration":0.56702,"confidence":0.454},{"start":206.33748,"duration":0.56501,"confidence":0.615},{"start":206.90249,"duration":0.56452,"confidence":0.679},{"start":207.46701,"duration":0.56757,"confidence":0.581},{"start":208.03458,"duration":0.56758,"confidence":0.429},{"start":208.60216,"duration":0.56556,"confidence":0.581},{"start":209.16771,"duration":0.56505,"confidence":0.625},{"start":209.73277,"duration":0.56759,"confidence":0.648},{"start":210.30036,"duration":0.56810,"confidence":0.613},{"start":210.86846,"duration":0.56557,"confidence":0.770},{"start":211.43402,"duration":0.56505,"confidence":0.859},{"start":211.99907,"duration":0.56504,"confidence":0.850},{"start":212.56412,"duration":0.56656,"confidence":0.849},{"start":213.13067,"duration":0.56553,"confidence":0.795},{"start":213.69621,"duration":0.56451,"confidence":0.857},{"start":214.26071,"duration":0.56601,"confidence":0.828},{"start":214.82673,"duration":0.56701,"confidence":0.814},{"start":215.39374,"duration":0.56548,"confidence":0.739},{"start":215.95922,"duration":0.56648,"confidence":0.828},{"start":216.52570,"duration":0.56597,"confidence":0.796},{"start":217.09167,"duration":0.56697,"confidence":0.788},{"start":217.65864,"duration":0.56696,"confidence":0.787},{"start":218.22560,"duration":0.56544,"confidence":0.837},{"start":218.79104,"duration":0.56645,"confidence":0.809},{"start":219.35750,"duration":0.56747,"confidence":0.777},{"start":219.92497,"duration":0.56494,"confidence":0.684},{"start":220.48991,"duration":0.56495,"confidence":0.641},{"start":221.05486,"duration":0.56750,"confidence":0.582},{"start":221.62237,"duration":0.56549,"confidence":0.497},{"start":222.18786,"duration":0.56450,"confidence":0.634},{"start":222.75236,"duration":0.56554,"confidence":0.684},{"start":223.31790,"duration":0.56657,"confidence":0.577},{"start":223.88447,"duration":0.56608,"confidence":0.444},{"start":224.45055,"duration":0.56509,"confidence":0.587},{"start":225.01564,"duration":0.56510,"confidence":0.649},{"start":225.58074,"duration":0.56663,"confidence":0.575},{"start":226.14736,"duration":0.56815,"confidence":0.430},{"start":226.71552,"duration":0.56563,"confidence":0.535},{"start":227.28115,"duration":0.56462,"confidence":0.594},{"start":227.84576,"duration":0.56765,"confidence":0.616},{"start":228.41342,"duration":0.56816,"confidence":0.609},{"start":228.98158,"duration":0.56462,"confidence":0.753},{"start":229.54620,"duration":0.56462,"confidence":0.842},{"start":230.11081,"duration":0.56613,"confidence":0.833},{"start":230.67695,"duration":0.56663,"confidence":0.828},{"start":231.24358,"duration":0.56562,"confidence":0.787},{"start":231.80920,"duration":0.56460,"confidence":0.848},{"start":232.37380,"duration":0.56612,"confidence":0.838},{"start":232.93992,"duration":0.56712,"confidence":0.841},{"start":233.50704,"duration":0.56610,"confidence":0.746},{"start":234.07314,"duration":0.56557,"confidence":0.811},{"start":234.63872,"duration":0.56606,"confidence":0.782},{"start":235.20477,"duration":0.56705,"confidence":0.772},{"start":235.77183,"duration":0.56754,"confidence":0.760},{"start":236.33937,"duration":0.56701,"confidence":0.832},{"start":236.90637,"duration":0.56698,"confidence":0.823},{"start":237.47335,"duration":0.56695,"confidence":0.780},{"start":238.04030,"duration":0.56691,"confidence":0.641},{"start":238.60721,"duration":0.56738,"confidence":0.505},{"start":239.17459,"duration":0.56581,"confidence":0.685},{"start":239.74040,"duration":0.56424,"confidence":0.675},{"start":240.30464,"duration":0.56572,"confidence":0.622},{"start":240.87036,"duration":0.56669,"confidence":0.514},{"start":241.43705,"duration":0.56716,"confidence":0.702},{"start":242.00422,"duration":0.56409,"confidence":0.719},{"start":242.56830,"duration":0.56506,"confidence":0.655},{"start":243.13336,"duration":0.56753,"confidence":0.476},{"start":243.70090,"duration":0.56849,"confidence":0.660},{"start":244.26939,"duration":0.56487,"confidence":0.664},{"start":244.83426,"duration":0.56530,"confidence":0.634},{"start":245.39956,"duration":0.56569,"confidence":0.518},{"start":245.96526,"duration":0.56861,"confidence":0.735},{"start":246.53386,"duration":0.56545,"confidence":0.706},{"start":247.09931,"duration":0.56534,"confidence":0.684},{"start":247.66465,"duration":0.56624,"confidence":0.518},{"start":248.23089,"duration":0.56615,"confidence":0.681},{"start":248.79704,"duration":0.56505,"confidence":0.667},{"start":249.36209,"duration":0.56601,"confidence":0.620},{"start":249.92810,"duration":0.56497,"confidence":0.513},{"start":250.49307,"duration":0.56595,"confidence":0.683},{"start":251.05902,"duration":0.56494,"confidence":0.698},{"start":251.62396,"duration":0.56494,"confidence":0.638},{"start":252.18890,"duration":0.56747,"confidence":0.493},{"start":252.75637,"duration":0.56596,"confidence":0.660},{"start":253.32233,"duration":0.56446,"confidence":0.636},{"start":253.88679,"duration":0.56599,"confidence":0.614},{"start":254.45278,"duration":0.56652,"confidence":0.430},{"start":255.01930,"duration":0.56605,"confidence":0.625},{"start":255.58535,"duration":0.56508,"confidence":0.630},{"start":256.15043,"duration":0.56512,"confidence":0.654},{"start":256.71555,"duration":0.56769,"confidence":0.513},{"start":257.28324,"duration":0.56723,"confidence":0.690},{"start":257.85046,"duration":0.56525,"confidence":0.680},{"start":258.41572,"duration":0.56731,"confidence":0.635},{"start":258.98302,"duration":0.56733,"confidence":0.533},{"start":259.55035,"duration":0.56685,"confidence":0.712},{"start":260.11720,"duration":0.56534,"confidence":0.688},{"start":260.68255,"duration":0.56637,"confidence":0.575},{"start":261.24892,"duration":0.56688,"confidence":0.339},{"start":261.81580,"duration":0.56538,"confidence":0.547},{"start":262.38118,"duration":0.56437,"confidence":0.664},{"start":262.94554,"duration":0.56639,"confidence":0.592},{"start":263.51193,"duration":0.56689,"confidence":0.423},{"start":264.07883,"duration":0.56688,"confidence":0.597},{"start":264.64571,"duration":0.56384,"confidence":0.700},{"start":265.20955,"duration":0.56585,"confidence":0.582},{"start":265.77540,"duration":0.56888,"confidence":0.383},{"start":266.34428,"duration":0.56735,"confidence":0.574},{"start":266.91163,"duration":0.56431,"confidence":0.682},{"start":267.47594,"duration":0.56480,"confidence":0.588},{"start":268.04074,"duration":0.56732,"confidence":0.322},{"start":268.60807,"duration":0.56681,"confidence":0.402},{"start":269.17488,"duration":0.56479,"confidence":0.522},{"start":269.73967,"duration":0.56429,"confidence":0.253},{"start":270.30396,"duration":0.56581,"confidence":0.234},{"start":270.86977,"duration":0.56633,"confidence":0.337},{"start":271.43610,"duration":0.56534,"confidence":0.474},{"start":272.00144,"duration":0.56334,"confidence":0.265},{"start":272.56478,"duration":0.56539,"confidence":0.215},{"start":273.13017,"duration":0.56794,"confidence":0.351},{"start":273.69811,"duration":0.56594,"confidence":0.525},{"start":274.26405,"duration":0.56546,"confidence":0.523},{"start":274.82952,"duration":0.56852,"confidence":0.542},{"start":275.39803,"duration":0.56804,"confidence":0.561},{"start":275.96607,"duration":0.56755,"confidence":0.325},{"start":276.53362,"duration":0.56606,"confidence":0.527},{"start":277.09968,"duration":0.56709,"confidence":0.390},{"start":277.66677,"duration":0.56761,"confidence":0.523},{"start":278.23438,"duration":0.56560,"confidence":0.317},{"start":278.79998,"duration":0.56309,"confidence":0.527},{"start":279.36308,"duration":0.56614,"confidence":0.414},{"start":279.92921,"duration":0.56665,"confidence":0.561},{"start":280.49586,"duration":0.56615,"confidence":0.351},{"start":281.06202,"duration":0.56312,"confidence":0.538},{"start":281.62514,"duration":0.56616,"confidence":0.400},{"start":282.19130,"duration":0.56768,"confidence":0.532},{"start":282.75899,"duration":0.56769,"confidence":0.306},{"start":283.32667,"duration":0.56466,"confidence":0.519},{"start":283.89133,"duration":0.56618,"confidence":0.401},{"start":284.45751,"duration":0.56872,"confidence":0.543},{"start":285.02623,"duration":0.56720,"confidence":0.339},{"start":285.59343,"duration":0.56467,"confidence":0.550},{"start":286.15810,"duration":0.56569,"confidence":0.434},{"start":286.72379,"duration":0.56620,"confidence":0.543},{"start":287.28999,"duration":0.56671,"confidence":0.325},{"start":287.85669,"duration":0.56418,"confidence":0.527},{"start":288.42087,"duration":0.56519,"confidence":0.416},{"start":288.98605,"duration":0.56671,"confidence":0.554},{"start":289.55276,"duration":0.56621,"confidence":0.364},{"start":290.11897,"duration":0.56469,"confidence":0.548},{"start":290.68366,"duration":0.56722,"confidence":0.430},{"start":291.25088,"duration":0.56672,"confidence":0.530},{"start":291.81761,"duration":0.56825,"confidence":0.290},{"start":292.38586,"duration":0.56472,"confidence":0.493},{"start":292.95057,"duration":0.56574,"confidence":0.422},{"start":293.51631,"duration":0.56777,"confidence":0.549},{"start":294.08408,"duration":0.56677,"confidence":0.332},{"start":294.65086,"duration":0.56325,"confidence":0.525},{"start":295.21410,"duration":0.56680,"confidence":0.441},{"start":295.78090,"duration":0.56580,"confidence":0.530},{"start":296.34670,"duration":0.56783,"confidence":0.325},{"start":296.91453,"duration":0.56481,"confidence":0.521},{"start":297.47934,"duration":0.56533,"confidence":0.383},{"start":298.04467,"duration":0.56685,"confidence":0.542},{"start":298.61152,"duration":0.56585,"confidence":0.369},{"start":299.17737,"duration":0.56435,"confidence":0.570},{"start":299.74172,"duration":0.56689,"confidence":0.421},{"start":300.30861,"duration":0.56541,"confidence":0.532},{"start":300.87402,"duration":0.56597,"confidence":0.282},{"start":301.43999,"duration":0.56451,"confidence":0.488},{"start":302.00450,"duration":0.56559,"confidence":0.359},{"start":302.57009,"duration":0.56869,"confidence":0.539},{"start":303.13879,"duration":0.56523,"confidence":0.307},{"start":303.70402,"duration":0.56380,"confidence":0.518},{"start":304.26781,"duration":0.56589,"confidence":0.384},{"start":304.83370,"duration":0.56746,"confidence":0.572},{"start":305.40116,"duration":0.56497,"confidence":0.394},{"start":305.96613,"duration":0.56500,"confidence":0.559},{"start":306.53114,"duration":0.56402,"confidence":0.409},{"start":307.09516,"duration":0.56860,"confidence":0.530},{"start":307.66376,"duration":0.56659,"confidence":0.314},{"start":308.23034,"duration":0.56456,"confidence":0.541},{"start":308.79491,"duration":0.56305,"confidence":0.409},{"start":309.35796,"duration":0.56305,"confidence":0.513},{"start":309.92101,"duration":0.56305,"confidence":0.204},{"start":310.48406,"duration":0.56052,"confidence":0.355},{"start":311.04458,"duration":0.55714,"confidence":0.304},{"start":311.60172,"duration":0.56539,"confidence":0.276},{"start":312.16711,"duration":0.56539,"confidence":0.374}],"tatums":[{"start":0.05261,"duration":0.31229,"confidence":1.000},{"start":0.36491,"duration":0.31229,"confidence":1.000},{"start":0.67720,"duration":0.29338,"confidence":0.079},{"start":0.97058,"duration":0.29338,"confidence":0.079},{"start":1.26395,"duration":0.28783,"confidence":0.655},{"start":1.55179,"duration":0.28783,"confidence":0.655},{"start":1.83962,"duration":0.29186,"confidence":0.197},{"start":2.13148,"duration":0.29186,"confidence":0.197},{"start":2.42334,"duration":0.28675,"confidence":0.239},{"start":2.71009,"duration":0.28675,"confidence":0.239},{"start":2.99683,"duration":0.28240,"confidence":0.068},{"start":3.27923,"duration":0.28240,"confidence":0.068},{"start":3.56163,"duration":0.28314,"confidence":0.521},{"start":3.84477,"duration":0.28314,"confidence":0.521},{"start":4.12792,"duration":0.28390,"confidence":0.368},{"start":4.41182,"duration":0.28390,"confidence":0.368},{"start":4.69572,"duration":0.28288,"confidence":0.205},{"start":4.97860,"duration":0.28288,"confidence":0.205},{"start":5.26148,"duration":0.28160,"confidence":0.059},{"start":5.54308,"duration":0.28160,"confidence":0.059},{"start":5.82468,"duration":0.28235,"confidence":0.501},{"start":6.10703,"duration":0.28235,"confidence":0.501},{"start":6.38937,"duration":0.28386,"confidence":0.363},{"start":6.67324,"duration":0.28386,"confidence":0.363},{"start":6.95710,"duration":0.28307,"confidence":0.208},{"start":7.24017,"duration":0.28307,"confidence":0.208},{"start":7.52325,"duration":0.28254,"confidence":0.074},{"start":7.80579,"duration":0.28254,"confidence":0.074},{"start":8.08833,"duration":0.28251,"confidence":0.519},{"start":8.37084,"duration":0.28251,"confidence":0.519},{"start":8.65334,"duration":0.28476,"confidence":0.372},{"start":8.93810,"duration":0.28476,"confidence":0.372},{"start":9.22287,"duration":0.28396,"confidence":0.367},{"start":9.50683,"duration":0.28396,"confidence":0.367},{"start":9.79079,"duration":0.28570,"confidence":0.146},{"start":10.07649,"duration":0.28570,"confidence":0.146},{"start":10.36219,"duration":0.28236,"confidence":0.495},{"start":10.64456,"duration":0.28236,"confidence":0.495},{"start":10.92692,"duration":0.28411,"confidence":0.331},{"start":11.21103,"duration":0.28411,"confidence":0.331},{"start":11.49515,"duration":0.28307,"confidence":0.200},{"start":11.77821,"duration":0.28307,"confidence":0.200},{"start":12.06128,"duration":0.28229,"confidence":0.035},{"start":12.34357,"duration":0.28229,"confidence":0.035},{"start":12.62586,"duration":0.28201,"confidence":0.436},{"start":12.90787,"duration":0.28201,"confidence":0.436},{"start":13.18989,"duration":0.28378,"confidence":0.304},{"start":13.47367,"duration":0.28378,"confidence":0.304},{"start":13.75745,"duration":0.27945,"confidence":0.190},{"start":14.03690,"duration":0.27945,"confidence":0.190},{"start":14.31635,"duration":0.28198,"confidence":0.062},{"start":14.59834,"duration":0.28198,"confidence":0.062},{"start":14.88032,"duration":0.28223,"confidence":0.417},{"start":15.16255,"duration":0.28223,"confidence":0.417},{"start":15.44479,"duration":0.28324,"confidence":0.290},{"start":15.72803,"duration":0.28324,"confidence":0.290},{"start":16.01127,"duration":0.28324,"confidence":0.173},{"start":16.29451,"duration":0.28324,"confidence":0.173},{"start":16.57775,"duration":0.28221,"confidence":0.091},{"start":16.85996,"duration":0.28221,"confidence":0.091},{"start":17.14217,"duration":0.28271,"confidence":0.373},{"start":17.42488,"duration":0.28271,"confidence":0.373},{"start":17.70759,"duration":0.28472,"confidence":0.314},{"start":17.99231,"duration":0.28472,"confidence":0.314},{"start":18.27704,"duration":0.28369,"confidence":0.177},{"start":18.56072,"duration":0.28369,"confidence":0.177},{"start":18.84441,"duration":0.28212,"confidence":0.040},{"start":19.12653,"duration":0.28212,"confidence":0.040},{"start":19.40866,"duration":0.28361,"confidence":0.364},{"start":19.69227,"duration":0.28361,"confidence":0.364},{"start":19.97588,"duration":0.28407,"confidence":0.255},{"start":20.25994,"duration":0.28407,"confidence":0.255},{"start":20.54401,"duration":0.28300,"confidence":0.141},{"start":20.82701,"duration":0.28300,"confidence":0.141},{"start":21.11001,"duration":0.28217,"confidence":0.023},{"start":21.39217,"duration":0.28217,"confidence":0.023},{"start":21.67434,"duration":0.28237,"confidence":0.413},{"start":21.95672,"duration":0.28237,"confidence":0.413},{"start":22.23909,"duration":0.28358,"confidence":0.283},{"start":22.52267,"duration":0.28358,"confidence":0.283},{"start":22.80624,"duration":0.28429,"confidence":0.233},{"start":23.09053,"duration":0.28429,"confidence":0.233},{"start":23.37482,"duration":0.28170,"confidence":0.110},{"start":23.65653,"duration":0.28170,"confidence":0.110},{"start":23.93823,"duration":0.28294,"confidence":0.420},{"start":24.22117,"duration":0.28294,"confidence":0.420},{"start":24.50411,"duration":0.28442,"confidence":0.269},{"start":24.78853,"duration":0.28442,"confidence":0.269},{"start":25.07296,"duration":0.28263,"confidence":0.131},{"start":25.35558,"duration":0.28263,"confidence":0.131},{"start":25.63821,"duration":0.28134,"confidence":0.010},{"start":25.91956,"duration":0.28134,"confidence":0.010},{"start":26.20090,"duration":0.28184,"confidence":0.364},{"start":26.48273,"duration":0.28184,"confidence":0.364},{"start":26.76457,"duration":0.28157,"confidence":0.259},{"start":27.04614,"duration":0.28157,"confidence":0.259},{"start":27.32770,"duration":0.28307,"confidence":0.426},{"start":27.61077,"duration":0.28307,"confidence":0.426},{"start":27.89384,"duration":0.28153,"confidence":0.432},{"start":28.17538,"duration":0.28153,"confidence":0.432},{"start":28.45691,"duration":0.28152,"confidence":0.565},{"start":28.73843,"duration":0.28152,"confidence":0.565},{"start":29.01995,"duration":0.28253,"confidence":0.476},{"start":29.30248,"duration":0.28253,"confidence":0.476},{"start":29.58501,"duration":0.28328,"confidence":0.464},{"start":29.86829,"duration":0.28328,"confidence":0.464},{"start":30.15156,"duration":0.28277,"confidence":0.428},{"start":30.43434,"duration":0.28277,"confidence":0.428},{"start":30.71711,"duration":0.28406,"confidence":0.539},{"start":31.00117,"duration":0.28406,"confidence":0.539},{"start":31.28524,"duration":0.28332,"confidence":0.413},{"start":31.56856,"duration":0.28332,"confidence":0.413},{"start":31.85188,"duration":0.28285,"confidence":0.450},{"start":32.13473,"duration":0.28285,"confidence":0.450},{"start":32.41758,"duration":0.28263,"confidence":0.366},{"start":32.70021,"duration":0.28263,"confidence":0.366},{"start":32.98283,"duration":0.28367,"confidence":0.505},{"start":33.26650,"duration":0.28367,"confidence":0.505},{"start":33.55018,"duration":0.28320,"confidence":0.430},{"start":33.83337,"duration":0.28320,"confidence":0.430},{"start":34.11657,"duration":0.28299,"confidence":0.488},{"start":34.39956,"duration":0.28299,"confidence":0.488},{"start":34.68256,"duration":0.28176,"confidence":0.401},{"start":34.96432,"duration":0.28176,"confidence":0.401},{"start":35.24608,"duration":0.28307,"confidence":0.559},{"start":35.52915,"duration":0.28307,"confidence":0.559},{"start":35.81221,"duration":0.28360,"confidence":0.479},{"start":36.09582,"duration":0.28360,"confidence":0.479},{"start":36.37942,"duration":0.28312,"confidence":0.479},{"start":36.66254,"duration":0.28312,"confidence":0.479},{"start":36.94566,"duration":0.28238,"confidence":0.352},{"start":37.22804,"duration":0.28238,"confidence":0.352},{"start":37.51043,"duration":0.28342,"confidence":0.536},{"start":37.79384,"duration":0.28342,"confidence":0.536},{"start":38.07726,"duration":0.28367,"confidence":0.428},{"start":38.36094,"duration":0.28367,"confidence":0.428},{"start":38.64461,"duration":0.28317,"confidence":0.441},{"start":38.92777,"duration":0.28317,"confidence":0.441},{"start":39.21094,"duration":0.28214,"confidence":0.366},{"start":39.49308,"duration":0.28214,"confidence":0.366},{"start":39.77523,"duration":0.28288,"confidence":0.497},{"start":40.05811,"duration":0.28288,"confidence":0.497},{"start":40.34098,"duration":0.28336,"confidence":0.428},{"start":40.62434,"duration":0.28336,"confidence":0.428},{"start":40.90770,"duration":0.28305,"confidence":0.427},{"start":41.19075,"duration":0.28305,"confidence":0.427},{"start":41.47379,"duration":0.28249,"confidence":0.313},{"start":41.75628,"duration":0.28249,"confidence":0.313},{"start":42.03877,"duration":0.28291,"confidence":0.466},{"start":42.32168,"duration":0.28291,"confidence":0.466},{"start":42.60459,"duration":0.28283,"confidence":0.381},{"start":42.88743,"duration":0.28283,"confidence":0.381},{"start":43.17026,"duration":0.28374,"confidence":0.429},{"start":43.45401,"duration":0.28374,"confidence":0.429},{"start":43.73775,"duration":0.28237,"confidence":0.380},{"start":44.02012,"duration":0.28237,"confidence":0.380},{"start":44.30249,"duration":0.28302,"confidence":0.548},{"start":44.58551,"duration":0.28302,"confidence":0.548},{"start":44.86853,"duration":0.28319,"confidence":0.476},{"start":45.15172,"duration":0.28319,"confidence":0.476},{"start":45.43491,"duration":0.28336,"confidence":0.299},{"start":45.71827,"duration":0.28336,"confidence":0.299},{"start":46.00163,"duration":0.28228,"confidence":0.431},{"start":46.28391,"duration":0.28228,"confidence":0.431},{"start":46.56619,"duration":0.28374,"confidence":0.612},{"start":46.84993,"duration":0.28374,"confidence":0.612},{"start":47.13367,"duration":0.28244,"confidence":0.492},{"start":47.41610,"duration":0.28244,"confidence":0.492},{"start":47.69854,"duration":0.28370,"confidence":0.439},{"start":47.98224,"duration":0.28370,"confidence":0.439},{"start":48.26593,"duration":0.28268,"confidence":0.498},{"start":48.54861,"duration":0.28268,"confidence":0.498},{"start":48.83128,"duration":0.28342,"confidence":0.618},{"start":49.11471,"duration":0.28342,"confidence":0.618},{"start":49.39813,"duration":0.28240,"confidence":0.527},{"start":49.68052,"duration":0.28240,"confidence":0.527},{"start":49.96292,"duration":0.28341,"confidence":0.469},{"start":50.24633,"duration":0.28341,"confidence":0.469},{"start":50.52974,"duration":0.28265,"confidence":0.505},{"start":50.81239,"duration":0.28265,"confidence":0.505},{"start":51.09505,"duration":0.28367,"confidence":0.584},{"start":51.37872,"duration":0.28367,"confidence":0.584},{"start":51.66239,"duration":0.28292,"confidence":0.481},{"start":51.94531,"duration":0.28292,"confidence":0.481},{"start":52.22822,"duration":0.28292,"confidence":0.379},{"start":52.51115,"duration":0.28292,"confidence":0.379},{"start":52.79407,"duration":0.28294,"confidence":0.493},{"start":53.07700,"duration":0.28294,"confidence":0.493},{"start":53.35994,"duration":0.28396,"confidence":0.631},{"start":53.64390,"duration":0.28396,"confidence":0.631},{"start":53.92786,"duration":0.28269,"confidence":0.539},{"start":54.21055,"duration":0.28269,"confidence":0.539},{"start":54.49325,"duration":0.28295,"confidence":0.457},{"start":54.77619,"duration":0.28295,"confidence":0.457},{"start":55.05914,"duration":0.28243,"confidence":0.421},{"start":55.34157,"duration":0.28243,"confidence":0.421},{"start":55.62400,"duration":0.28318,"confidence":0.557},{"start":55.90717,"duration":0.28318,"confidence":0.557},{"start":56.19035,"duration":0.28341,"confidence":0.527},{"start":56.47376,"duration":0.28341,"confidence":0.527},{"start":56.75716,"duration":0.28262,"confidence":0.427},{"start":57.03978,"duration":0.28262,"confidence":0.427},{"start":57.32240,"duration":0.28259,"confidence":0.457},{"start":57.60499,"duration":0.28259,"confidence":0.457},{"start":57.88759,"duration":0.28383,"confidence":0.604},{"start":58.17142,"duration":0.28383,"confidence":0.604},{"start":58.45525,"duration":0.28330,"confidence":0.532},{"start":58.73854,"duration":0.28330,"confidence":0.532},{"start":59.02184,"duration":0.28300,"confidence":0.412},{"start":59.30484,"duration":0.28300,"confidence":0.412},{"start":59.58784,"duration":0.28246,"confidence":0.435},{"start":59.87030,"duration":0.28246,"confidence":0.435},{"start":60.15276,"duration":0.28319,"confidence":0.575},{"start":60.43595,"duration":0.28319,"confidence":0.575},{"start":60.71915,"duration":0.28341,"confidence":0.513},{"start":61.00256,"duration":0.28341,"confidence":0.513},{"start":61.28596,"duration":0.28287,"confidence":0.407},{"start":61.56883,"duration":0.28287,"confidence":0.407},{"start":61.85170,"duration":0.28283,"confidence":0.485},{"start":62.13452,"duration":0.28283,"confidence":0.485},{"start":62.41735,"duration":0.28279,"confidence":0.612},{"start":62.70014,"duration":0.28279,"confidence":0.612},{"start":62.98293,"duration":0.28402,"confidence":0.534},{"start":63.26695,"duration":0.28402,"confidence":0.534},{"start":63.55097,"duration":0.28425,"confidence":0.375},{"start":63.83522,"duration":0.28425,"confidence":0.375},{"start":64.11948,"duration":0.28321,"confidence":0.367},{"start":64.40269,"duration":0.28321,"confidence":0.367},{"start":64.68589,"duration":0.28345,"confidence":0.314},{"start":64.96934,"duration":0.28345,"confidence":0.314},{"start":65.25279,"duration":0.28369,"confidence":0.658},{"start":65.53648,"duration":0.28369,"confidence":0.658},{"start":65.82017,"duration":0.28419,"confidence":0.519},{"start":66.10437,"duration":0.28419,"confidence":0.519},{"start":66.38856,"duration":0.28267,"confidence":0.416},{"start":66.67122,"duration":0.28267,"confidence":0.416},{"start":66.95389,"duration":0.28242,"confidence":0.352},{"start":67.23631,"duration":0.28242,"confidence":0.352},{"start":67.51873,"duration":0.28242,"confidence":0.691},{"start":67.80115,"duration":0.28242,"confidence":0.691},{"start":68.08356,"duration":0.28342,"confidence":0.541},{"start":68.36699,"duration":0.28342,"confidence":0.541},{"start":68.65041,"duration":0.28266,"confidence":0.400},{"start":68.93307,"duration":0.28266,"confidence":0.400},{"start":69.21574,"duration":0.28265,"confidence":0.349},{"start":69.49839,"duration":0.28265,"confidence":0.349},{"start":69.78104,"duration":0.28213,"confidence":0.660},{"start":70.06317,"duration":0.28213,"confidence":0.660},{"start":70.34529,"duration":0.28387,"confidence":0.537},{"start":70.62917,"duration":0.28387,"confidence":0.537},{"start":70.91304,"duration":0.28281,"confidence":0.528},{"start":71.19585,"duration":0.28281,"confidence":0.528},{"start":71.47865,"duration":0.28250,"confidence":0.454},{"start":71.76115,"duration":0.28250,"confidence":0.454},{"start":72.04364,"duration":0.28115,"confidence":0.728},{"start":72.32480,"duration":0.28115,"confidence":0.728},{"start":72.60595,"duration":0.28133,"confidence":0.539},{"start":72.88728,"duration":0.28133,"confidence":0.539},{"start":73.16860,"duration":0.28272,"confidence":0.566},{"start":73.45132,"duration":0.28272,"confidence":0.566},{"start":73.73404,"duration":0.28257,"confidence":0.650},{"start":74.01661,"duration":0.28257,"confidence":0.650},{"start":74.29918,"duration":0.28192,"confidence":0.716},{"start":74.58110,"duration":0.28192,"confidence":0.716},{"start":74.86302,"duration":0.28152,"confidence":0.393},{"start":75.14454,"duration":0.28152,"confidence":0.393},{"start":75.42606,"duration":0.28263,"confidence":0.450},{"start":75.70869,"duration":0.28263,"confidence":0.450},{"start":75.99132,"duration":0.28351,"confidence":0.651},{"start":76.27483,"duration":0.28351,"confidence":0.651},{"start":76.55834,"duration":0.28363,"confidence":0.694},{"start":76.84197,"duration":0.28363,"confidence":0.694},{"start":77.12561,"duration":0.28179,"confidence":0.353},{"start":77.40740,"duration":0.28179,"confidence":0.353},{"start":77.68918,"duration":0.28250,"confidence":0.549},{"start":77.97168,"duration":0.28250,"confidence":0.549},{"start":78.25418,"duration":0.28321,"confidence":0.604},{"start":78.53738,"duration":0.28321,"confidence":0.604},{"start":78.82059,"duration":0.28421,"confidence":0.679},{"start":79.10480,"duration":0.28421,"confidence":0.679},{"start":79.38902,"duration":0.28397,"confidence":0.434},{"start":79.67298,"duration":0.28397,"confidence":0.434},{"start":79.95695,"duration":0.28327,"confidence":0.500},{"start":80.24022,"duration":0.28327,"confidence":0.500},{"start":80.52349,"duration":0.28358,"confidence":0.500},{"start":80.80708,"duration":0.28358,"confidence":0.500},{"start":81.09066,"duration":0.28469,"confidence":0.611},{"start":81.37535,"duration":0.28469,"confidence":0.611},{"start":81.66005,"duration":0.28485,"confidence":0.543},{"start":81.94490,"duration":0.28485,"confidence":0.543},{"start":82.22975,"duration":0.28349,"confidence":0.400},{"start":82.51324,"duration":0.28349,"confidence":0.400},{"start":82.79673,"duration":0.28342,"confidence":0.253},{"start":83.08016,"duration":0.28342,"confidence":0.253},{"start":83.36358,"duration":0.28563,"confidence":0.727},{"start":83.64921,"duration":0.28563,"confidence":0.727},{"start":83.93484,"duration":0.29009,"confidence":0.538},{"start":84.22493,"duration":0.29009,"confidence":0.538},{"start":84.51502,"duration":0.29405,"confidence":0.366},{"start":84.80906,"duration":0.29405,"confidence":0.366},{"start":85.10311,"duration":0.29317,"confidence":0.331},{"start":85.39628,"duration":0.29317,"confidence":0.331},{"start":85.68945,"duration":0.29225,"confidence":0.372},{"start":85.98170,"duration":0.29225,"confidence":0.372},{"start":86.27395,"duration":0.29436,"confidence":0.163},{"start":86.56831,"duration":0.29436,"confidence":0.163},{"start":86.86267,"duration":0.29365,"confidence":0.324},{"start":87.15632,"duration":0.29365,"confidence":0.324},{"start":87.44997,"duration":0.29042,"confidence":0.352},{"start":87.74040,"duration":0.29042,"confidence":0.352},{"start":88.03082,"duration":0.28666,"confidence":0.345},{"start":88.31748,"duration":0.28666,"confidence":0.345},{"start":88.60414,"duration":0.28364,"confidence":0.174},{"start":88.88778,"duration":0.28364,"confidence":0.174},{"start":89.17142,"duration":0.28265,"confidence":0.208},{"start":89.45407,"duration":0.28265,"confidence":0.208},{"start":89.73672,"duration":0.28215,"confidence":0.202},{"start":90.01886,"duration":0.28215,"confidence":0.202},{"start":90.30101,"duration":0.28215,"confidence":0.384},{"start":90.58316,"duration":0.28215,"confidence":0.384},{"start":90.86532,"duration":0.28317,"confidence":0.303},{"start":91.14848,"duration":0.28317,"confidence":0.303},{"start":91.43165,"duration":0.28342,"confidence":0.375},{"start":91.71507,"duration":0.28342,"confidence":0.375},{"start":91.99849,"duration":0.28241,"confidence":0.542},{"start":92.28090,"duration":0.28241,"confidence":0.542},{"start":92.56331,"duration":0.28216,"confidence":0.654},{"start":92.84547,"duration":0.28216,"confidence":0.654},{"start":93.12762,"duration":0.28367,"confidence":0.703},{"start":93.41129,"duration":0.28367,"confidence":0.703},{"start":93.69496,"duration":0.28392,"confidence":0.672},{"start":93.97888,"duration":0.28392,"confidence":0.672},{"start":94.26280,"duration":0.28214,"confidence":0.657},{"start":94.54494,"duration":0.28214,"confidence":0.657},{"start":94.82709,"duration":0.28264,"confidence":0.671},{"start":95.10973,"duration":0.28264,"confidence":0.671},{"start":95.39237,"duration":0.28339,"confidence":0.721},{"start":95.67577,"duration":0.28339,"confidence":0.721},{"start":95.95916,"duration":0.28363,"confidence":0.675},{"start":96.24279,"duration":0.28363,"confidence":0.675},{"start":96.52643,"duration":0.28261,"confidence":0.632},{"start":96.80903,"duration":0.28261,"confidence":0.632},{"start":97.09164,"duration":0.28183,"confidence":0.686},{"start":97.37348,"duration":0.28183,"confidence":0.686},{"start":97.65531,"duration":0.28257,"confidence":0.726},{"start":97.93788,"duration":0.28257,"confidence":0.726},{"start":98.22045,"duration":0.28356,"confidence":0.670},{"start":98.50401,"duration":0.28356,"confidence":0.670},{"start":98.78757,"duration":0.28252,"confidence":0.654},{"start":99.07009,"duration":0.28252,"confidence":0.654},{"start":99.35262,"duration":0.28220,"confidence":0.533},{"start":99.63482,"duration":0.28220,"confidence":0.533},{"start":99.91702,"duration":0.28260,"confidence":0.345},{"start":100.19962,"duration":0.28260,"confidence":0.345},{"start":100.48221,"duration":0.28274,"confidence":0.342},{"start":100.76495,"duration":0.28274,"confidence":0.342},{"start":101.04769,"duration":0.28389,"confidence":0.543},{"start":101.33158,"duration":0.28389,"confidence":0.543},{"start":101.61548,"duration":0.28354,"confidence":0.685},{"start":101.89902,"duration":0.28354,"confidence":0.685},{"start":102.18255,"duration":0.28293,"confidence":0.623},{"start":102.46548,"duration":0.28293,"confidence":0.623},{"start":102.74841,"duration":0.28334,"confidence":0.628},{"start":103.03175,"duration":0.28334,"confidence":0.628},{"start":103.31509,"duration":0.28303,"confidence":0.706},{"start":103.59812,"duration":0.28303,"confidence":0.706},{"start":103.88115,"duration":0.28352,"confidence":0.740},{"start":104.16467,"duration":0.28352,"confidence":0.740},{"start":104.44819,"duration":0.28352,"confidence":0.595},{"start":104.73171,"duration":0.28352,"confidence":0.595},{"start":105.01523,"duration":0.28275,"confidence":0.589},{"start":105.29798,"duration":0.28275,"confidence":0.589},{"start":105.58074,"duration":0.28275,"confidence":0.709},{"start":105.86349,"duration":0.28275,"confidence":0.709},{"start":106.14624,"duration":0.28401,"confidence":0.740},{"start":106.43025,"duration":0.28401,"confidence":0.740},{"start":106.71426,"duration":0.28401,"confidence":0.640},{"start":106.99827,"duration":0.28401,"confidence":0.640},{"start":107.28228,"duration":0.28451,"confidence":0.626},{"start":107.56680,"duration":0.28451,"confidence":0.626},{"start":107.85131,"duration":0.28350,"confidence":0.717},{"start":108.13481,"duration":0.28350,"confidence":0.717},{"start":108.41832,"duration":0.28401,"confidence":0.696},{"start":108.70233,"duration":0.28401,"confidence":0.696},{"start":108.98634,"duration":0.28350,"confidence":0.223},{"start":109.26984,"duration":0.28350,"confidence":0.223},{"start":109.55334,"duration":0.28426,"confidence":0.178},{"start":109.83760,"duration":0.28426,"confidence":0.178},{"start":110.12186,"duration":0.28224,"confidence":0.233},{"start":110.40410,"duration":0.28224,"confidence":0.233},{"start":110.68634,"duration":0.28224,"confidence":0.216},{"start":110.96857,"duration":0.28224,"confidence":0.216},{"start":111.25081,"duration":0.28274,"confidence":0.153},{"start":111.53355,"duration":0.28274,"confidence":0.153},{"start":111.81629,"duration":0.28375,"confidence":0.188},{"start":112.10004,"duration":0.28375,"confidence":0.188},{"start":112.38379,"duration":0.28324,"confidence":0.295},{"start":112.66703,"duration":0.28324,"confidence":0.295},{"start":112.95027,"duration":0.28324,"confidence":0.356},{"start":113.23351,"duration":0.28324,"confidence":0.356},{"start":113.51675,"duration":0.28223,"confidence":0.296},{"start":113.79898,"duration":0.28223,"confidence":0.296},{"start":114.08121,"duration":0.28475,"confidence":0.207},{"start":114.36596,"duration":0.28475,"confidence":0.207},{"start":114.65071,"duration":0.28323,"confidence":0.277},{"start":114.93395,"duration":0.28323,"confidence":0.277},{"start":115.21718,"duration":0.28197,"confidence":0.260},{"start":115.49915,"duration":0.28197,"confidence":0.260},{"start":115.78111,"duration":0.28197,"confidence":0.179},{"start":116.06308,"duration":0.28197,"confidence":0.179},{"start":116.34505,"duration":0.28348,"confidence":0.133},{"start":116.62852,"duration":0.28348,"confidence":0.133},{"start":116.91200,"duration":0.28347,"confidence":0.133},{"start":117.19547,"duration":0.28347,"confidence":0.133},{"start":117.47894,"duration":0.28271,"confidence":0.187},{"start":117.76165,"duration":0.28271,"confidence":0.187},{"start":118.04436,"duration":0.28144,"confidence":0.222},{"start":118.32581,"duration":0.28144,"confidence":0.222},{"start":118.60725,"duration":0.28397,"confidence":0.188},{"start":118.89122,"duration":0.28397,"confidence":0.188},{"start":119.17518,"duration":0.28321,"confidence":0.182},{"start":119.45839,"duration":0.28321,"confidence":0.182},{"start":119.74160,"duration":0.28320,"confidence":0.191},{"start":120.02480,"duration":0.28320,"confidence":0.191},{"start":120.30801,"duration":0.28270,"confidence":0.159},{"start":120.59071,"duration":0.28270,"confidence":0.159},{"start":120.87340,"duration":0.28421,"confidence":0.194},{"start":121.15761,"duration":0.28421,"confidence":0.194},{"start":121.44182,"duration":0.28421,"confidence":0.228},{"start":121.72603,"duration":0.28421,"confidence":0.228},{"start":122.01024,"duration":0.28294,"confidence":0.281},{"start":122.29319,"duration":0.28294,"confidence":0.281},{"start":122.57613,"duration":0.28193,"confidence":0.256},{"start":122.85806,"duration":0.28193,"confidence":0.256},{"start":123.14000,"duration":0.28395,"confidence":0.125},{"start":123.42394,"duration":0.28395,"confidence":0.125},{"start":123.70789,"duration":0.28193,"confidence":0.125},{"start":123.98982,"duration":0.28193,"confidence":0.125},{"start":124.27175,"duration":0.28193,"confidence":0.176},{"start":124.55367,"duration":0.28193,"confidence":0.176},{"start":124.83560,"duration":0.28217,"confidence":0.267},{"start":125.11777,"duration":0.28217,"confidence":0.267},{"start":125.39995,"duration":0.28243,"confidence":0.251},{"start":125.68237,"duration":0.28243,"confidence":0.251},{"start":125.96480,"duration":0.28268,"confidence":0.383},{"start":126.24748,"duration":0.28268,"confidence":0.383},{"start":126.53015,"duration":0.28293,"confidence":0.522},{"start":126.81308,"duration":0.28293,"confidence":0.522},{"start":127.09601,"duration":0.28192,"confidence":0.179},{"start":127.37793,"duration":0.28192,"confidence":0.179},{"start":127.65985,"duration":0.28419,"confidence":0.276},{"start":127.94404,"duration":0.28419,"confidence":0.276},{"start":128.22822,"duration":0.28268,"confidence":0.380},{"start":128.51090,"duration":0.28268,"confidence":0.380},{"start":128.79358,"duration":0.28217,"confidence":0.435},{"start":129.07575,"duration":0.28217,"confidence":0.435},{"start":129.35792,"duration":0.28242,"confidence":0.268},{"start":129.64034,"duration":0.28242,"confidence":0.268},{"start":129.92277,"duration":0.28343,"confidence":0.291},{"start":130.20620,"duration":0.28343,"confidence":0.291},{"start":130.48964,"duration":0.28369,"confidence":0.453},{"start":130.77333,"duration":0.28369,"confidence":0.453},{"start":131.05701,"duration":0.28293,"confidence":0.509},{"start":131.33994,"duration":0.28293,"confidence":0.509},{"start":131.62287,"duration":0.28267,"confidence":0.328},{"start":131.90554,"duration":0.28267,"confidence":0.328},{"start":132.18822,"duration":0.28419,"confidence":0.215},{"start":132.47241,"duration":0.28419,"confidence":0.215},{"start":132.75660,"duration":0.28267,"confidence":0.328},{"start":133.03927,"duration":0.28267,"confidence":0.328},{"start":133.32195,"duration":0.28293,"confidence":0.422},{"start":133.60487,"duration":0.28293,"confidence":0.422},{"start":133.88780,"duration":0.28368,"confidence":0.259},{"start":134.17149,"duration":0.28368,"confidence":0.259},{"start":134.45517,"duration":0.28344,"confidence":0.294},{"start":134.73861,"duration":0.28344,"confidence":0.294},{"start":135.02204,"duration":0.28293,"confidence":0.417},{"start":135.30498,"duration":0.28293,"confidence":0.417},{"start":135.58791,"duration":0.28269,"confidence":0.520},{"start":135.87060,"duration":0.28269,"confidence":0.520},{"start":136.15328,"duration":0.28219,"confidence":0.303},{"start":136.43547,"duration":0.28219,"confidence":0.303},{"start":136.71765,"duration":0.28320,"confidence":0.261},{"start":137.00085,"duration":0.28320,"confidence":0.261},{"start":137.28405,"duration":0.28270,"confidence":0.377},{"start":137.56675,"duration":0.28270,"confidence":0.377},{"start":137.84945,"duration":0.28270,"confidence":0.426},{"start":138.13215,"duration":0.28270,"confidence":0.426},{"start":138.41486,"duration":0.28245,"confidence":0.248},{"start":138.69731,"duration":0.28245,"confidence":0.248},{"start":138.97977,"duration":0.28347,"confidence":0.254},{"start":139.26323,"duration":0.28347,"confidence":0.254},{"start":139.54670,"duration":0.28372,"confidence":0.433},{"start":139.83042,"duration":0.28372,"confidence":0.433},{"start":140.11414,"duration":0.28321,"confidence":0.526},{"start":140.39735,"duration":0.28321,"confidence":0.526},{"start":140.68056,"duration":0.28296,"confidence":0.330},{"start":140.96352,"duration":0.28296,"confidence":0.330},{"start":141.24648,"duration":0.28422,"confidence":0.297},{"start":141.53070,"duration":0.28422,"confidence":0.297},{"start":141.81492,"duration":0.28320,"confidence":0.414},{"start":142.09812,"duration":0.28320,"confidence":0.414},{"start":142.38132,"duration":0.28270,"confidence":0.460},{"start":142.66402,"duration":0.28270,"confidence":0.460},{"start":142.94672,"duration":0.28269,"confidence":0.252},{"start":143.22941,"duration":0.28269,"confidence":0.252},{"start":143.51211,"duration":0.28269,"confidence":0.193},{"start":143.79480,"duration":0.28269,"confidence":0.193},{"start":144.07749,"duration":0.28269,"confidence":0.303},{"start":144.36017,"duration":0.28269,"confidence":0.303},{"start":144.64286,"duration":0.28268,"confidence":0.343},{"start":144.92554,"duration":0.28268,"confidence":0.343},{"start":145.20822,"duration":0.28217,"confidence":0.280},{"start":145.49039,"duration":0.28217,"confidence":0.280},{"start":145.77256,"duration":0.28342,"confidence":0.257},{"start":146.05598,"duration":0.28342,"confidence":0.257},{"start":146.33940,"duration":0.28291,"confidence":0.364},{"start":146.62230,"duration":0.28291,"confidence":0.364},{"start":146.90521,"duration":0.28290,"confidence":0.428},{"start":147.18810,"duration":0.28290,"confidence":0.428},{"start":147.47100,"duration":0.28288,"confidence":0.228},{"start":147.75388,"duration":0.28288,"confidence":0.228},{"start":148.03677,"duration":0.28388,"confidence":0.290},{"start":148.32065,"duration":0.28388,"confidence":0.290},{"start":148.60453,"duration":0.28311,"confidence":0.442},{"start":148.88764,"duration":0.28311,"confidence":0.442},{"start":149.17075,"duration":0.28285,"confidence":0.520},{"start":149.45361,"duration":0.28285,"confidence":0.520},{"start":149.73646,"duration":0.28209,"confidence":0.297},{"start":150.01855,"duration":0.28209,"confidence":0.297},{"start":150.30064,"duration":0.28234,"confidence":0.253},{"start":150.58298,"duration":0.28234,"confidence":0.253},{"start":150.86532,"duration":0.28259,"confidence":0.373},{"start":151.14790,"duration":0.28259,"confidence":0.373},{"start":151.43049,"duration":0.28284,"confidence":0.427},{"start":151.71333,"duration":0.28284,"confidence":0.427},{"start":151.99617,"duration":0.28259,"confidence":0.243},{"start":152.27876,"duration":0.28259,"confidence":0.243},{"start":152.56135,"duration":0.28387,"confidence":0.286},{"start":152.84522,"duration":0.28387,"confidence":0.286},{"start":153.12909,"duration":0.28314,"confidence":0.470},{"start":153.41223,"duration":0.28314,"confidence":0.470},{"start":153.69537,"duration":0.28291,"confidence":0.532},{"start":153.97827,"duration":0.28291,"confidence":0.532},{"start":154.26118,"duration":0.28420,"confidence":0.279},{"start":154.54538,"duration":0.28420,"confidence":0.279},{"start":154.82958,"duration":0.28448,"confidence":0.232},{"start":155.11406,"duration":0.28448,"confidence":0.232},{"start":155.39855,"duration":0.28276,"confidence":0.368},{"start":155.68130,"duration":0.28276,"confidence":0.368},{"start":155.96406,"duration":0.28254,"confidence":0.454},{"start":156.24660,"duration":0.28254,"confidence":0.454},{"start":156.52914,"duration":0.28232,"confidence":0.265},{"start":156.81146,"duration":0.28232,"confidence":0.265},{"start":157.09378,"duration":0.28336,"confidence":0.289},{"start":157.37714,"duration":0.28336,"confidence":0.289},{"start":157.66049,"duration":0.28313,"confidence":0.437},{"start":157.94362,"duration":0.28313,"confidence":0.437},{"start":158.22675,"duration":0.28214,"confidence":0.518},{"start":158.50889,"duration":0.28214,"confidence":0.518},{"start":158.79103,"duration":0.28241,"confidence":0.320},{"start":159.07345,"duration":0.28241,"confidence":0.320},{"start":159.35586,"duration":0.28343,"confidence":0.247},{"start":159.63929,"duration":0.28343,"confidence":0.247},{"start":159.92272,"duration":0.28293,"confidence":0.350},{"start":160.20565,"duration":0.28293,"confidence":0.350},{"start":160.48859,"duration":0.28269,"confidence":0.426},{"start":160.77127,"duration":0.28269,"confidence":0.426},{"start":161.05396,"duration":0.28244,"confidence":0.240},{"start":161.33639,"duration":0.28244,"confidence":0.240},{"start":161.61883,"duration":0.28370,"confidence":0.166},{"start":161.90253,"duration":0.28370,"confidence":0.166},{"start":162.18624,"duration":0.28421,"confidence":0.220},{"start":162.47045,"duration":0.28421,"confidence":0.220},{"start":162.75466,"duration":0.28270,"confidence":0.137},{"start":163.03736,"duration":0.28270,"confidence":0.137},{"start":163.32006,"duration":0.28296,"confidence":0.327},{"start":163.60302,"duration":0.28296,"confidence":0.327},{"start":163.88597,"duration":0.28346,"confidence":0.600},{"start":164.16944,"duration":0.28346,"confidence":0.600},{"start":164.45290,"duration":0.28397,"confidence":0.735},{"start":164.73687,"duration":0.28397,"confidence":0.735},{"start":165.02085,"duration":0.28322,"confidence":0.776},{"start":165.30406,"duration":0.28322,"confidence":0.776},{"start":165.58728,"duration":0.28246,"confidence":0.808},{"start":165.86974,"duration":0.28246,"confidence":0.808},{"start":166.15220,"duration":0.28221,"confidence":0.803},{"start":166.43441,"duration":0.28221,"confidence":0.803},{"start":166.71662,"duration":0.28322,"confidence":0.827},{"start":166.99985,"duration":0.28322,"confidence":0.827},{"start":167.28307,"duration":0.28298,"confidence":0.774},{"start":167.56605,"duration":0.28298,"confidence":0.774},{"start":167.84903,"duration":0.28248,"confidence":0.824},{"start":168.13150,"duration":0.28248,"confidence":0.824},{"start":168.41398,"duration":0.28223,"confidence":0.823},{"start":168.69621,"duration":0.28223,"confidence":0.823},{"start":168.97844,"duration":0.28300,"confidence":0.841},{"start":169.26144,"duration":0.28300,"confidence":0.841},{"start":169.54444,"duration":0.28301,"confidence":0.787},{"start":169.82745,"duration":0.28301,"confidence":0.787},{"start":170.11046,"duration":0.28277,"confidence":0.815},{"start":170.39323,"duration":0.28277,"confidence":0.815},{"start":170.67600,"duration":0.28304,"confidence":0.800},{"start":170.95903,"duration":0.28304,"confidence":0.800},{"start":171.24207,"duration":0.28330,"confidence":0.835},{"start":171.52537,"duration":0.28330,"confidence":0.835},{"start":171.80867,"duration":0.28332,"confidence":0.778},{"start":172.09199,"duration":0.28332,"confidence":0.778},{"start":172.37531,"duration":0.28308,"confidence":0.815},{"start":172.65839,"duration":0.28308,"confidence":0.815},{"start":172.94146,"duration":0.28335,"confidence":0.809},{"start":173.22481,"duration":0.28335,"confidence":0.809},{"start":173.50816,"duration":0.28311,"confidence":0.825},{"start":173.79126,"duration":0.28311,"confidence":0.825},{"start":174.07437,"duration":0.28312,"confidence":0.743},{"start":174.35749,"duration":0.28312,"confidence":0.743},{"start":174.64060,"duration":0.28262,"confidence":0.800},{"start":174.92323,"duration":0.28262,"confidence":0.800},{"start":175.20585,"duration":0.28288,"confidence":0.810},{"start":175.48873,"duration":0.28288,"confidence":0.810},{"start":175.77162,"duration":0.28314,"confidence":0.836},{"start":176.05476,"duration":0.28314,"confidence":0.836},{"start":176.33791,"duration":0.28290,"confidence":0.773},{"start":176.62080,"duration":0.28290,"confidence":0.773},{"start":176.90370,"duration":0.28290,"confidence":0.813},{"start":177.18660,"duration":0.28290,"confidence":0.813},{"start":177.46950,"duration":0.28291,"confidence":0.819},{"start":177.75241,"duration":0.28291,"confidence":0.819},{"start":178.03532,"duration":0.28341,"confidence":0.853},{"start":178.31873,"duration":0.28341,"confidence":0.853},{"start":178.60214,"duration":0.28316,"confidence":0.805},{"start":178.88531,"duration":0.28316,"confidence":0.805},{"start":179.16847,"duration":0.28266,"confidence":0.810},{"start":179.45114,"duration":0.28266,"confidence":0.810},{"start":179.73380,"duration":0.28292,"confidence":0.821},{"start":180.01672,"duration":0.28292,"confidence":0.821},{"start":180.29964,"duration":0.28394,"confidence":0.838},{"start":180.58358,"duration":0.28394,"confidence":0.838},{"start":180.86752,"duration":0.28319,"confidence":0.778},{"start":181.15071,"duration":0.28319,"confidence":0.778},{"start":181.43390,"duration":0.28294,"confidence":0.814},{"start":181.71684,"duration":0.28294,"confidence":0.814},{"start":181.99978,"duration":0.28270,"confidence":0.781},{"start":182.28248,"duration":0.28270,"confidence":0.781},{"start":182.56517,"duration":0.28347,"confidence":0.814},{"start":182.84864,"duration":0.28347,"confidence":0.814},{"start":183.13211,"duration":0.28322,"confidence":0.715},{"start":183.41533,"duration":0.28322,"confidence":0.715},{"start":183.69855,"duration":0.28298,"confidence":0.826},{"start":183.98152,"duration":0.28298,"confidence":0.826},{"start":184.26450,"duration":0.28223,"confidence":0.853},{"start":184.54672,"duration":0.28223,"confidence":0.853},{"start":184.82895,"duration":0.28299,"confidence":0.873},{"start":185.11194,"duration":0.28299,"confidence":0.873},{"start":185.39494,"duration":0.28326,"confidence":0.882},{"start":185.67819,"duration":0.28326,"confidence":0.882},{"start":185.96145,"duration":0.28301,"confidence":0.860},{"start":186.24446,"duration":0.28301,"confidence":0.860},{"start":186.52747,"duration":0.28252,"confidence":0.867},{"start":186.80999,"duration":0.28252,"confidence":0.867},{"start":187.09251,"duration":0.28304,"confidence":0.864},{"start":187.37554,"duration":0.28304,"confidence":0.864},{"start":187.65858,"duration":0.28305,"confidence":0.861},{"start":187.94163,"duration":0.28305,"confidence":0.861},{"start":188.22468,"duration":0.28332,"confidence":0.847},{"start":188.50800,"duration":0.28332,"confidence":0.847},{"start":188.79132,"duration":0.28308,"confidence":0.869},{"start":189.07440,"duration":0.28308,"confidence":0.869},{"start":189.35748,"duration":0.28284,"confidence":0.868},{"start":189.64033,"duration":0.28284,"confidence":0.868},{"start":189.92317,"duration":0.28286,"confidence":0.879},{"start":190.20603,"duration":0.28286,"confidence":0.879},{"start":190.48889,"duration":0.28287,"confidence":0.872},{"start":190.77177,"duration":0.28287,"confidence":0.872},{"start":191.05464,"duration":0.28289,"confidence":0.876},{"start":191.33753,"duration":0.28289,"confidence":0.876},{"start":191.62041,"duration":0.28315,"confidence":0.882},{"start":191.90356,"duration":0.28315,"confidence":0.882},{"start":192.18671,"duration":0.28265,"confidence":0.867},{"start":192.46937,"duration":0.28265,"confidence":0.867},{"start":192.75202,"duration":0.28241,"confidence":0.837},{"start":193.03443,"duration":0.28241,"confidence":0.837},{"start":193.31684,"duration":0.28292,"confidence":0.864},{"start":193.59976,"duration":0.28292,"confidence":0.864},{"start":193.88267,"duration":0.28317,"confidence":0.884},{"start":194.16585,"duration":0.28317,"confidence":0.884},{"start":194.44902,"duration":0.28293,"confidence":0.873},{"start":194.73195,"duration":0.28293,"confidence":0.873},{"start":195.01487,"duration":0.28293,"confidence":0.860},{"start":195.29780,"duration":0.28293,"confidence":0.860},{"start":195.58073,"duration":0.28318,"confidence":0.861},{"start":195.86391,"duration":0.28318,"confidence":0.861},{"start":196.14709,"duration":0.28344,"confidence":0.853},{"start":196.43053,"duration":0.28344,"confidence":0.853},{"start":196.71397,"duration":0.28319,"confidence":0.862},{"start":196.99715,"duration":0.28319,"confidence":0.862},{"start":197.28034,"duration":0.28293,"confidence":0.828},{"start":197.56327,"duration":0.28293,"confidence":0.828},{"start":197.84621,"duration":0.28344,"confidence":0.863},{"start":198.12965,"duration":0.28344,"confidence":0.863},{"start":198.41309,"duration":0.28344,"confidence":0.863},{"start":198.69653,"duration":0.28344,"confidence":0.863},{"start":198.97997,"duration":0.28344,"confidence":0.812},{"start":199.26341,"duration":0.28344,"confidence":0.812},{"start":199.54686,"duration":0.28319,"confidence":0.649},{"start":199.83005,"duration":0.28319,"confidence":0.649},{"start":200.11324,"duration":0.28269,"confidence":0.611},{"start":200.39592,"duration":0.28269,"confidence":0.611},{"start":200.67861,"duration":0.28370,"confidence":0.747},{"start":200.96231,"duration":0.28370,"confidence":0.747},{"start":201.24601,"duration":0.28295,"confidence":0.897},{"start":201.52896,"duration":0.28295,"confidence":0.897},{"start":201.81191,"duration":0.28194,"confidence":0.670},{"start":202.09384,"duration":0.28194,"confidence":0.670},{"start":202.37578,"duration":0.28270,"confidence":0.671},{"start":202.65848,"duration":0.28270,"confidence":0.671},{"start":202.94118,"duration":0.28347,"confidence":0.631},{"start":203.22465,"duration":0.28347,"confidence":0.631},{"start":203.50812,"duration":0.28221,"confidence":0.455},{"start":203.79033,"duration":0.28221,"confidence":0.455},{"start":204.07254,"duration":0.28272,"confidence":0.614},{"start":204.35526,"duration":0.28272,"confidence":0.614},{"start":204.63799,"duration":0.28273,"confidence":0.648},{"start":204.92072,"duration":0.28273,"confidence":0.648},{"start":205.20345,"duration":0.28350,"confidence":0.566},{"start":205.48696,"duration":0.28350,"confidence":0.566},{"start":205.77046,"duration":0.28351,"confidence":0.454},{"start":206.05397,"duration":0.28351,"confidence":0.454},{"start":206.33748,"duration":0.28251,"confidence":0.615},{"start":206.61998,"duration":0.28251,"confidence":0.615},{"start":206.90249,"duration":0.28226,"confidence":0.679},{"start":207.18475,"duration":0.28226,"confidence":0.679},{"start":207.46701,"duration":0.28379,"confidence":0.581},{"start":207.75080,"duration":0.28379,"confidence":0.581},{"start":208.03458,"duration":0.28379,"confidence":0.429},{"start":208.31837,"duration":0.28379,"confidence":0.429},{"start":208.60216,"duration":0.28278,"confidence":0.581},{"start":208.88494,"duration":0.28278,"confidence":0.581},{"start":209.16771,"duration":0.28253,"confidence":0.625},{"start":209.45024,"duration":0.28253,"confidence":0.625},{"start":209.73277,"duration":0.28379,"confidence":0.648},{"start":210.01656,"duration":0.28379,"confidence":0.648},{"start":210.30036,"duration":0.28405,"confidence":0.613},{"start":210.58441,"duration":0.28405,"confidence":0.613},{"start":210.86846,"duration":0.28278,"confidence":0.770},{"start":211.15124,"duration":0.28278,"confidence":0.770},{"start":211.43402,"duration":0.28253,"confidence":0.859},{"start":211.71655,"duration":0.28253,"confidence":0.859},{"start":211.99907,"duration":0.28252,"confidence":0.850},{"start":212.28159,"duration":0.28252,"confidence":0.850},{"start":212.56412,"duration":0.28328,"confidence":0.849},{"start":212.84739,"duration":0.28328,"confidence":0.849},{"start":213.13067,"duration":0.28277,"confidence":0.795},{"start":213.41344,"duration":0.28277,"confidence":0.795},{"start":213.69621,"duration":0.28225,"confidence":0.857},{"start":213.97846,"duration":0.28225,"confidence":0.857},{"start":214.26071,"duration":0.28301,"confidence":0.828},{"start":214.54372,"duration":0.28301,"confidence":0.828},{"start":214.82673,"duration":0.28351,"confidence":0.814},{"start":215.11023,"duration":0.28351,"confidence":0.814},{"start":215.39374,"duration":0.28274,"confidence":0.739},{"start":215.67648,"duration":0.28274,"confidence":0.739},{"start":215.95922,"duration":0.28324,"confidence":0.828},{"start":216.24246,"duration":0.28324,"confidence":0.828},{"start":216.52570,"duration":0.28298,"confidence":0.796},{"start":216.80868,"duration":0.28298,"confidence":0.796},{"start":217.09167,"duration":0.28349,"confidence":0.788},{"start":217.37515,"duration":0.28349,"confidence":0.788},{"start":217.65864,"duration":0.28348,"confidence":0.787},{"start":217.94212,"duration":0.28348,"confidence":0.787},{"start":218.22560,"duration":0.28272,"confidence":0.837},{"start":218.50832,"duration":0.28272,"confidence":0.837},{"start":218.79104,"duration":0.28323,"confidence":0.809},{"start":219.07427,"duration":0.28323,"confidence":0.809},{"start":219.35750,"duration":0.28374,"confidence":0.777},{"start":219.64123,"duration":0.28374,"confidence":0.777},{"start":219.92497,"duration":0.28247,"confidence":0.684},{"start":220.20744,"duration":0.28247,"confidence":0.684},{"start":220.48991,"duration":0.28248,"confidence":0.641},{"start":220.77239,"duration":0.28248,"confidence":0.641},{"start":221.05486,"duration":0.28375,"confidence":0.582},{"start":221.33862,"duration":0.28375,"confidence":0.582},{"start":221.62237,"duration":0.28275,"confidence":0.497},{"start":221.90511,"duration":0.28275,"confidence":0.497},{"start":222.18786,"duration":0.28225,"confidence":0.634},{"start":222.47011,"duration":0.28225,"confidence":0.634},{"start":222.75236,"duration":0.28277,"confidence":0.684},{"start":223.03513,"duration":0.28277,"confidence":0.684},{"start":223.31790,"duration":0.28328,"confidence":0.577},{"start":223.60118,"duration":0.28328,"confidence":0.577},{"start":223.88447,"duration":0.28304,"confidence":0.444},{"start":224.16751,"duration":0.28304,"confidence":0.444},{"start":224.45055,"duration":0.28254,"confidence":0.587},{"start":224.73310,"duration":0.28254,"confidence":0.587},{"start":225.01564,"duration":0.28255,"confidence":0.649},{"start":225.29819,"duration":0.28255,"confidence":0.649},{"start":225.58074,"duration":0.28331,"confidence":0.575},{"start":225.86405,"duration":0.28331,"confidence":0.575},{"start":226.14736,"duration":0.28408,"confidence":0.430},{"start":226.43144,"duration":0.28408,"confidence":0.430},{"start":226.71552,"duration":0.28282,"confidence":0.535},{"start":226.99833,"duration":0.28282,"confidence":0.535},{"start":227.28115,"duration":0.28231,"confidence":0.594},{"start":227.56346,"duration":0.28231,"confidence":0.594},{"start":227.84576,"duration":0.28383,"confidence":0.616},{"start":228.12959,"duration":0.28383,"confidence":0.616},{"start":228.41342,"duration":0.28408,"confidence":0.609},{"start":228.69750,"duration":0.28408,"confidence":0.609},{"start":228.98158,"duration":0.28231,"confidence":0.753},{"start":229.26389,"duration":0.28231,"confidence":0.753},{"start":229.54620,"duration":0.28231,"confidence":0.842},{"start":229.82851,"duration":0.28231,"confidence":0.842},{"start":230.11081,"duration":0.28307,"confidence":0.833},{"start":230.39388,"duration":0.28307,"confidence":0.833},{"start":230.67695,"duration":0.28332,"confidence":0.828},{"start":230.96026,"duration":0.28332,"confidence":0.828},{"start":231.24358,"duration":0.28281,"confidence":0.787},{"start":231.52639,"duration":0.28281,"confidence":0.787},{"start":231.80920,"duration":0.28230,"confidence":0.848},{"start":232.09150,"duration":0.28230,"confidence":0.848},{"start":232.37380,"duration":0.28306,"confidence":0.838},{"start":232.65686,"duration":0.28306,"confidence":0.838},{"start":232.93992,"duration":0.28356,"confidence":0.841},{"start":233.22348,"duration":0.28356,"confidence":0.841},{"start":233.50704,"duration":0.28305,"confidence":0.746},{"start":233.79009,"duration":0.28305,"confidence":0.746},{"start":234.07314,"duration":0.28279,"confidence":0.811},{"start":234.35593,"duration":0.28279,"confidence":0.811},{"start":234.63872,"duration":0.28303,"confidence":0.782},{"start":234.92174,"duration":0.28303,"confidence":0.782},{"start":235.20477,"duration":0.28353,"confidence":0.772},{"start":235.48830,"duration":0.28353,"confidence":0.772},{"start":235.77183,"duration":0.28377,"confidence":0.760},{"start":236.05560,"duration":0.28377,"confidence":0.760},{"start":236.33937,"duration":0.28350,"confidence":0.832},{"start":236.62287,"duration":0.28350,"confidence":0.832},{"start":236.90637,"duration":0.28349,"confidence":0.823},{"start":237.18986,"duration":0.28349,"confidence":0.823},{"start":237.47335,"duration":0.28347,"confidence":0.780},{"start":237.75682,"duration":0.28347,"confidence":0.780},{"start":238.04030,"duration":0.28345,"confidence":0.641},{"start":238.32375,"duration":0.28345,"confidence":0.641},{"start":238.60721,"duration":0.28369,"confidence":0.505},{"start":238.89090,"duration":0.28369,"confidence":0.505},{"start":239.17459,"duration":0.28291,"confidence":0.685},{"start":239.45749,"duration":0.28291,"confidence":0.685},{"start":239.74040,"duration":0.28212,"confidence":0.675},{"start":240.02252,"duration":0.28212,"confidence":0.675},{"start":240.30464,"duration":0.28286,"confidence":0.622},{"start":240.58750,"duration":0.28286,"confidence":0.622},{"start":240.87036,"duration":0.28335,"confidence":0.514},{"start":241.15371,"duration":0.28335,"confidence":0.514},{"start":241.43705,"duration":0.28358,"confidence":0.702},{"start":241.72063,"duration":0.28358,"confidence":0.702},{"start":242.00422,"duration":0.28204,"confidence":0.719},{"start":242.28626,"duration":0.28204,"confidence":0.719},{"start":242.56830,"duration":0.28253,"confidence":0.655},{"start":242.85083,"duration":0.28253,"confidence":0.655},{"start":243.13336,"duration":0.28377,"confidence":0.476},{"start":243.41713,"duration":0.28377,"confidence":0.476},{"start":243.70090,"duration":0.28425,"confidence":0.660},{"start":243.98515,"duration":0.28425,"confidence":0.660},{"start":244.26939,"duration":0.28244,"confidence":0.664},{"start":244.55183,"duration":0.28244,"confidence":0.664},{"start":244.83426,"duration":0.28265,"confidence":0.634},{"start":245.11691,"duration":0.28265,"confidence":0.634},{"start":245.39956,"duration":0.28285,"confidence":0.518},{"start":245.68241,"duration":0.28285,"confidence":0.518},{"start":245.96526,"duration":0.28430,"confidence":0.735},{"start":246.24956,"duration":0.28430,"confidence":0.735},{"start":246.53386,"duration":0.28273,"confidence":0.706},{"start":246.81659,"duration":0.28273,"confidence":0.706},{"start":247.09931,"duration":0.28267,"confidence":0.684},{"start":247.38198,"duration":0.28267,"confidence":0.684},{"start":247.66465,"duration":0.28312,"confidence":0.518},{"start":247.94777,"duration":0.28312,"confidence":0.518},{"start":248.23089,"duration":0.28308,"confidence":0.681},{"start":248.51396,"duration":0.28308,"confidence":0.681},{"start":248.79704,"duration":0.28253,"confidence":0.667},{"start":249.07957,"duration":0.28253,"confidence":0.667},{"start":249.36209,"duration":0.28300,"confidence":0.620},{"start":249.64510,"duration":0.28300,"confidence":0.620},{"start":249.92810,"duration":0.28248,"confidence":0.513},{"start":250.21058,"duration":0.28248,"confidence":0.513},{"start":250.49307,"duration":0.28298,"confidence":0.683},{"start":250.77605,"duration":0.28298,"confidence":0.683},{"start":251.05902,"duration":0.28247,"confidence":0.698},{"start":251.34149,"duration":0.28247,"confidence":0.698},{"start":251.62396,"duration":0.28247,"confidence":0.638},{"start":251.90643,"duration":0.28247,"confidence":0.638},{"start":252.18890,"duration":0.28373,"confidence":0.493},{"start":252.47263,"duration":0.28373,"confidence":0.493},{"start":252.75637,"duration":0.28298,"confidence":0.660},{"start":253.03935,"duration":0.28298,"confidence":0.660},{"start":253.32233,"duration":0.28223,"confidence":0.636},{"start":253.60456,"duration":0.28223,"confidence":0.636},{"start":253.88679,"duration":0.28299,"confidence":0.614},{"start":254.16978,"duration":0.28299,"confidence":0.614},{"start":254.45278,"duration":0.28326,"confidence":0.430},{"start":254.73604,"duration":0.28326,"confidence":0.430},{"start":255.01930,"duration":0.28303,"confidence":0.625},{"start":255.30232,"duration":0.28303,"confidence":0.625},{"start":255.58535,"duration":0.28254,"confidence":0.630},{"start":255.86789,"duration":0.28254,"confidence":0.630},{"start":256.15043,"duration":0.28256,"confidence":0.654},{"start":256.43299,"duration":0.28256,"confidence":0.654},{"start":256.71555,"duration":0.28385,"confidence":0.513},{"start":256.99939,"duration":0.28385,"confidence":0.513},{"start":257.28324,"duration":0.28361,"confidence":0.690},{"start":257.56685,"duration":0.28361,"confidence":0.690},{"start":257.85046,"duration":0.28263,"confidence":0.680},{"start":258.13309,"duration":0.28263,"confidence":0.680},{"start":258.41572,"duration":0.28365,"confidence":0.635},{"start":258.69937,"duration":0.28365,"confidence":0.635},{"start":258.98302,"duration":0.28367,"confidence":0.533},{"start":259.26669,"duration":0.28367,"confidence":0.533},{"start":259.55035,"duration":0.28342,"confidence":0.712},{"start":259.83378,"duration":0.28342,"confidence":0.712},{"start":260.11720,"duration":0.28267,"confidence":0.688},{"start":260.39988,"duration":0.28267,"confidence":0.688},{"start":260.68255,"duration":0.28318,"confidence":0.575},{"start":260.96573,"duration":0.28318,"confidence":0.575},{"start":261.24892,"duration":0.28344,"confidence":0.339},{"start":261.53236,"duration":0.28344,"confidence":0.339},{"start":261.81580,"duration":0.28269,"confidence":0.547},{"start":262.09849,"duration":0.28269,"confidence":0.547},{"start":262.38118,"duration":0.28218,"confidence":0.664},{"start":262.66336,"duration":0.28218,"confidence":0.664},{"start":262.94554,"duration":0.28319,"confidence":0.592},{"start":263.22874,"duration":0.28319,"confidence":0.592},{"start":263.51193,"duration":0.28345,"confidence":0.423},{"start":263.79538,"duration":0.28345,"confidence":0.423},{"start":264.07883,"duration":0.28344,"confidence":0.597},{"start":264.36227,"duration":0.28344,"confidence":0.597},{"start":264.64571,"duration":0.28192,"confidence":0.700},{"start":264.92763,"duration":0.28192,"confidence":0.700},{"start":265.20955,"duration":0.28293,"confidence":0.582},{"start":265.49248,"duration":0.28293,"confidence":0.582},{"start":265.77540,"duration":0.28444,"confidence":0.383},{"start":266.05984,"duration":0.28444,"confidence":0.383},{"start":266.34428,"duration":0.28368,"confidence":0.574},{"start":266.62796,"duration":0.28368,"confidence":0.574},{"start":266.91163,"duration":0.28215,"confidence":0.682},{"start":267.19379,"duration":0.28215,"confidence":0.682},{"start":267.47594,"duration":0.28240,"confidence":0.588},{"start":267.75834,"duration":0.28240,"confidence":0.588},{"start":268.04074,"duration":0.28366,"confidence":0.322},{"start":268.32441,"duration":0.28366,"confidence":0.322},{"start":268.60807,"duration":0.28341,"confidence":0.402},{"start":268.89147,"duration":0.28341,"confidence":0.402},{"start":269.17488,"duration":0.28240,"confidence":0.522},{"start":269.45728,"duration":0.28240,"confidence":0.522},{"start":269.73967,"duration":0.28214,"confidence":0.253},{"start":270.02181,"duration":0.28214,"confidence":0.253},{"start":270.30396,"duration":0.28291,"confidence":0.234},{"start":270.58686,"duration":0.28291,"confidence":0.234},{"start":270.86977,"duration":0.28317,"confidence":0.337},{"start":271.15294,"duration":0.28317,"confidence":0.337},{"start":271.43610,"duration":0.28267,"confidence":0.474},{"start":271.71877,"duration":0.28267,"confidence":0.474},{"start":272.00144,"duration":0.28167,"confidence":0.265},{"start":272.28311,"duration":0.28167,"confidence":0.265},{"start":272.56478,"duration":0.28269,"confidence":0.215},{"start":272.84748,"duration":0.28269,"confidence":0.215},{"start":273.13017,"duration":0.28397,"confidence":0.351},{"start":273.41414,"duration":0.28397,"confidence":0.351},{"start":273.69811,"duration":0.28297,"confidence":0.525},{"start":273.98108,"duration":0.28297,"confidence":0.525},{"start":274.26405,"duration":0.28273,"confidence":0.523},{"start":274.54678,"duration":0.28273,"confidence":0.523},{"start":274.82952,"duration":0.28426,"confidence":0.542},{"start":275.11377,"duration":0.28426,"confidence":0.542},{"start":275.39803,"duration":0.28402,"confidence":0.561},{"start":275.68205,"duration":0.28402,"confidence":0.561},{"start":275.96607,"duration":0.28378,"confidence":0.325},{"start":276.24985,"duration":0.28378,"confidence":0.325},{"start":276.53362,"duration":0.28303,"confidence":0.527},{"start":276.81665,"duration":0.28303,"confidence":0.527},{"start":277.09968,"duration":0.28354,"confidence":0.390},{"start":277.38322,"duration":0.28354,"confidence":0.390},{"start":277.66677,"duration":0.28380,"confidence":0.523},{"start":277.95057,"duration":0.28380,"confidence":0.523},{"start":278.23438,"duration":0.28280,"confidence":0.317},{"start":278.51718,"duration":0.28280,"confidence":0.317},{"start":278.79998,"duration":0.28155,"confidence":0.527},{"start":279.08153,"duration":0.28155,"confidence":0.527},{"start":279.36308,"duration":0.28307,"confidence":0.414},{"start":279.64615,"duration":0.28307,"confidence":0.414},{"start":279.92921,"duration":0.28333,"confidence":0.561},{"start":280.21254,"duration":0.28333,"confidence":0.561},{"start":280.49586,"duration":0.28308,"confidence":0.351},{"start":280.77894,"duration":0.28308,"confidence":0.351},{"start":281.06202,"duration":0.28156,"confidence":0.538},{"start":281.34358,"duration":0.28156,"confidence":0.538},{"start":281.62514,"duration":0.28308,"confidence":0.400},{"start":281.90822,"duration":0.28308,"confidence":0.400},{"start":282.19130,"duration":0.28384,"confidence":0.532},{"start":282.47515,"duration":0.28384,"confidence":0.532},{"start":282.75899,"duration":0.28384,"confidence":0.306},{"start":283.04283,"duration":0.28384,"confidence":0.306},{"start":283.32667,"duration":0.28233,"confidence":0.519},{"start":283.60900,"duration":0.28233,"confidence":0.519},{"start":283.89133,"duration":0.28309,"confidence":0.401},{"start":284.17442,"duration":0.28309,"confidence":0.401},{"start":284.45751,"duration":0.28436,"confidence":0.543},{"start":284.74187,"duration":0.28436,"confidence":0.543},{"start":285.02623,"duration":0.28360,"confidence":0.339},{"start":285.30983,"duration":0.28360,"confidence":0.339},{"start":285.59343,"duration":0.28234,"confidence":0.550},{"start":285.87576,"duration":0.28234,"confidence":0.550},{"start":286.15810,"duration":0.28284,"confidence":0.434},{"start":286.44094,"duration":0.28284,"confidence":0.434},{"start":286.72379,"duration":0.28310,"confidence":0.543},{"start":287.00689,"duration":0.28310,"confidence":0.543},{"start":287.28999,"duration":0.28335,"confidence":0.325},{"start":287.57334,"duration":0.28335,"confidence":0.325},{"start":287.85669,"duration":0.28209,"confidence":0.527},{"start":288.13878,"duration":0.28209,"confidence":0.527},{"start":288.42087,"duration":0.28259,"confidence":0.416},{"start":288.70346,"duration":0.28259,"confidence":0.416},{"start":288.98605,"duration":0.28335,"confidence":0.554},{"start":289.26941,"duration":0.28335,"confidence":0.554},{"start":289.55276,"duration":0.28310,"confidence":0.364},{"start":289.83586,"duration":0.28310,"confidence":0.364},{"start":290.11897,"duration":0.28235,"confidence":0.548},{"start":290.40131,"duration":0.28235,"confidence":0.548},{"start":290.68366,"duration":0.28361,"confidence":0.430},{"start":290.96727,"duration":0.28361,"confidence":0.430},{"start":291.25088,"duration":0.28336,"confidence":0.530},{"start":291.53425,"duration":0.28336,"confidence":0.530},{"start":291.81761,"duration":0.28413,"confidence":0.290},{"start":292.10173,"duration":0.28413,"confidence":0.290},{"start":292.38586,"duration":0.28236,"confidence":0.493},{"start":292.66822,"duration":0.28236,"confidence":0.493},{"start":292.95057,"duration":0.28287,"confidence":0.422},{"start":293.23344,"duration":0.28287,"confidence":0.422},{"start":293.51631,"duration":0.28389,"confidence":0.549},{"start":293.80020,"duration":0.28389,"confidence":0.549},{"start":294.08408,"duration":0.28339,"confidence":0.332},{"start":294.36747,"duration":0.28339,"confidence":0.332},{"start":294.65086,"duration":0.28162,"confidence":0.525},{"start":294.93248,"duration":0.28162,"confidence":0.525},{"start":295.21410,"duration":0.28340,"confidence":0.441},{"start":295.49750,"duration":0.28340,"confidence":0.441},{"start":295.78090,"duration":0.28290,"confidence":0.530},{"start":296.06380,"duration":0.28290,"confidence":0.530},{"start":296.34670,"duration":0.28392,"confidence":0.325},{"start":296.63062,"duration":0.28392,"confidence":0.325},{"start":296.91453,"duration":0.28241,"confidence":0.521},{"start":297.19694,"duration":0.28241,"confidence":0.521},{"start":297.47934,"duration":0.28266,"confidence":0.383},{"start":297.76201,"duration":0.28266,"confidence":0.383},{"start":298.04467,"duration":0.28343,"confidence":0.542},{"start":298.32810,"duration":0.28343,"confidence":0.542},{"start":298.61152,"duration":0.28293,"confidence":0.369},{"start":298.89445,"duration":0.28293,"confidence":0.369},{"start":299.17737,"duration":0.28217,"confidence":0.570},{"start":299.45954,"duration":0.28217,"confidence":0.570},{"start":299.74172,"duration":0.28345,"confidence":0.421},{"start":300.02516,"duration":0.28345,"confidence":0.421},{"start":300.30861,"duration":0.28271,"confidence":0.532},{"start":300.59132,"duration":0.28271,"confidence":0.532},{"start":300.87402,"duration":0.28299,"confidence":0.282},{"start":301.15701,"duration":0.28299,"confidence":0.282},{"start":301.43999,"duration":0.28225,"confidence":0.488},{"start":301.72225,"duration":0.28225,"confidence":0.488},{"start":302.00450,"duration":0.28280,"confidence":0.359},{"start":302.28730,"duration":0.28280,"confidence":0.359},{"start":302.57009,"duration":0.28435,"confidence":0.539},{"start":302.85444,"duration":0.28435,"confidence":0.539},{"start":303.13879,"duration":0.28262,"confidence":0.307},{"start":303.42140,"duration":0.28262,"confidence":0.307},{"start":303.70402,"duration":0.28190,"confidence":0.518},{"start":303.98592,"duration":0.28190,"confidence":0.518},{"start":304.26781,"duration":0.28294,"confidence":0.384},{"start":304.55076,"duration":0.28294,"confidence":0.384},{"start":304.83370,"duration":0.28373,"confidence":0.572},{"start":305.11743,"duration":0.28373,"confidence":0.572},{"start":305.40116,"duration":0.28249,"confidence":0.394},{"start":305.68365,"duration":0.28249,"confidence":0.394},{"start":305.96613,"duration":0.28250,"confidence":0.559},{"start":306.24864,"duration":0.28250,"confidence":0.559},{"start":306.53114,"duration":0.28201,"confidence":0.409},{"start":306.81315,"duration":0.28201,"confidence":0.409},{"start":307.09516,"duration":0.28430,"confidence":0.530},{"start":307.37946,"duration":0.28430,"confidence":0.530},{"start":307.66376,"duration":0.28329,"confidence":0.314},{"start":307.94705,"duration":0.28329,"confidence":0.314},{"start":308.23034,"duration":0.28228,"confidence":0.541},{"start":308.51263,"duration":0.28228,"confidence":0.541},{"start":308.79491,"duration":0.28152,"confidence":0.409},{"start":309.07643,"duration":0.28152,"confidence":0.409},{"start":309.35796,"duration":0.28153,"confidence":0.513},{"start":309.63948,"duration":0.28153,"confidence":0.513},{"start":309.92101,"duration":0.28152,"confidence":0.204},{"start":310.20253,"duration":0.28152,"confidence":0.204},{"start":310.48406,"duration":0.28026,"confidence":0.355},{"start":310.76432,"duration":0.28026,"confidence":0.355},{"start":311.04458,"duration":0.27857,"confidence":0.304},{"start":311.32315,"duration":0.27857,"confidence":0.304},{"start":311.60172,"duration":0.28269,"confidence":0.276},{"start":311.88442,"duration":0.28269,"confidence":0.276},{"start":312.16711,"duration":0.28269,"confidence":0.374},{"start":312.44981,"duration":0.28269,"confidence":0.374}],"sections":[{"start":0.00000,"duration":27.89384,"confidence":1.000,"loudness":-13.954,"tempo":105.922,"tempo_confidence":0.277,"key":1,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":27.89384,"duration":8.48557,"confidence":0.185,"loudness":-13.595,"tempo":105.919,"tempo_confidence":0.466,"key":1,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":36.37942,"duration":27.74006,"confidence":0.371,"loudness":-13.033,"tempo":105.964,"tempo_confidence":0.475,"key":5,"key_confidence":0.760,"mode":0,"mode_confidence":0.694,"time_signature":4,"time_signature_confidence":1.000},{"start":64.11948,"duration":9.61457,"confidence":0.302,"loudness":-11.096,"tempo":106.188,"tempo_confidence":0.507,"key":5,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":73.73404,"duration":7.92601,"confidence":0.412,"loudness":-13.425,"tempo":105.971,"tempo_confidence":0.556,"key":7,"key_confidence":0.000,"mode":0,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":81.66005,"duration":18.25697,"confidence":0.590,"loudness":-11.969,"tempo":105.979,"tempo_confidence":0.486,"key":3,"key_confidence":0.151,"mode":1,"mode_confidence":0.569,"time_signature":4,"time_signature_confidence":1.000},{"start":99.91702,"duration":83.78153,"confidence":0.856,"loudness":-10.777,"tempo":106.000,"tempo_confidence":0.453,"key":1,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":183.69855,"duration":17.54747,"confidence":0.573,"loudness":-11.236,"tempo":106.013,"tempo_confidence":0.842,"key":1,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":201.24601,"duration":10.18801,"confidence":0.672,"loudness":-7.976,"tempo":106.125,"tempo_confidence":0.619,"key":0,"key_confidence":0.045,"mode":0,"mode_confidence":0.652,"time_signature":4,"time_signature_confidence":1.000},{"start":211.43402,"duration":9.05589,"confidence":0.542,"loudness":-9.454,"tempo":106.055,"tempo_confidence":0.806,"key":1,"key_confidence":0.000,"mode":1,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":220.48991,"duration":9.05629,"confidence":0.556,"loudness":-8.176,"tempo":106.185,"tempo_confidence":0.588,"key":0,"key_confidence":0.058,"mode":0,"mode_confidence":0.696,"time_signature":4,"time_signature_confidence":1.000},{"start":229.54620,"duration":45.85183,"confidence":0.662,"loudness":-9.203,"tempo":106.058,"tempo_confidence":0.609,"key":0,"key_confidence":0.046,"mode":0,"mode_confidence":0.495,"time_signature":4,"time_signature_confidence":1.000},{"start":275.39803,"duration":32.26573,"confidence":0.975,"loudness":-13.801,"tempo":106.075,"tempo_confidence":0.454,"key":10,"key_confidence":0.000,"mode":0,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000},{"start":307.66376,"duration":6.60758,"confidence":0.505,"loudness":-14.949,"tempo":106.562,"tempo_confidence":0.366,"key":10,"key_confidence":0.000,"mode":0,"mode_confidence":0.000,"time_signature":4,"time_signature_confidence":1.000}],"segments":[{"start":0.00000,"duration":0.29542,"confidence":1.000,"loudness_start":-58.174,"loudness_max_time":0.12478,"loudness_max":-25.900,"pitches":[0.019,0.019,1.000,0.038,0.010,0.025,0.015,0.006,0.018,0.012,0.014,0.018],"timbre":[26.388,-81.464,91.727,-16.803,145.281,146.690,-0.425,-14.768,-10.277,83.698,35.356,-21.057]},{"start":0.29542,"duration":0.69605,"confidence":1.000,"loudness_start":-38.765,"loudness_max_time":0.01420,"loudness_max":-7.989,"pitches":[0.082,0.024,0.030,0.031,0.035,0.045,0.064,0.120,1.000,0.134,0.067,0.079],"timbre":[43.131,-128.143,-30.769,117.656,45.330,-60.605,-6.794,27.469,11.733,8.735,-40.479,8.177]},{"start":0.99147,"duration":0.13447,"confidence":0.829,"loudness_start":-32.766,"loudness_max_time":0.02835,"loudness_max":-22.768,"pitches":[1.000,0.023,0.019,0.022,0.023,0.261,0.248,0.037,0.410,0.175,0.043,0.039],"timbre":[35.749,-139.603,2.005,-21.330,96.065,-45.947,-19.117,8.583,-1.926,4.494,5.751,-15.572]},{"start":1.12594,"duration":0.13973,"confidence":0.544,"loudness_start":-24.905,"loudness_max_time":0.01443,"loudness_max":-20.068,"pitches":[1.000,0.036,0.048,0.012,0.015,0.267,0.182,0.731,0.491,0.051,0.034,0.029],"timbre":[37.509,-124.462,47.828,19.178,94.292,-57.873,-6.262,17.341,3.547,2.924,-8.116,-12.717]},{"start":1.26567,"duration":0.45270,"confidence":0.759,"loudness_start":-26.028,"loudness_max_time":0.03878,"loudness_max":-15.450,"pitches":[0.114,0.058,0.035,0.027,0.039,1.000,0.034,0.018,0.028,0.058,0.529,0.082],"timbre":[37.732,-200.121,-39.324,18.004,78.292,-6.043,-20.195,-17.670,-27.623,33.068,-17.593,2.648]},{"start":1.71837,"duration":0.39460,"confidence":1.000,"loudness_start":-27.649,"loudness_max_time":0.01691,"loudness_max":-7.585,"pitches":[1.000,0.142,0.069,0.073,0.034,0.026,0.045,0.490,0.070,0.057,0.519,0.111],"timbre":[46.946,-120.027,38.458,57.867,44.872,-59.218,10.314,-14.466,14.938,5.996,-15.233,0.549]},{"start":2.11297,"duration":0.43474,"confidence":0.161,"loudness_start":-20.510,"loudness_max_time":0.03521,"loudness_max":-17.862,"pitches":[1.000,0.022,0.077,0.019,0.012,0.019,0.023,0.037,0.505,0.047,0.067,0.037],"timbre":[39.197,-194.944,-30.763,9.375,73.161,-45.933,-23.786,8.632,3.008,-3.951,-15.641,-10.016]},{"start":2.54771,"duration":0.71057,"confidence":1.000,"loudness_start":-27.369,"loudness_max_time":0.02439,"loudness_max":-11.653,"pitches":[0.053,0.022,0.033,0.023,0.031,0.037,0.052,0.138,1.000,0.078,0.054,0.066],"timbre":[41.299,-122.848,-36.731,102.028,43.303,-21.656,-0.608,23.873,12.614,11.991,-40.373,3.949]},{"start":3.25828,"duration":0.10304,"confidence":0.887,"loudness_start":-33.843,"loudness_max_time":0.02609,"loudness_max":-23.494,"pitches":[1.000,0.048,0.066,0.034,0.036,0.139,0.065,0.127,0.656,0.332,0.051,0.053],"timbre":[34.889,-145.304,-8.572,-22.548,90.635,-48.093,-12.622,6.916,-0.815,2.891,3.550,-16.153]},{"start":3.36132,"duration":0.17415,"confidence":0.523,"loudness_start":-26.391,"loudness_max_time":0.04569,"loudness_max":-21.133,"pitches":[1.000,0.024,0.044,0.010,0.013,0.145,0.050,0.537,0.397,0.039,0.035,0.024],"timbre":[35.883,-129.865,35.168,-2.986,107.929,-16.821,-0.517,10.268,-2.031,4.678,-12.173,-18.968]},{"start":3.53546,"duration":0.44776,"confidence":0.803,"loudness_start":-27.381,"loudness_max_time":0.03350,"loudness_max":-16.329,"pitches":[0.119,0.053,0.036,0.038,0.039,1.000,0.046,0.030,0.042,0.052,0.523,0.074],"timbre":[37.276,-212.008,-39.945,13.523,72.074,-0.276,-24.022,-3.873,-21.628,37.480,-3.587,3.082]},{"start":3.98322,"duration":0.81850,"confidence":1.000,"loudness_start":-27.377,"loudness_max_time":0.01747,"loudness_max":-8.235,"pitches":[1.000,0.060,0.043,0.032,0.027,0.018,0.025,0.178,0.266,0.043,0.171,0.059],"timbre":[44.583,-144.723,1.708,93.156,51.879,-57.078,0.230,-14.414,8.232,8.929,-30.900,2.912]},{"start":4.80172,"duration":0.72077,"confidence":1.000,"loudness_start":-27.685,"loudness_max_time":0.03394,"loudness_max":-11.935,"pitches":[0.067,0.029,0.031,0.029,0.032,0.041,0.065,0.188,1.000,0.108,0.073,0.068],"timbre":[40.487,-132.552,-42.150,72.711,57.687,48.893,17.664,22.936,18.198,5.332,-23.901,-0.426]},{"start":5.52249,"duration":0.10281,"confidence":0.890,"loudness_start":-33.501,"loudness_max_time":0.02862,"loudness_max":-23.666,"pitches":[1.000,0.046,0.033,0.033,0.036,0.238,0.125,0.125,0.623,0.317,0.055,0.061],"timbre":[34.540,-143.350,-9.298,-20.364,94.478,-44.967,-13.254,11.001,0.105,-0.392,1.935,-16.984]},{"start":5.62531,"duration":0.17438,"confidence":0.582,"loudness_start":-26.920,"loudness_max_time":0.04179,"loudness_max":-20.900,"pitches":[1.000,0.026,0.049,0.011,0.013,0.155,0.090,0.623,0.511,0.054,0.034,0.030],"timbre":[35.950,-126.196,36.476,-3.536,103.653,-14.540,-1.233,13.380,3.279,3.121,-8.806,-18.319]},{"start":5.79968,"duration":0.44726,"confidence":0.772,"loudness_start":-27.027,"loudness_max_time":0.03284,"loudness_max":-16.586,"pitches":[0.110,0.057,0.031,0.027,0.037,1.000,0.039,0.020,0.026,0.049,0.531,0.079],"timbre":[37.462,-213.674,-37.009,16.464,74.278,-10.300,-22.629,-7.749,-23.445,35.840,-5.390,4.406]},{"start":6.24694,"duration":0.80540,"confidence":1.000,"loudness_start":-27.788,"loudness_max_time":0.01684,"loudness_max":-8.125,"pitches":[1.000,0.056,0.038,0.034,0.024,0.018,0.017,0.127,0.236,0.048,0.179,0.049],"timbre":[44.665,-144.170,-2.237,94.965,50.339,-59.599,-0.226,-17.778,7.640,4.611,-31.862,2.631]},{"start":7.05234,"duration":0.16889,"confidence":1.000,"loudness_start":-26.908,"loudness_max_time":0.04844,"loudness_max":-11.794,"pitches":[0.248,0.012,0.046,0.019,0.013,0.084,0.104,1.000,0.730,0.087,0.058,0.049],"timbre":[42.399,-122.031,49.134,-39.174,67.892,47.401,56.639,13.640,30.173,-8.778,17.883,-20.668]},{"start":7.22122,"duration":0.56540,"confidence":0.114,"loudness_start":-17.480,"loudness_max_time":0.02710,"loudness_max":-13.533,"pitches":[0.032,0.009,0.031,0.012,0.014,0.027,0.042,0.060,1.000,0.071,0.029,0.052],"timbre":[39.240,-133.651,-51.867,96.860,42.857,-67.774,-14.120,24.506,6.731,20.627,-27.047,11.188]},{"start":7.78662,"duration":0.13156,"confidence":0.881,"loudness_start":-33.355,"loudness_max_time":0.03201,"loudness_max":-23.544,"pitches":[1.000,0.023,0.035,0.022,0.021,0.114,0.066,0.038,0.600,0.239,0.035,0.044],"timbre":[34.764,-143.953,-5.215,-24.955,89.892,-49.656,-13.305,8.831,-1.873,6.204,8.850,-17.339]},{"start":7.91819,"duration":0.14512,"confidence":0.535,"loudness_start":-25.868,"loudness_max_time":0.01179,"loudness_max":-21.215,"pitches":[1.000,0.024,0.047,0.010,0.012,0.141,0.044,0.669,0.405,0.046,0.040,0.029],"timbre":[36.352,-123.795,47.881,21.119,98.928,-55.530,-8.523,18.284,1.767,0.199,-14.597,-15.538]},{"start":8.06331,"duration":0.44798,"confidence":0.798,"loudness_start":-27.750,"loudness_max_time":0.03346,"loudness_max":-16.481,"pitches":[0.120,0.053,0.037,0.028,0.038,1.000,0.039,0.022,0.032,0.056,0.531,0.085],"timbre":[37.056,-201.820,-43.699,10.883,76.292,4.110,-24.459,-5.704,-25.453,39.517,-5.287,2.920]},{"start":8.51129,"duration":0.38658,"confidence":1.000,"loudness_start":-27.945,"loudness_max_time":0.01732,"loudness_max":-8.396,"pitches":[1.000,0.118,0.074,0.055,0.058,0.051,0.063,0.384,0.048,0.052,0.387,0.090],"timbre":[46.590,-126.761,33.689,48.521,42.147,-56.803,11.025,-13.049,14.373,6.122,-11.831,2.560]},{"start":8.89787,"duration":0.43615,"confidence":0.723,"loudness_start":-20.804,"loudness_max_time":0.03862,"loudness_max":-11.630,"pitches":[1.000,0.021,0.048,0.012,0.010,0.012,0.020,0.044,0.294,0.032,0.039,0.038],"timbre":[42.750,-166.117,11.235,9.523,43.607,3.560,-19.421,1.819,-4.430,-12.265,-4.673,-12.112]},{"start":9.33401,"duration":0.70290,"confidence":0.913,"loudness_start":-22.703,"loudness_max_time":0.03130,"loudness_max":-11.123,"pitches":[0.747,0.041,0.040,0.039,0.037,0.065,0.079,0.198,1.000,0.128,0.069,0.110],"timbre":[42.035,-143.889,-44.730,84.813,42.957,7.747,0.921,20.911,5.521,4.675,-26.693,9.777]},{"start":10.03692,"duration":0.13819,"confidence":0.822,"loudness_start":-31.956,"loudness_max_time":0.03700,"loudness_max":-23.064,"pitches":[1.000,0.046,0.014,0.018,0.039,0.099,0.083,0.044,0.262,0.104,0.020,0.129],"timbre":[35.140,-158.256,-31.458,-45.377,85.009,-17.988,-11.821,6.542,-6.923,19.501,14.134,-7.239]},{"start":10.17510,"duration":0.15265,"confidence":0.450,"loudness_start":-25.173,"loudness_max_time":0.02241,"loudness_max":-20.863,"pitches":[1.000,0.062,0.026,0.015,0.022,0.149,0.095,0.443,0.276,0.033,0.023,0.116],"timbre":[37.010,-142.779,23.901,8.667,90.120,-42.187,-4.935,15.268,-0.670,-0.468,-4.228,-11.308]},{"start":10.32776,"duration":0.44753,"confidence":0.739,"loudness_start":-27.079,"loudness_max_time":0.03372,"loudness_max":-16.669,"pitches":[0.262,0.054,0.031,0.029,0.045,1.000,0.052,0.035,0.025,0.049,0.506,0.087],"timbre":[37.591,-213.384,-48.701,11.581,70.811,-11.263,-24.000,-5.398,-23.107,28.785,-9.533,6.280]},{"start":10.77528,"duration":0.81905,"confidence":1.000,"loudness_start":-28.080,"loudness_max_time":0.01712,"loudness_max":-8.385,"pitches":[1.000,0.046,0.026,0.023,0.019,0.011,0.019,0.096,0.167,0.030,0.163,0.050],"timbre":[44.513,-141.032,-5.391,95.854,45.996,-54.350,0.494,-12.891,7.278,8.800,-35.599,2.853]},{"start":11.59433,"duration":0.66091,"confidence":1.000,"loudness_start":-27.101,"loudness_max_time":0.03412,"loudness_max":-11.934,"pitches":[0.327,0.030,0.036,0.034,0.064,0.056,0.063,0.194,1.000,0.084,0.065,0.093],"timbre":[40.481,-133.027,-45.137,65.215,51.556,46.231,14.202,17.179,15.674,-0.078,-15.134,-3.699]},{"start":12.25524,"duration":0.19084,"confidence":0.851,"loudness_start":-32.828,"loudness_max_time":0.09424,"loudness_max":-22.767,"pitches":[1.000,0.062,0.015,0.026,0.062,0.119,0.071,0.114,0.150,0.060,0.037,0.085],"timbre":[31.856,-135.050,-37.850,-125.272,85.634,-20.306,0.387,-29.688,-5.119,11.654,-6.621,3.115]},{"start":12.44608,"duration":0.17383,"confidence":0.517,"loudness_start":-24.771,"loudness_max_time":0.01340,"loudness_max":-19.899,"pitches":[1.000,0.034,0.020,0.009,0.020,0.063,0.029,0.243,0.218,0.017,0.014,0.089],"timbre":[37.682,-142.661,9.536,6.478,69.834,-58.161,-6.674,20.508,-0.721,7.523,-0.639,-4.960]},{"start":12.61991,"duration":0.40739,"confidence":0.655,"loudness_start":-25.889,"loudness_max_time":0.00529,"loudness_max":-16.651,"pitches":[0.552,0.059,0.032,0.023,0.037,1.000,0.044,0.034,0.031,0.046,0.516,0.081],"timbre":[37.797,-246.279,-50.345,11.744,59.974,-82.390,-46.532,-2.147,-17.636,-1.302,-21.903,12.229]},{"start":13.02730,"duration":0.53955,"confidence":1.000,"loudness_start":-29.350,"loudness_max_time":0.03004,"loudness_max":-8.433,"pitches":[1.000,0.090,0.049,0.037,0.033,0.025,0.030,0.238,0.035,0.035,0.378,0.079],"timbre":[44.773,-138.783,-4.842,50.674,56.269,29.184,16.270,-6.515,15.714,2.761,27.561,-7.110]},{"start":13.56685,"duration":0.29655,"confidence":0.238,"loudness_start":-25.179,"loudness_max_time":0.06423,"loudness_max":-21.749,"pitches":[1.000,0.028,0.101,0.071,0.014,0.020,0.029,0.064,0.395,0.040,0.040,0.055],"timbre":[36.367,-204.437,-36.071,-27.387,73.281,-38.425,-11.768,7.218,0.617,5.522,-12.405,-7.933]},{"start":13.86340,"duration":0.71166,"confidence":1.000,"loudness_start":-27.523,"loudness_max_time":0.02895,"loudness_max":-11.908,"pitches":[0.296,0.030,0.034,0.037,0.059,0.041,0.063,0.205,1.000,0.105,0.070,0.087],"timbre":[40.808,-131.332,-46.756,85.464,53.366,23.409,5.669,21.962,15.526,9.192,-21.171,2.362]},{"start":14.57506,"duration":0.12794,"confidence":0.799,"loudness_start":-31.972,"loudness_max_time":0.03251,"loudness_max":-23.765,"pitches":[1.000,0.101,0.015,0.033,0.065,0.166,0.113,0.115,0.091,0.073,0.033,0.254],"timbre":[35.116,-152.353,-11.976,-35.784,89.653,-38.105,-15.152,1.493,-6.586,9.695,2.875,-8.753]},{"start":14.70299,"duration":0.15329,"confidence":0.516,"loudness_start":-24.911,"loudness_max_time":0.02060,"loudness_max":-20.190,"pitches":[1.000,0.052,0.013,0.007,0.016,0.042,0.024,0.234,0.169,0.016,0.012,0.091],"timbre":[37.785,-156.622,-3.385,-3.950,75.585,-43.285,0.821,13.427,-6.279,7.298,-3.401,-1.462]},{"start":14.85628,"duration":0.44739,"confidence":0.641,"loudness_start":-25.392,"loudness_max_time":0.03153,"loudness_max":-16.738,"pitches":[0.589,0.055,0.030,0.023,0.043,1.000,0.044,0.037,0.028,0.047,0.467,0.089],"timbre":[37.728,-216.487,-54.320,7.400,66.241,-10.531,-23.807,-15.999,-23.915,25.258,-7.816,5.593]},{"start":15.30367,"duration":0.82889,"confidence":1.000,"loudness_start":-28.194,"loudness_max_time":0.01661,"loudness_max":-8.158,"pitches":[1.000,0.059,0.041,0.051,0.036,0.018,0.019,0.144,0.243,0.048,0.149,0.060],"timbre":[44.696,-140.072,0.141,90.566,51.385,-57.318,2.480,-15.719,8.380,8.291,-30.399,0.805]},{"start":16.13256,"duration":0.14399,"confidence":1.000,"loudness_start":-28.136,"loudness_max_time":0.02453,"loudness_max":-11.831,"pitches":[0.278,0.020,0.046,0.033,0.028,0.133,0.076,1.000,0.418,0.121,0.041,0.066],"timbre":[44.375,-109.271,71.945,32.683,59.156,-32.220,44.282,1.516,21.308,19.369,23.997,-16.240]},{"start":16.27655,"duration":0.55664,"confidence":0.218,"loudness_start":-18.121,"loudness_max_time":0.03135,"loudness_max":-13.517,"pitches":[0.467,0.037,0.044,0.079,0.035,0.043,0.057,0.139,1.000,0.146,0.056,0.107],"timbre":[40.453,-150.908,-34.563,82.520,51.150,-63.178,-0.183,8.966,2.240,22.666,-19.526,15.271]},{"start":16.83320,"duration":0.12834,"confidence":0.701,"loudness_start":-30.286,"loudness_max_time":0.04114,"loudness_max":-23.094,"pitches":[1.000,0.104,0.011,0.012,0.017,0.088,0.061,0.096,0.096,0.049,0.013,0.137],"timbre":[35.625,-161.930,-22.160,-42.822,81.620,-29.468,-14.350,6.119,-4.927,10.198,7.676,-7.512]},{"start":16.96154,"duration":0.15701,"confidence":0.578,"loudness_start":-25.029,"loudness_max_time":0.03444,"loudness_max":-19.589,"pitches":[1.000,0.060,0.009,0.003,0.008,0.018,0.010,0.124,0.091,0.010,0.009,0.149],"timbre":[38.396,-177.741,-21.528,-13.446,67.622,-29.416,-1.983,7.569,-8.900,13.151,1.139,1.738]},{"start":17.11855,"duration":0.12177,"confidence":0.570,"loudness_start":-25.060,"loudness_max_time":0.03557,"loudness_max":-16.755,"pitches":[0.301,0.154,0.100,0.092,0.145,1.000,0.182,0.057,0.079,0.065,0.054,0.067],"timbre":[38.744,-217.341,-35.037,-6.348,60.275,-17.764,-28.646,-21.038,-17.146,19.085,1.414,4.852]},{"start":17.24032,"duration":0.28952,"confidence":0.072,"loudness_start":-23.966,"loudness_max_time":0.05951,"loudness_max":-21.570,"pitches":[0.554,0.079,0.068,0.067,0.044,1.000,0.050,0.051,0.143,0.085,0.678,0.109],"timbre":[36.333,-262.989,-58.548,-20.168,71.506,-47.157,-33.618,18.016,-15.057,-4.421,-0.963,6.827]},{"start":17.52984,"duration":0.17551,"confidence":1.000,"loudness_start":-27.665,"loudness_max_time":0.05578,"loudness_max":-8.485,"pitches":[0.765,0.106,0.099,0.207,0.048,0.101,0.053,1.000,0.438,0.094,0.363,0.181],"timbre":[43.803,-155.917,34.878,-89.946,65.382,75.803,41.680,23.340,23.486,-41.877,-0.725,-9.845]},{"start":17.70535,"duration":0.39401,"confidence":0.229,"loudness_start":-16.023,"loudness_max_time":0.00558,"loudness_max":-10.068,"pitches":[1.000,0.055,0.040,0.022,0.030,0.115,0.020,0.154,0.039,0.037,0.108,0.057],"timbre":[46.095,-106.320,30.802,43.912,21.214,-48.538,-13.815,-19.621,3.954,4.975,-30.774,-2.538]},{"start":18.09937,"duration":0.30068,"confidence":0.191,"loudness_start":-20.111,"loudness_max_time":0.01633,"loudness_max":-17.055,"pitches":[1.000,0.031,0.158,0.031,0.041,0.341,0.048,0.069,0.622,0.074,0.032,0.066],"timbre":[40.568,-165.149,-4.377,2.678,35.023,-45.235,-43.497,9.461,8.962,7.445,-23.938,-16.872]},{"start":18.40005,"duration":0.65274,"confidence":0.949,"loudness_start":-26.057,"loudness_max_time":0.02054,"loudness_max":-12.044,"pitches":[0.198,0.029,0.032,0.042,0.044,0.254,0.057,0.130,1.000,0.148,0.056,0.092],"timbre":[41.897,-131.456,-18.864,93.555,47.313,-42.617,0.436,10.847,8.450,8.424,-49.433,5.355]},{"start":19.05279,"duration":0.16163,"confidence":0.605,"loudness_start":-29.154,"loudness_max_time":0.08585,"loudness_max":-23.138,"pitches":[1.000,0.042,0.078,0.030,0.056,0.787,0.094,0.034,0.485,0.130,0.033,0.221],"timbre":[33.742,-153.702,-30.913,-85.607,91.883,-30.947,-9.077,-9.274,-6.179,0.809,-4.529,4.272]},{"start":19.21442,"duration":0.16308,"confidence":0.524,"loudness_start":-25.445,"loudness_max_time":0.04027,"loudness_max":-20.548,"pitches":[0.671,0.019,0.059,0.016,0.081,1.000,0.059,0.423,0.504,0.052,0.018,0.112],"timbre":[36.987,-145.223,3.028,-16.747,76.333,-18.723,10.352,14.558,1.417,5.820,-6.148,-8.109]},{"start":19.37751,"duration":0.41206,"confidence":0.724,"loudness_start":-26.333,"loudness_max_time":0.04077,"loudness_max":-16.549,"pitches":[0.157,0.030,0.030,0.027,0.039,1.000,0.032,0.016,0.023,0.054,0.351,0.065],"timbre":[37.289,-198.920,-37.513,1.731,73.352,-3.086,-11.497,-19.048,-23.626,29.337,-19.306,7.491]},{"start":19.78957,"duration":0.85252,"confidence":1.000,"loudness_start":-29.571,"loudness_max_time":0.05883,"loudness_max":-8.163,"pitches":[1.000,0.059,0.040,0.030,0.032,0.239,0.026,0.128,0.204,0.048,0.133,0.074],"timbre":[39.761,-184.651,-12.534,-51.062,74.962,78.192,16.524,26.539,14.020,-40.536,-44.136,-6.069]},{"start":20.64209,"duration":0.72558,"confidence":1.000,"loudness_start":-26.385,"loudness_max_time":0.04329,"loudness_max":-11.544,"pitches":[0.303,0.030,0.037,0.028,0.051,0.297,0.064,0.181,1.000,0.081,0.056,0.085],"timbre":[40.436,-152.172,-50.202,38.769,63.410,59.905,7.785,27.763,19.261,-12.290,-29.581,-1.681]},{"start":21.36766,"duration":0.13306,"confidence":0.675,"loudness_start":-30.558,"loudness_max_time":0.02800,"loudness_max":-23.352,"pitches":[1.000,0.035,0.024,0.027,0.120,0.648,0.149,0.048,0.213,0.131,0.037,0.165],"timbre":[34.843,-147.212,-19.864,-30.934,83.639,-45.338,-16.436,12.452,-4.426,2.436,9.414,-13.158]},{"start":21.50073,"duration":0.17478,"confidence":0.590,"loudness_start":-25.643,"loudness_max_time":0.01794,"loudness_max":-20.508,"pitches":[1.000,0.016,0.036,0.012,0.035,0.652,0.053,0.375,0.374,0.040,0.036,0.182],"timbre":[37.154,-139.218,19.473,10.192,78.401,-53.488,-4.296,19.757,-2.133,3.463,-3.400,-4.853]},{"start":21.67551,"duration":0.41696,"confidence":0.695,"loudness_start":-26.254,"loudness_max_time":0.00648,"loudness_max":-16.542,"pitches":[0.204,0.056,0.028,0.022,0.042,1.000,0.035,0.022,0.028,0.043,0.456,0.076],"timbre":[38.004,-247.011,-44.213,3.945,59.019,-85.206,-44.445,-3.317,-16.270,-3.861,-18.317,11.606]},{"start":22.09247,"duration":0.39029,"confidence":1.000,"loudness_start":-28.561,"loudness_max_time":0.02075,"loudness_max":-8.426,"pitches":[1.000,0.200,0.111,0.068,0.070,0.441,0.048,0.613,0.070,0.078,0.642,0.099],"timbre":[46.497,-128.486,33.526,54.069,47.216,-46.220,10.011,-8.750,13.462,7.869,-7.740,1.948]},{"start":22.48277,"duration":0.28454,"confidence":0.243,"loudness_start":-22.524,"loudness_max_time":0.05848,"loudness_max":-19.073,"pitches":[1.000,0.019,0.024,0.016,0.024,0.218,0.019,0.031,0.383,0.035,0.069,0.064],"timbre":[38.686,-192.041,-10.559,-3.918,81.741,-42.783,-22.209,4.252,0.532,2.961,-7.066,-10.537]},{"start":22.76730,"duration":0.16186,"confidence":0.022,"loudness_start":-24.851,"loudness_max_time":0.02540,"loudness_max":-22.411,"pitches":[0.879,0.041,0.103,0.024,0.037,0.416,0.068,0.080,1.000,0.166,0.054,0.103],"timbre":[35.753,-217.762,-45.507,-16.356,73.740,-53.627,-10.573,28.491,0.119,2.837,-11.200,-4.528]},{"start":22.92916,"duration":0.64853,"confidence":1.000,"loudness_start":-27.865,"loudness_max_time":0.01968,"loudness_max":-12.283,"pitches":[0.203,0.034,0.035,0.036,0.054,0.213,0.061,0.223,1.000,0.127,0.074,0.093],"timbre":[42.598,-137.595,0.247,77.133,54.335,-40.894,19.886,0.114,7.148,14.294,-39.316,6.137]},{"start":23.57769,"duration":0.18726,"confidence":0.614,"loudness_start":-28.547,"loudness_max_time":0.08346,"loudness_max":-22.210,"pitches":[1.000,0.029,0.013,0.015,0.039,0.222,0.051,0.044,0.158,0.068,0.016,0.048],"timbre":[34.757,-167.666,-1.541,-52.047,114.030,-23.493,-10.275,15.971,-2.410,7.457,-11.246,-8.701]},{"start":23.76494,"duration":0.14544,"confidence":0.543,"loudness_start":-26.908,"loudness_max_time":0.02159,"loudness_max":-21.498,"pitches":[1.000,0.033,0.045,0.016,0.058,0.602,0.105,0.641,0.457,0.063,0.041,0.149],"timbre":[36.787,-133.955,25.652,9.530,81.500,-45.299,11.866,9.117,1.868,7.312,-10.031,-9.418]},{"start":23.91039,"duration":0.39937,"confidence":0.732,"loudness_start":-26.629,"loudness_max_time":0.03567,"loudness_max":-16.514,"pitches":[0.128,0.029,0.029,0.030,0.046,1.000,0.040,0.019,0.024,0.054,0.371,0.072],"timbre":[37.525,-211.432,-42.821,11.317,75.396,-7.762,-26.277,-11.487,-19.682,30.428,-5.419,4.106]},{"start":24.30975,"duration":0.58771,"confidence":1.000,"loudness_start":-29.989,"loudness_max_time":0.06700,"loudness_max":-7.975,"pitches":[1.000,0.072,0.042,0.030,0.031,0.193,0.022,0.209,0.028,0.035,0.163,0.057],"timbre":[39.371,-190.280,2.250,-108.073,69.631,61.085,20.057,22.781,5.382,-25.671,-39.124,-1.103]},{"start":24.89746,"duration":0.25955,"confidence":0.187,"loudness_start":-23.739,"loudness_max_time":0.07123,"loudness_max":-20.712,"pitches":[1.000,0.027,0.092,0.021,0.029,0.258,0.043,0.022,0.412,0.044,0.034,0.058],"timbre":[37.421,-215.334,-40.172,-20.435,77.584,-51.921,-11.037,17.451,-2.933,2.556,-11.635,-6.870]},{"start":25.15701,"duration":0.58812,"confidence":1.000,"loudness_start":-27.001,"loudness_max_time":0.05702,"loudness_max":-11.414,"pitches":[0.217,0.044,0.048,0.041,0.059,0.252,0.083,0.241,1.000,0.109,0.081,0.106],"timbre":[39.397,-149.015,-41.331,-26.051,61.960,56.593,15.220,17.348,13.052,-12.409,-47.200,3.510]},{"start":25.74512,"duration":0.15170,"confidence":0.305,"loudness_start":-28.210,"loudness_max_time":0.02675,"loudness_max":-24.375,"pitches":[0.472,0.012,0.045,0.013,0.021,0.493,0.164,0.187,1.000,0.076,0.020,0.093],"timbre":[33.531,-181.965,-83.097,-29.513,87.968,-58.677,-8.431,34.997,2.749,-8.035,-3.185,0.216]},{"start":25.89683,"duration":0.10227,"confidence":0.601,"loudness_start":-30.715,"loudness_max_time":0.05296,"loudness_max":-24.204,"pitches":[1.000,0.065,0.043,0.027,0.107,0.882,0.284,0.185,0.820,0.363,0.043,0.208],"timbre":[34.813,-146.409,-22.269,-42.690,72.278,-33.608,-9.621,-5.271,-12.983,11.102,0.025,-5.531]},{"start":25.99909,"duration":0.17492,"confidence":0.467,"loudness_start":-25.311,"loudness_max_time":0.04380,"loudness_max":-20.955,"pitches":[1.000,0.022,0.043,0.018,0.059,0.854,0.131,0.529,0.635,0.079,0.029,0.113],"timbre":[36.719,-145.780,17.987,-14.215,90.749,-22.841,-3.324,14.845,-1.180,1.766,-9.645,-8.547]},{"start":26.17401,"duration":0.44635,"confidence":0.733,"loudness_start":-26.537,"loudness_max_time":0.03762,"loudness_max":-16.588,"pitches":[0.131,0.044,0.030,0.021,0.034,1.000,0.047,0.019,0.023,0.046,0.418,0.078],"timbre":[37.234,-211.516,-47.001,10.594,66.309,-2.714,-24.593,-6.687,-20.804,31.031,-11.506,4.751]},{"start":26.62036,"duration":0.28590,"confidence":1.000,"loudness_start":-27.042,"loudness_max_time":0.02090,"loudness_max":-8.830,"pitches":[1.000,0.187,0.104,0.050,0.086,0.604,0.071,0.606,0.059,0.103,0.575,0.127],"timbre":[46.598,-121.142,39.632,44.834,40.242,-50.350,17.182,-6.546,16.684,2.031,-1.858,1.202]},{"start":26.90626,"duration":0.10345,"confidence":0.246,"loudness_start":-20.349,"loudness_max_time":0.03089,"loudness_max":-14.440,"pitches":[1.000,0.160,0.037,0.045,0.053,0.134,0.056,0.151,0.205,0.058,0.104,0.190],"timbre":[42.084,-165.431,-18.897,7.018,56.919,-41.915,-16.493,-20.697,12.324,-11.996,-1.138,-0.463]},{"start":27.00971,"duration":0.14508,"confidence":0.576,"loudness_start":-20.762,"loudness_max_time":0.04323,"loudness_max":-13.881,"pitches":[1.000,0.082,0.128,0.051,0.019,0.020,0.030,0.082,0.213,0.046,0.070,0.083],"timbre":[42.351,-147.712,-34.008,27.796,68.838,-24.224,-31.480,-20.795,15.135,-0.218,-19.035,2.107]},{"start":27.15478,"duration":0.12998,"confidence":0.725,"loudness_start":-24.420,"loudness_max_time":0.04418,"loudness_max":-14.315,"pitches":[1.000,0.082,0.091,0.188,0.064,0.264,0.083,0.125,0.379,0.178,0.222,0.136],"timbre":[39.989,-171.818,-25.416,-10.550,60.688,16.450,-20.235,-4.459,12.507,-15.409,-30.747,-2.866]},{"start":27.28476,"duration":0.11433,"confidence":0.663,"loudness_start":-24.638,"loudness_max_time":0.04769,"loudness_max":-15.776,"pitches":[0.992,0.210,0.183,0.117,0.046,0.062,0.085,0.425,1.000,0.186,0.079,0.326],"timbre":[40.267,-138.914,-51.303,-22.762,49.072,-1.877,-15.150,-20.502,16.058,-20.282,-20.479,0.001]},{"start":27.39909,"duration":0.34259,"confidence":0.946,"loudness_start":-23.749,"loudness_max_time":0.08195,"loudness_max":-11.084,"pitches":[0.324,0.093,0.208,0.349,0.082,0.314,0.232,0.882,1.000,0.286,0.289,0.122],"timbre":[40.407,-175.982,15.250,-84.836,50.006,-9.774,26.298,26.088,10.793,-15.805,-17.397,1.389]},{"start":27.74168,"duration":0.09088,"confidence":0.205,"loudness_start":-22.319,"loudness_max_time":0.00957,"loudness_max":-17.082,"pitches":[1.000,0.318,0.064,0.422,0.107,0.188,0.371,0.243,0.265,0.064,0.070,0.344],"timbre":[37.407,-133.758,-18.150,18.056,24.181,-99.184,5.836,-4.836,-15.205,10.197,-2.819,11.848]},{"start":27.83256,"duration":0.18231,"confidence":0.688,"loudness_start":-25.628,"loudness_max_time":0.06750,"loudness_max":-17.490,"pitches":[0.024,0.015,0.062,0.065,0.025,0.047,0.093,0.088,1.000,0.103,0.022,0.041],"timbre":[37.871,-122.949,-42.494,-23.755,33.161,-11.015,14.261,-20.772,3.458,-11.868,-21.108,20.689]},{"start":28.01488,"duration":0.11129,"confidence":0.755,"loudness_start":-24.988,"loudness_max_time":0.02717,"loudness_max":-15.525,"pitches":[0.074,0.029,0.112,0.124,0.077,0.569,0.178,0.663,1.000,0.100,0.368,0.140],"timbre":[38.236,-115.160,-47.843,53.044,20.535,-33.888,-13.962,-3.111,-5.319,-8.898,-1.401,6.421]},{"start":28.12617,"duration":0.14825,"confidence":0.742,"loudness_start":-28.533,"loudness_max_time":0.05579,"loudness_max":-18.416,"pitches":[1.000,0.195,0.118,0.095,0.032,0.123,0.061,0.311,0.444,0.075,0.059,0.172],"timbre":[36.722,-116.584,-19.807,-38.215,67.354,1.895,-9.240,-9.334,9.770,-12.419,-28.555,1.240]},{"start":28.27442,"duration":0.15864,"confidence":0.709,"loudness_start":-24.652,"loudness_max_time":0.04131,"loudness_max":-17.075,"pitches":[0.820,0.034,0.103,0.476,0.097,0.951,0.174,0.608,1.000,0.134,0.457,0.137],"timbre":[39.043,-140.629,3.410,0.164,75.346,-7.119,2.103,1.311,7.312,0.654,-0.448,-9.942]},{"start":28.43306,"duration":0.11057,"confidence":0.668,"loudness_start":-24.194,"loudness_max_time":0.03997,"loudness_max":-15.679,"pitches":[0.140,0.205,0.310,0.241,0.296,1.000,0.272,0.244,0.318,0.145,0.115,0.118],"timbre":[39.958,-190.451,-21.511,0.715,58.540,-13.769,-29.196,-35.546,-14.114,22.538,3.266,-0.303]},{"start":28.54363,"duration":0.15143,"confidence":0.345,"loudness_start":-22.965,"loudness_max_time":0.06590,"loudness_max":-17.217,"pitches":[0.042,0.016,0.035,0.046,0.041,1.000,0.098,0.050,0.226,0.064,0.148,0.045],"timbre":[38.602,-219.183,-27.564,-39.144,60.871,-31.941,-47.301,2.007,0.355,-11.029,-27.523,17.841]},{"start":28.69506,"duration":0.13669,"confidence":0.629,"loudness_start":-24.709,"loudness_max_time":0.04237,"loudness_max":-16.922,"pitches":[0.531,0.325,0.216,0.151,0.104,0.908,0.183,0.167,0.204,0.193,1.000,0.306],"timbre":[38.346,-174.341,-58.997,1.992,36.085,-3.665,-32.969,-14.577,-0.936,-39.670,-21.439,4.319]},{"start":28.83175,"duration":0.40780,"confidence":1.000,"loudness_start":-27.086,"loudness_max_time":0.07272,"loudness_max":-7.865,"pitches":[1.000,0.173,0.136,0.114,0.062,0.182,0.104,0.890,0.982,0.110,0.575,0.236],"timbre":[42.249,-159.601,18.607,-98.099,53.109,35.146,25.211,15.903,19.917,-26.002,-0.604,-2.236]},{"start":29.23955,"duration":0.17946,"confidence":0.353,"loudness_start":-20.800,"loudness_max_time":0.07501,"loudness_max":-16.323,"pitches":[1.000,0.069,0.125,0.115,0.036,0.029,0.058,0.194,0.597,0.081,0.070,0.052],"timbre":[40.079,-183.996,-9.751,-29.027,70.554,-31.377,-16.435,-1.620,9.963,-11.864,-23.145,-3.235]},{"start":29.41900,"duration":0.13533,"confidence":0.504,"loudness_start":-22.865,"loudness_max_time":0.06741,"loudness_max":-16.640,"pitches":[1.000,0.081,0.103,0.152,0.055,0.101,0.061,0.247,0.857,0.121,0.048,0.101],"timbre":[39.995,-159.797,-23.851,-27.493,37.643,-18.020,-24.852,5.877,9.162,-1.097,-14.581,-0.438]},{"start":29.55433,"duration":0.13293,"confidence":0.592,"loudness_start":-24.454,"loudness_max_time":0.04648,"loudness_max":-16.452,"pitches":[0.674,0.105,0.379,0.196,0.033,0.058,0.078,0.207,1.000,0.159,0.041,0.089],"timbre":[40.111,-140.145,-40.260,12.347,51.560,-6.608,-16.632,-24.540,18.183,-16.449,-6.067,-0.106]},{"start":29.68726,"duration":0.30304,"confidence":0.993,"loudness_start":-25.112,"loudness_max_time":0.06488,"loudness_max":-11.289,"pitches":[0.237,0.121,0.122,0.123,0.064,0.173,0.075,0.573,1.000,0.116,0.163,0.101],"timbre":[42.074,-145.897,35.797,-48.089,73.651,41.105,34.630,7.163,24.874,-28.342,-26.740,-1.073]},{"start":29.99029,"duration":0.10122,"confidence":0.149,"loudness_start":-22.815,"loudness_max_time":0.02873,"loudness_max":-16.679,"pitches":[0.074,0.018,0.030,0.108,0.066,0.325,0.166,0.443,1.000,0.264,0.240,0.091],"timbre":[38.141,-130.312,-56.384,10.641,25.531,-25.326,-0.508,-10.219,4.988,-10.574,4.350,4.803]},{"start":30.09152,"duration":0.14794,"confidence":0.658,"loudness_start":-26.495,"loudness_max_time":0.06677,"loudness_max":-18.871,"pitches":[0.026,0.034,0.162,0.067,0.046,0.050,0.085,0.241,1.000,0.132,0.026,0.047],"timbre":[36.669,-145.958,-43.032,-67.149,38.589,-17.172,9.593,-3.054,5.843,-14.431,-31.219,21.595]},{"start":30.23946,"duration":0.15469,"confidence":0.638,"loudness_start":-24.776,"loudness_max_time":0.05337,"loudness_max":-16.727,"pitches":[0.106,0.029,0.034,0.039,0.021,0.057,0.040,0.169,1.000,0.097,0.011,0.041],"timbre":[37.580,-156.872,-66.195,-32.274,20.272,-3.030,-3.010,14.649,-9.211,-32.863,-27.583,13.319]},{"start":30.39415,"duration":0.15220,"confidence":0.715,"loudness_start":-27.405,"loudness_max_time":0.05339,"loudness_max":-18.480,"pitches":[1.000,0.125,0.593,0.366,0.125,0.313,0.235,0.640,0.647,0.251,0.081,0.103],"timbre":[37.850,-101.970,-18.951,-11.768,57.811,-14.759,-17.382,-27.308,4.133,2.831,-31.555,0.381]},{"start":30.54635,"duration":0.17306,"confidence":0.822,"loudness_start":-24.817,"loudness_max_time":0.04363,"loudness_max":-15.094,"pitches":[0.288,0.015,0.034,0.092,0.031,0.464,0.058,0.261,1.000,0.089,0.235,0.041],"timbre":[40.119,-134.994,-8.914,11.982,55.153,-0.517,11.217,2.782,5.410,-2.905,1.625,-7.691]},{"start":30.71941,"duration":0.07664,"confidence":0.647,"loudness_start":-23.571,"loudness_max_time":0.01471,"loudness_max":-14.343,"pitches":[0.190,0.174,0.082,0.136,0.155,1.000,0.200,0.140,0.086,0.055,0.067,0.092],"timbre":[39.719,-214.022,-42.148,13.399,60.514,-86.611,-44.207,-36.115,-20.774,35.153,5.465,14.333]},{"start":30.79605,"duration":0.19628,"confidence":0.668,"loudness_start":-23.715,"loudness_max_time":0.06919,"loudness_max":-15.584,"pitches":[0.045,0.019,0.024,0.055,0.048,1.000,0.075,0.048,0.136,0.103,0.275,0.071],"timbre":[38.527,-228.303,-30.717,-53.520,70.150,-14.439,-37.522,5.210,1.196,-26.181,-18.035,11.439]},{"start":30.99234,"duration":0.09193,"confidence":0.336,"loudness_start":-23.512,"loudness_max_time":0.01382,"loudness_max":-19.122,"pitches":[1.000,0.522,0.777,0.312,0.066,0.867,0.191,0.126,0.204,0.063,0.073,0.575],"timbre":[37.023,-185.934,-86.681,-7.590,19.191,-66.892,-34.947,-29.233,-12.863,11.238,-2.289,7.575]},{"start":31.08426,"duration":0.45519,"confidence":1.000,"loudness_start":-27.073,"loudness_max_time":0.08509,"loudness_max":-8.570,"pitches":[0.921,0.186,0.233,0.319,0.109,0.158,0.131,0.761,1.000,0.128,0.432,0.145],"timbre":[40.223,-165.580,11.875,-117.619,26.051,-29.345,-1.351,3.537,6.047,7.093,-17.555,7.724]},{"start":31.53946,"duration":0.13723,"confidence":0.564,"loudness_start":-21.221,"loudness_max_time":0.03393,"loudness_max":-14.562,"pitches":[1.000,0.109,0.052,0.047,0.016,0.011,0.027,0.162,0.540,0.097,0.046,0.128],"timbre":[41.449,-174.941,-44.137,7.396,67.186,-29.941,-21.064,-11.658,15.796,-3.533,-10.329,-2.656]},{"start":31.67669,"duration":0.14159,"confidence":0.574,"loudness_start":-23.260,"loudness_max_time":0.04201,"loudness_max":-16.106,"pitches":[1.000,0.068,0.105,0.140,0.045,0.344,0.098,0.132,0.630,0.152,0.217,0.114],"timbre":[39.405,-165.155,-35.665,-3.410,63.020,-3.938,-19.037,-16.646,8.331,-11.630,-8.511,-9.115]},{"start":31.81828,"duration":0.14875,"confidence":0.534,"loudness_start":-23.891,"loudness_max_time":0.04461,"loudness_max":-17.664,"pitches":[0.347,0.040,0.151,0.051,0.016,0.023,0.050,0.209,1.000,0.125,0.025,0.036],"timbre":[38.421,-171.826,-63.301,-4.049,43.904,-24.946,-11.441,-15.915,7.372,-3.667,-26.567,4.069]},{"start":31.96703,"duration":0.28304,"confidence":1.000,"loudness_start":-25.614,"loudness_max_time":0.04018,"loudness_max":-11.456,"pitches":[0.205,0.170,0.234,0.376,0.162,0.296,0.229,1.000,0.823,0.175,0.220,0.126],"timbre":[44.289,-132.621,19.471,-1.623,43.692,22.839,39.141,1.559,17.759,7.974,16.690,-5.685]},{"start":32.25007,"duration":0.14000,"confidence":0.371,"loudness_start":-20.952,"loudness_max_time":0.04446,"loudness_max":-14.946,"pitches":[0.066,0.016,0.015,0.069,0.029,0.156,0.044,0.238,1.000,0.103,0.048,0.051],"timbre":[40.339,-156.388,-49.014,-7.515,20.807,-14.712,3.422,1.718,7.933,-19.451,-16.627,10.770]},{"start":32.39007,"duration":0.16281,"confidence":0.421,"loudness_start":-23.211,"loudness_max_time":0.04164,"loudness_max":-17.700,"pitches":[0.237,0.055,0.039,0.099,0.020,0.028,0.039,0.105,1.000,0.172,0.024,0.071],"timbre":[38.146,-137.677,-74.536,-0.665,34.342,-35.797,-3.394,-23.893,1.485,-6.892,-14.250,11.401]},{"start":32.55288,"duration":0.13483,"confidence":0.669,"loudness_start":-25.498,"loudness_max_time":0.01560,"loudness_max":-18.143,"pitches":[0.037,0.009,0.032,0.288,0.027,0.269,0.082,0.219,1.000,0.138,0.169,0.095],"timbre":[37.516,-142.314,-44.615,18.942,44.608,-68.072,-15.863,-8.416,-10.210,25.774,-10.983,0.043]},{"start":32.68771,"duration":0.11102,"confidence":0.619,"loudness_start":-27.431,"loudness_max_time":0.02260,"loudness_max":-19.220,"pitches":[0.547,0.052,0.351,0.289,0.047,0.185,0.203,0.454,1.000,0.279,0.034,0.040],"timbre":[37.444,-131.225,-38.006,-1.986,62.868,-39.407,-16.888,-15.821,1.348,17.844,6.779,-2.753]},{"start":32.79873,"duration":0.18503,"confidence":0.749,"loudness_start":-25.016,"loudness_max_time":0.04270,"loudness_max":-15.496,"pitches":[0.563,0.050,0.045,0.101,0.032,0.100,0.043,0.299,1.000,0.046,0.019,0.050],"timbre":[39.684,-138.016,-7.748,-9.670,53.315,-9.084,6.849,14.584,4.569,-1.613,-7.416,-7.397]},{"start":32.98376,"duration":0.12222,"confidence":0.689,"loudness_start":-23.571,"loudness_max_time":0.01660,"loudness_max":-14.003,"pitches":[0.023,0.026,0.050,0.076,0.048,1.000,0.133,0.156,0.278,0.061,0.014,0.015],"timbre":[40.018,-206.608,-31.443,24.397,56.484,-82.298,-48.785,-38.393,-20.429,43.100,7.990,12.327]},{"start":33.10599,"duration":0.11116,"confidence":0.801,"loudness_start":-23.281,"loudness_max_time":0.03145,"loudness_max":-13.902,"pitches":[0.035,0.015,0.012,0.046,0.057,1.000,0.174,0.059,0.242,0.073,0.202,0.068],"timbre":[41.033,-212.250,-46.418,29.594,46.525,-19.417,-46.070,-36.354,-7.542,-11.737,2.225,0.984]},{"start":33.21714,"duration":0.16136,"confidence":0.598,"loudness_start":-24.143,"loudness_max_time":0.05240,"loudness_max":-16.490,"pitches":[1.000,0.253,0.119,0.129,0.042,0.657,0.102,0.330,0.936,0.156,0.822,0.235],"timbre":[38.047,-194.878,-75.279,-38.402,42.797,-2.867,-25.649,-5.789,12.717,-52.567,-28.627,7.905]},{"start":33.37850,"duration":0.41760,"confidence":1.000,"loudness_start":-26.278,"loudness_max_time":0.05429,"loudness_max":-7.913,"pitches":[0.768,0.146,0.209,0.297,0.060,0.088,0.073,0.527,1.000,0.075,0.291,0.086],"timbre":[44.031,-141.930,10.873,-20.047,44.120,53.305,20.590,2.908,17.340,-19.307,-6.875,-1.150]},{"start":33.79610,"duration":0.15238,"confidence":0.519,"loudness_start":-20.614,"loudness_max_time":0.03822,"loudness_max":-14.444,"pitches":[1.000,0.064,0.152,0.106,0.020,0.015,0.036,0.124,0.537,0.099,0.053,0.079],"timbre":[41.403,-172.300,-30.037,-1.093,60.266,-20.301,-23.698,-6.440,7.452,-4.850,-16.625,-6.397]},{"start":33.94848,"duration":0.12086,"confidence":0.700,"loudness_start":-22.399,"loudness_max_time":0.03655,"loudness_max":-13.144,"pitches":[0.831,0.077,0.071,0.088,0.041,0.285,0.088,0.298,1.000,0.187,0.195,0.113],"timbre":[41.020,-157.090,-46.049,10.186,40.398,6.814,-18.131,-14.596,9.771,-22.549,-18.748,-8.362]},{"start":34.06934,"duration":0.12254,"confidence":0.636,"loudness_start":-24.151,"loudness_max_time":0.04921,"loudness_max":-16.029,"pitches":[0.972,0.164,0.233,0.121,0.037,0.070,0.104,0.254,1.000,0.305,0.070,0.238],"timbre":[39.746,-149.010,-49.824,-24.244,48.600,1.021,-17.443,-9.155,19.774,-17.276,-14.773,-3.202]},{"start":34.19188,"duration":0.45673,"confidence":0.959,"loudness_start":-24.445,"loudness_max_time":0.08077,"loudness_max":-11.158,"pitches":[0.183,0.085,0.159,0.183,0.117,0.148,0.169,0.793,1.000,0.185,0.189,0.169],"timbre":[39.674,-155.707,19.553,-75.480,45.143,-10.188,26.009,23.639,14.589,-9.667,-26.129,7.268]},{"start":34.64862,"duration":0.15805,"confidence":0.482,"loudness_start":-23.966,"loudness_max_time":0.01906,"loudness_max":-17.626,"pitches":[0.013,0.021,0.109,0.071,0.014,0.037,0.058,0.126,1.000,0.118,0.015,0.033],"timbre":[38.216,-125.964,-89.282,22.623,18.788,-29.862,-18.003,-17.379,7.515,-11.684,-15.551,16.600]},{"start":34.80667,"duration":0.11687,"confidence":0.832,"loudness_start":-27.964,"loudness_max_time":0.03747,"loudness_max":-17.009,"pitches":[0.071,0.030,0.123,0.157,0.073,0.390,0.139,0.348,1.000,0.146,0.286,0.128],"timbre":[37.183,-117.256,-54.603,5.793,15.753,24.188,-10.504,5.028,-7.765,-13.003,-9.904,13.661]},{"start":34.92354,"duration":0.12073,"confidence":0.818,"loudness_start":-28.549,"loudness_max_time":0.05321,"loudness_max":-15.919,"pitches":[0.674,0.200,0.134,0.272,0.060,0.155,0.077,0.308,1.000,0.349,0.092,0.179],"timbre":[38.750,-123.768,-42.991,-30.629,55.115,10.465,-12.429,-7.989,7.355,-10.014,-17.570,3.545]},{"start":35.04426,"duration":0.18630,"confidence":0.742,"loudness_start":-25.235,"loudness_max_time":0.06806,"loudness_max":-16.434,"pitches":[0.258,0.018,0.065,0.295,0.041,0.297,0.046,0.279,1.000,0.094,0.190,0.051],"timbre":[38.607,-160.198,-2.693,-45.684,78.486,-9.031,7.413,-1.201,-1.869,-7.054,-25.252,3.432]},{"start":35.23057,"duration":0.10005,"confidence":0.631,"loudness_start":-23.536,"loudness_max_time":0.03407,"loudness_max":-14.939,"pitches":[0.126,0.185,0.282,0.254,0.322,1.000,0.306,0.186,0.268,0.117,0.089,0.106],"timbre":[40.026,-201.895,-36.006,13.126,54.892,-13.489,-24.840,-34.565,-11.874,22.319,6.791,9.482]},{"start":35.33061,"duration":0.16249,"confidence":0.694,"loudness_start":-23.362,"loudness_max_time":0.05807,"loudness_max":-14.823,"pitches":[0.127,0.058,0.037,0.068,0.039,1.000,0.093,0.064,0.248,0.067,0.156,0.085],"timbre":[39.274,-215.374,-32.578,-32.788,69.321,6.017,-32.738,-11.056,-4.579,-38.834,-25.039,10.829]},{"start":35.49311,"duration":0.15415,"confidence":0.686,"loudness_start":-24.334,"loudness_max_time":0.04162,"loudness_max":-16.054,"pitches":[0.762,0.269,0.321,0.182,0.062,0.792,0.170,0.294,0.846,0.164,1.000,0.246],"timbre":[39.113,-154.615,-72.350,8.239,36.331,-22.630,-39.031,-34.925,-3.206,-20.928,-34.025,14.096]},{"start":35.64726,"duration":0.41905,"confidence":1.000,"loudness_start":-26.404,"loudness_max_time":0.05319,"loudness_max":-8.517,"pitches":[1.000,0.111,0.070,0.062,0.038,0.104,0.054,0.350,0.243,0.065,0.332,0.103],"timbre":[44.739,-138.272,8.416,-15.861,41.796,55.502,16.794,3.872,13.589,-13.781,8.269,-4.146]},{"start":36.06630,"duration":0.14952,"confidence":0.735,"loudness_start":-20.466,"loudness_max_time":0.04165,"loudness_max":-11.825,"pitches":[1.000,0.068,0.097,0.035,0.019,0.046,0.050,0.143,0.162,0.047,0.061,0.062],"timbre":[44.111,-165.340,39.882,-10.031,57.709,-0.458,-15.111,6.486,3.636,-6.810,7.666,-11.876]},{"start":36.21583,"duration":0.12943,"confidence":0.102,"loudness_start":-18.462,"loudness_max_time":0.04171,"loudness_max":-14.328,"pitches":[1.000,0.570,0.165,0.043,0.058,0.144,0.104,0.131,0.244,0.102,0.112,0.172],"timbre":[43.015,-188.764,0.815,6.975,25.926,-43.779,-2.252,-3.420,-6.721,6.701,-2.459,-7.079]},{"start":36.34526,"duration":0.15850,"confidence":0.252,"loudness_start":-19.542,"loudness_max_time":0.03689,"loudness_max":-15.574,"pitches":[0.593,1.000,0.085,0.026,0.020,0.135,0.072,0.073,0.401,0.078,0.027,0.071],"timbre":[40.304,-158.474,-43.781,16.982,8.872,-34.009,-13.008,-10.970,-0.489,-21.604,-15.917,-1.518]},{"start":36.50376,"duration":0.29896,"confidence":0.989,"loudness_start":-24.351,"loudness_max_time":0.03031,"loudness_max":-10.583,"pitches":[0.179,0.404,1.000,0.188,0.051,0.132,0.079,0.229,0.220,0.116,0.078,0.098],"timbre":[44.702,-128.438,8.515,26.790,32.510,8.203,31.090,2.331,13.308,16.736,5.071,-5.393]},{"start":36.80272,"duration":0.11125,"confidence":0.284,"loudness_start":-21.322,"loudness_max_time":0.00888,"loudness_max":-15.916,"pitches":[0.485,0.936,0.256,0.083,0.081,0.566,0.159,0.379,1.000,0.287,0.274,0.184],"timbre":[38.621,-128.021,-65.190,6.402,12.398,-90.762,-25.811,-4.535,-8.129,7.127,-4.563,10.213]},{"start":36.91397,"duration":0.13297,"confidence":0.457,"loudness_start":-25.231,"loudness_max_time":0.03559,"loudness_max":-19.433,"pitches":[0.339,0.599,0.357,0.100,0.035,0.164,0.086,0.226,1.000,0.216,0.063,0.058],"timbre":[36.856,-135.735,-91.293,-19.455,19.520,-19.009,-24.959,-11.763,-2.540,-4.378,-23.245,9.496]},{"start":37.04694,"duration":0.13841,"confidence":0.961,"loudness_start":-27.449,"loudness_max_time":0.07698,"loudness_max":-14.108,"pitches":[1.000,0.892,0.177,0.067,0.142,0.256,0.153,0.241,0.831,0.251,0.303,0.229],"timbre":[39.689,-157.056,-34.480,-42.162,35.314,43.220,6.209,27.956,0.989,21.404,-24.899,10.871]},{"start":37.18535,"duration":0.16558,"confidence":0.798,"loudness_start":-25.401,"loudness_max_time":0.05760,"loudness_max":-14.862,"pitches":[1.000,0.122,0.226,0.097,0.105,0.798,0.260,0.153,0.509,0.140,0.141,0.101],"timbre":[39.850,-142.950,-56.265,-15.823,48.859,17.888,3.067,-10.049,21.781,-4.226,-17.214,-5.928]},{"start":37.35093,"duration":0.14154,"confidence":0.763,"loudness_start":-24.561,"loudness_max_time":0.04259,"loudness_max":-15.031,"pitches":[1.000,0.128,0.037,0.032,0.065,0.527,0.112,0.253,0.267,0.083,0.293,0.123],"timbre":[40.982,-148.436,-28.448,-0.407,43.594,-18.160,9.003,0.872,15.222,7.189,-14.896,-17.701]},{"start":37.49247,"duration":0.13016,"confidence":0.667,"loudness_start":-22.443,"loudness_max_time":0.03735,"loudness_max":-13.672,"pitches":[0.255,0.126,0.120,0.108,0.151,1.000,0.155,0.040,0.077,0.074,0.062,0.093],"timbre":[40.749,-180.975,-60.743,14.554,45.439,-17.722,-10.688,-38.424,-3.021,14.801,-1.751,0.118]},{"start":37.62263,"duration":0.16862,"confidence":0.638,"loudness_start":-23.048,"loudness_max_time":0.03652,"loudness_max":-15.423,"pitches":[0.088,0.028,0.017,0.016,0.021,1.000,0.078,0.017,0.023,0.048,0.206,0.052],"timbre":[39.703,-225.529,-62.283,-7.576,50.439,-13.476,-25.739,-21.564,4.409,-12.727,1.794,-0.735]},{"start":37.79125,"duration":0.08082,"confidence":0.491,"loudness_start":-23.789,"loudness_max_time":0.00714,"loudness_max":-17.048,"pitches":[0.239,0.394,0.354,0.340,0.864,1.000,0.557,0.547,0.076,0.077,0.024,0.192],"timbre":[37.697,-173.841,-97.050,-0.663,22.675,-82.566,-38.916,-37.182,-7.343,18.651,-8.914,8.176]},{"start":37.87206,"duration":0.45211,"confidence":1.000,"loudness_start":-25.997,"loudness_max_time":0.08867,"loudness_max":-7.213,"pitches":[0.254,0.055,0.047,0.047,0.047,1.000,0.196,0.187,0.023,0.021,0.131,0.040],"timbre":[40.889,-174.790,2.392,-119.733,40.834,13.359,20.641,8.574,8.125,-17.661,-6.136,-5.580]},{"start":38.32417,"duration":0.15243,"confidence":0.504,"loudness_start":-20.512,"loudness_max_time":0.04138,"loudness_max":-14.889,"pitches":[1.000,0.103,0.025,0.011,0.027,0.184,0.022,0.060,0.107,0.036,0.038,0.116],"timbre":[40.998,-178.577,-36.657,1.625,69.213,-20.308,-18.661,-12.707,11.178,-11.791,-13.791,-4.242]},{"start":38.47660,"duration":0.15320,"confidence":0.624,"loudness_start":-24.361,"loudness_max_time":0.02489,"loudness_max":-14.638,"pitches":[1.000,0.736,0.215,0.053,0.039,0.225,0.073,0.075,0.327,0.170,0.180,0.169],"timbre":[39.762,-174.208,-55.089,12.182,36.360,-23.330,-9.582,0.207,2.298,9.900,17.405,-7.027]},{"start":38.62980,"duration":0.14812,"confidence":0.447,"loudness_start":-24.829,"loudness_max_time":0.02430,"loudness_max":-18.388,"pitches":[0.559,1.000,0.150,0.040,0.014,0.101,0.050,0.125,0.483,0.105,0.024,0.061],"timbre":[38.544,-162.825,-57.202,-16.666,33.539,-59.588,-15.854,-17.413,3.988,22.492,11.376,-6.336]},{"start":38.77791,"duration":0.26494,"confidence":0.930,"loudness_start":-23.837,"loudness_max_time":0.01957,"loudness_max":-11.059,"pitches":[0.264,0.431,1.000,0.264,0.071,0.213,0.070,0.250,0.161,0.067,0.054,0.083],"timbre":[45.085,-131.303,17.881,31.735,33.626,-36.158,25.931,-0.729,17.203,18.989,-13.587,-4.007]},{"start":39.04286,"duration":0.13855,"confidence":0.632,"loudness_start":-23.806,"loudness_max_time":0.03773,"loudness_max":-14.919,"pitches":[0.480,1.000,0.270,0.057,0.033,0.182,0.113,0.225,0.921,0.232,0.317,0.078],"timbre":[39.695,-120.511,-51.964,5.303,11.980,2.518,-8.858,-17.441,-5.565,-6.551,-2.616,-1.646]},{"start":39.18141,"duration":0.13424,"confidence":0.528,"loudness_start":-23.970,"loudness_max_time":0.03399,"loudness_max":-17.342,"pitches":[0.488,0.640,0.194,0.037,0.026,0.170,0.093,0.217,1.000,0.172,0.057,0.125],"timbre":[38.100,-124.003,-87.955,-1.624,19.236,-34.878,-25.691,-21.728,4.449,-3.884,-10.752,5.290]},{"start":39.31565,"duration":0.14132,"confidence":0.892,"loudness_start":-25.542,"loudness_max_time":0.04704,"loudness_max":-13.760,"pitches":[0.985,1.000,0.191,0.061,0.167,0.532,0.233,0.236,0.888,0.296,0.480,0.283],"timbre":[39.151,-157.535,-55.400,-2.519,37.605,30.658,14.317,11.847,-6.235,4.319,-32.733,13.847]},{"start":39.45696,"duration":0.15524,"confidence":0.647,"loudness_start":-26.334,"loudness_max_time":0.04603,"loudness_max":-18.329,"pitches":[1.000,0.187,0.254,0.128,0.100,0.804,0.244,0.237,0.585,0.195,0.167,0.140],"timbre":[37.916,-138.477,-57.080,-42.391,39.115,-12.147,1.507,-24.925,7.660,16.233,-14.948,-0.404]},{"start":39.61220,"duration":0.14689,"confidence":0.605,"loudness_start":-22.785,"loudness_max_time":0.06191,"loudness_max":-16.283,"pitches":[1.000,0.130,0.058,0.031,0.065,0.550,0.112,0.266,0.221,0.032,0.026,0.236],"timbre":[40.847,-152.889,-21.926,-14.833,33.795,-41.914,6.466,11.748,15.792,7.637,-16.906,0.582]},{"start":39.75909,"duration":0.13878,"confidence":0.681,"loudness_start":-22.454,"loudness_max_time":0.03552,"loudness_max":-13.339,"pitches":[0.091,0.083,0.049,0.049,0.096,1.000,0.128,0.081,0.066,0.048,0.042,0.043],"timbre":[41.683,-184.534,-51.922,22.150,39.529,-34.082,-21.274,-43.336,-1.981,18.388,-20.775,4.648]},{"start":39.89787,"duration":0.12045,"confidence":0.670,"loudness_start":-22.799,"loudness_max_time":0.03702,"loudness_max":-14.237,"pitches":[0.267,0.037,0.014,0.043,0.077,1.000,0.170,0.045,0.056,0.074,0.183,0.167],"timbre":[40.222,-206.693,-51.914,-7.842,35.286,5.064,-23.865,-10.624,11.968,-43.087,-7.227,-0.754]},{"start":40.01832,"duration":0.13061,"confidence":0.563,"loudness_start":-24.040,"loudness_max_time":0.04972,"loudness_max":-16.805,"pitches":[0.457,0.245,0.243,0.099,0.082,1.000,0.155,0.104,0.083,0.170,0.904,0.380],"timbre":[39.168,-154.621,-86.801,-13.049,34.777,-5.632,-28.510,-16.600,14.594,-38.093,-24.655,2.517]},{"start":40.14893,"duration":0.43964,"confidence":1.000,"loudness_start":-27.460,"loudness_max_time":0.07709,"loudness_max":-8.264,"pitches":[0.319,0.034,0.053,0.068,0.061,1.000,0.190,0.146,0.020,0.021,0.110,0.035],"timbre":[40.091,-167.812,-7.292,-132.031,42.665,26.481,18.396,6.371,14.643,-13.575,-14.333,0.225]},{"start":40.58857,"duration":0.15619,"confidence":0.295,"loudness_start":-19.600,"loudness_max_time":0.04336,"loudness_max":-15.033,"pitches":[1.000,0.091,0.128,0.040,0.045,0.193,0.047,0.172,0.157,0.066,0.085,0.046],"timbre":[41.099,-159.508,-23.021,10.500,74.865,-28.224,-25.412,-13.491,15.017,-6.270,-29.971,-2.309]},{"start":40.74476,"duration":0.14122,"confidence":0.805,"loudness_start":-24.014,"loudness_max_time":0.03032,"loudness_max":-13.099,"pitches":[1.000,0.690,0.202,0.055,0.040,0.221,0.076,0.088,0.332,0.176,0.217,0.145],"timbre":[41.139,-165.740,-53.368,33.954,35.155,-22.676,-14.822,-11.689,12.184,-5.397,7.858,-8.603]},{"start":40.88599,"duration":0.13737,"confidence":0.534,"loudness_start":-24.147,"loudness_max_time":0.02460,"loudness_max":-16.543,"pitches":[0.702,1.000,0.120,0.032,0.015,0.100,0.045,0.082,0.410,0.104,0.025,0.082],"timbre":[37.653,-147.252,-96.268,11.926,22.671,-28.997,-23.717,-25.906,2.612,-9.114,2.570,-2.848]},{"start":41.02336,"duration":0.41420,"confidence":1.000,"loudness_start":-27.194,"loudness_max_time":0.04124,"loudness_max":-11.400,"pitches":[0.190,0.162,1.000,0.159,0.071,0.097,0.061,0.244,0.463,0.093,0.073,0.095],"timbre":[43.301,-142.831,-4.717,11.546,43.945,36.680,31.979,2.276,17.677,12.304,2.007,-9.659]},{"start":41.43755,"duration":0.15723,"confidence":0.380,"loudness_start":-23.020,"loudness_max_time":0.03845,"loudness_max":-17.550,"pitches":[0.275,0.638,0.313,0.066,0.039,0.181,0.073,0.106,1.000,0.208,0.044,0.072],"timbre":[38.140,-143.150,-66.488,-1.060,20.546,-21.914,-4.148,-18.354,-0.517,-21.783,-18.443,4.561]},{"start":41.59478,"duration":0.11882,"confidence":0.945,"loudness_start":-25.909,"loudness_max_time":0.03414,"loudness_max":-11.707,"pitches":[0.931,0.870,0.187,0.093,0.214,0.913,0.231,0.380,1.000,0.376,0.588,0.307],"timbre":[40.494,-150.313,-65.082,33.430,31.070,25.324,6.002,6.146,-3.772,10.032,-15.821,20.224]},{"start":41.71361,"duration":0.11678,"confidence":0.698,"loudness_start":-26.908,"loudness_max_time":0.05037,"loudness_max":-16.802,"pitches":[0.884,0.633,0.243,0.139,0.153,1.000,0.551,0.267,0.657,0.353,0.365,0.288],"timbre":[38.613,-111.090,-59.240,-39.917,25.735,9.043,-0.229,-16.775,10.845,-6.599,-21.895,-10.333]},{"start":41.83039,"duration":0.17918,"confidence":0.730,"loudness_start":-24.049,"loudness_max_time":0.07639,"loudness_max":-15.140,"pitches":[0.697,0.103,0.037,0.029,0.047,1.000,0.184,0.243,0.389,0.081,0.219,0.118],"timbre":[39.344,-160.895,-31.716,-62.373,56.318,-14.915,13.845,4.989,18.538,0.122,-31.290,-9.035]},{"start":42.00957,"duration":0.11864,"confidence":0.577,"loudness_start":-23.110,"loudness_max_time":0.04842,"loudness_max":-15.640,"pitches":[0.303,0.190,0.128,0.161,0.331,1.000,0.267,0.153,0.125,0.128,0.118,0.199],"timbre":[39.997,-193.932,-44.584,-12.870,38.908,-4.400,-1.283,-38.813,-4.519,19.305,-25.232,2.978]},{"start":42.12821,"duration":0.15986,"confidence":0.630,"loudness_start":-23.064,"loudness_max_time":0.04223,"loudness_max":-16.003,"pitches":[0.086,0.028,0.021,0.027,0.044,1.000,0.089,0.033,0.022,0.046,0.157,0.054],"timbre":[40.253,-213.378,-39.660,-58.117,46.404,-1.900,-30.769,23.087,13.158,-25.344,-7.215,1.537]},{"start":42.28807,"duration":0.14671,"confidence":0.503,"loudness_start":-23.325,"loudness_max_time":0.02004,"loudness_max":-16.061,"pitches":[1.000,0.239,0.137,0.029,0.052,0.907,0.180,0.147,0.080,0.136,0.916,0.245],"timbre":[39.184,-154.918,-99.562,22.527,28.139,-12.099,-33.105,-30.835,16.546,-30.505,-10.685,11.904]},{"start":42.43478,"duration":0.42925,"confidence":1.000,"loudness_start":-28.008,"loudness_max_time":0.05407,"loudness_max":-7.630,"pitches":[0.429,0.039,0.026,0.055,0.059,1.000,0.203,0.192,0.027,0.022,0.126,0.048],"timbre":[43.185,-164.177,6.837,-72.593,47.618,76.387,35.584,16.201,20.735,-21.585,-11.210,-9.763]},{"start":42.86404,"duration":0.15510,"confidence":0.434,"loudness_start":-19.598,"loudness_max_time":0.03278,"loudness_max":-15.042,"pitches":[1.000,0.077,0.097,0.031,0.015,0.117,0.036,0.130,0.168,0.050,0.039,0.071],"timbre":[41.526,-181.153,-23.114,7.120,77.597,-35.075,-24.382,6.357,15.883,-7.145,-1.329,-3.779]},{"start":43.01914,"duration":0.11855,"confidence":0.524,"loudness_start":-22.897,"loudness_max_time":0.01015,"loudness_max":-14.250,"pitches":[1.000,0.767,0.199,0.062,0.032,0.129,0.088,0.152,0.298,0.171,0.151,0.155],"timbre":[40.053,-179.165,-38.536,19.831,28.470,-84.048,-13.947,-6.461,-7.204,13.561,-8.010,-3.726]},{"start":43.13769,"duration":0.16050,"confidence":0.617,"loudness_start":-24.515,"loudness_max_time":0.04616,"loudness_max":-16.210,"pitches":[0.467,1.000,0.186,0.043,0.020,0.071,0.045,0.057,0.413,0.089,0.044,0.031],"timbre":[38.998,-150.119,-72.628,8.370,35.076,-27.725,-19.545,-26.238,5.312,3.291,-36.653,-0.375]},{"start":43.29819,"duration":0.43057,"confidence":1.000,"loudness_start":-25.893,"loudness_max_time":0.02633,"loudness_max":-10.755,"pitches":[0.173,0.155,1.000,0.152,0.067,0.223,0.048,0.196,0.510,0.092,0.066,0.118],"timbre":[44.204,-144.716,-4.540,44.935,32.620,-13.129,17.975,7.437,8.336,23.739,-6.933,1.328]},{"start":43.72875,"duration":0.09116,"confidence":0.469,"loudness_start":-23.784,"loudness_max_time":0.01384,"loudness_max":-17.822,"pitches":[0.905,1.000,0.921,0.721,0.337,0.411,0.173,0.100,0.076,0.075,0.428,0.538],"timbre":[37.318,-162.962,-85.588,-0.621,32.008,-73.808,-25.645,-23.489,-1.614,9.442,1.471,4.742]},{"start":43.81991,"duration":0.16363,"confidence":0.815,"loudness_start":-26.209,"loudness_max_time":0.07434,"loudness_max":-14.102,"pitches":[1.000,0.967,0.190,0.037,0.121,0.455,0.185,0.229,0.827,0.171,0.227,0.289],"timbre":[38.339,-170.948,-43.981,-65.103,32.216,-13.047,4.445,-1.728,-5.158,9.621,-54.518,15.231]},{"start":43.98354,"duration":0.15937,"confidence":0.738,"loudness_start":-25.921,"loudness_max_time":0.04724,"loudness_max":-16.099,"pitches":[1.000,0.135,0.149,0.066,0.091,0.480,0.204,0.121,0.382,0.139,0.139,0.149],"timbre":[39.372,-150.022,-44.023,-19.120,34.951,-6.065,0.580,-14.217,2.457,1.826,-22.720,-19.047]},{"start":44.14290,"duration":0.14299,"confidence":0.786,"loudness_start":-23.326,"loudness_max_time":0.03062,"loudness_max":-13.518,"pitches":[1.000,0.113,0.033,0.034,0.082,0.450,0.089,0.288,0.312,0.093,0.324,0.174],"timbre":[41.315,-133.260,-30.945,19.675,37.537,-9.574,16.996,-9.997,18.303,2.978,-1.318,-20.319]},{"start":44.28590,"duration":0.09256,"confidence":0.618,"loudness_start":-23.092,"loudness_max_time":0.03513,"loudness_max":-14.596,"pitches":[0.147,0.338,0.321,0.307,0.783,1.000,0.438,0.443,0.070,0.049,0.048,0.097],"timbre":[40.631,-176.908,-57.087,5.285,41.218,-19.046,-12.309,-38.983,-6.884,30.858,-11.514,1.968]},{"start":44.37846,"duration":0.15410,"confidence":0.644,"loudness_start":-23.111,"loudness_max_time":0.07254,"loudness_max":-15.046,"pitches":[0.054,0.055,0.051,0.030,0.042,1.000,0.136,0.030,0.023,0.058,0.196,0.081],"timbre":[39.180,-203.112,-44.066,-72.284,45.829,-14.865,-24.592,0.779,9.037,-23.792,-26.481,2.928]},{"start":44.53256,"duration":0.16671,"confidence":0.460,"loudness_start":-23.876,"loudness_max_time":0.05763,"loudness_max":-17.664,"pitches":[0.394,0.195,0.095,0.129,0.093,0.611,0.122,0.133,0.073,0.149,1.000,0.183],"timbre":[37.435,-193.358,-79.341,-34.299,37.596,-14.266,-22.054,0.974,15.288,-42.466,-18.546,3.989]},{"start":44.69927,"duration":0.17184,"confidence":1.000,"loudness_start":-27.147,"loudness_max_time":0.05508,"loudness_max":-8.419,"pitches":[0.951,0.125,0.094,0.033,0.084,0.356,0.120,1.000,0.083,0.078,0.805,0.124],"timbre":[45.278,-140.461,22.754,-66.053,35.023,51.584,37.929,11.555,17.829,-11.035,14.743,-11.554]},{"start":44.87111,"duration":0.14204,"confidence":0.282,"loudness_start":-13.478,"loudness_max_time":0.00883,"loudness_max":-8.710,"pitches":[1.000,0.153,0.133,0.032,0.036,0.274,0.062,0.308,0.043,0.053,0.291,0.169],"timbre":[47.651,-93.669,37.643,13.875,-2.468,-65.703,4.396,-14.144,1.949,9.396,-10.855,-5.303]},{"start":45.01315,"duration":0.25515,"confidence":0.547,"loudness_start":-14.329,"loudness_max_time":0.01161,"loudness_max":-7.972,"pitches":[1.000,0.085,0.052,0.108,0.113,0.523,0.151,0.088,0.056,0.082,0.254,0.082],"timbre":[46.898,-89.346,3.576,50.923,12.173,-55.294,-38.554,-40.331,-9.086,14.392,-28.025,-6.546]},{"start":45.26830,"duration":0.14363,"confidence":0.267,"loudness_start":-20.940,"loudness_max_time":0.03075,"loudness_max":-15.397,"pitches":[1.000,0.715,0.208,0.050,0.047,0.157,0.106,0.120,0.362,0.249,0.712,0.252],"timbre":[41.021,-168.759,-43.944,-5.849,19.156,-28.733,-22.490,-15.712,4.344,1.037,-3.564,-10.978]},{"start":45.41193,"duration":0.12426,"confidence":0.356,"loudness_start":-23.109,"loudness_max_time":0.03622,"loudness_max":-17.575,"pitches":[0.677,1.000,0.113,0.044,0.024,0.069,0.066,0.216,0.403,0.127,0.338,0.096],"timbre":[39.170,-176.026,-52.783,-8.286,21.825,-21.878,-13.901,-25.135,7.754,-8.693,-1.243,-12.751]},{"start":45.53619,"duration":0.17828,"confidence":0.930,"loudness_start":-23.687,"loudness_max_time":0.05306,"loudness_max":-11.045,"pitches":[0.216,1.000,0.077,0.011,0.027,0.111,0.045,0.281,0.233,0.072,0.280,0.042],"timbre":[43.983,-145.368,27.764,-61.061,49.208,14.377,38.528,5.007,17.353,-3.921,-11.273,-9.617]},{"start":45.71447,"duration":0.13460,"confidence":0.136,"loudness_start":-15.509,"loudness_max_time":0.01079,"loudness_max":-11.613,"pitches":[0.449,1.000,0.174,0.039,0.027,0.057,0.064,0.394,0.744,0.221,0.334,0.084],"timbre":[43.938,-169.371,6.489,34.483,27.791,-80.865,18.192,-13.878,2.163,29.419,-13.384,11.060]},{"start":45.84907,"duration":0.11574,"confidence":0.423,"loudness_start":-19.618,"loudness_max_time":0.02068,"loudness_max":-13.381,"pitches":[0.496,1.000,0.243,0.078,0.058,0.690,0.199,0.383,0.988,0.327,0.824,0.091],"timbre":[41.679,-160.345,-38.756,25.003,38.369,-56.617,-1.187,-25.059,-0.834,6.780,5.774,3.286]},{"start":45.96481,"duration":0.17306,"confidence":0.769,"loudness_start":-22.361,"loudness_max_time":0.04580,"loudness_max":-13.032,"pitches":[0.318,0.603,0.192,0.032,0.024,0.087,0.060,0.173,1.000,0.254,0.569,0.093],"timbre":[41.681,-123.141,-50.047,-8.079,12.921,24.084,-16.569,-14.888,11.259,-25.346,-8.276,-5.915]},{"start":46.13787,"duration":0.09456,"confidence":0.521,"loudness_start":-23.384,"loudness_max_time":0.01435,"loudness_max":-14.215,"pitches":[0.767,0.897,0.159,0.139,0.312,0.725,0.223,0.475,0.993,0.723,1.000,0.341],"timbre":[39.949,-187.256,-46.936,34.158,15.476,-81.021,12.069,23.016,-16.547,9.148,0.147,18.861]},{"start":46.23243,"duration":0.13850,"confidence":0.495,"loudness_start":-24.855,"loudness_max_time":0.05830,"loudness_max":-18.484,"pitches":[0.834,0.299,0.366,0.178,0.195,0.877,0.250,0.233,0.537,0.341,1.000,0.100],"timbre":[38.327,-161.434,-46.189,-58.634,42.673,-25.200,1.201,-2.892,13.954,1.228,-24.782,-1.417]},{"start":46.37093,"duration":0.16816,"confidence":0.500,"loudness_start":-22.752,"loudness_max_time":0.07072,"loudness_max":-17.046,"pitches":[0.373,0.112,0.036,0.024,0.062,0.322,0.080,0.143,0.185,0.140,1.000,0.035],"timbre":[39.730,-172.808,-35.976,-46.548,35.853,-31.620,4.551,-6.551,9.931,5.970,-28.854,-0.854]},{"start":46.53909,"duration":0.13764,"confidence":0.826,"loudness_start":-22.312,"loudness_max_time":0.04420,"loudness_max":-11.448,"pitches":[0.095,0.130,0.117,0.124,0.210,1.000,0.174,0.072,0.090,0.145,0.498,0.122],"timbre":[41.927,-165.098,-48.995,11.304,25.800,26.419,-9.495,-44.442,-3.693,-8.606,-21.835,-1.150]},{"start":46.67673,"duration":0.12803,"confidence":0.789,"loudness_start":-22.721,"loudness_max_time":0.04408,"loudness_max":-12.555,"pitches":[0.056,0.051,0.031,0.041,0.073,1.000,0.132,0.028,0.020,0.102,0.399,0.101],"timbre":[42.082,-194.101,-55.898,4.621,33.853,5.970,-36.303,-30.024,6.493,-22.129,-23.329,2.252]},{"start":46.80476,"duration":0.15837,"confidence":0.560,"loudness_start":-23.227,"loudness_max_time":0.05005,"loudness_max":-15.605,"pitches":[0.388,0.091,0.076,0.037,0.034,0.257,0.040,0.041,0.143,0.116,1.000,0.154],"timbre":[39.392,-182.098,-85.183,-24.150,22.087,-5.221,-29.517,-20.722,9.861,-35.782,-20.299,5.685]},{"start":46.96313,"duration":0.31175,"confidence":1.000,"loudness_start":-24.951,"loudness_max_time":0.05307,"loudness_max":-7.891,"pitches":[0.193,0.047,0.055,0.096,0.100,1.000,0.250,0.281,0.044,0.049,0.451,0.063],"timbre":[44.996,-140.720,12.038,-61.766,36.107,49.342,26.852,6.129,21.454,-11.469,-3.715,-6.670]},{"start":47.27488,"duration":0.25107,"confidence":0.577,"loudness_start":-16.712,"loudness_max_time":0.01413,"loudness_max":-9.390,"pitches":[1.000,0.077,0.086,0.153,0.156,0.697,0.203,0.051,0.068,0.066,0.361,0.067],"timbre":[45.877,-96.640,-8.002,41.596,20.697,-49.672,-43.721,-26.569,-5.415,15.173,-27.415,-2.941]},{"start":47.52594,"duration":0.15202,"confidence":0.752,"loudness_start":-23.992,"loudness_max_time":0.04838,"loudness_max":-14.545,"pitches":[1.000,0.691,0.239,0.072,0.077,0.233,0.086,0.070,0.352,0.188,0.413,0.172],"timbre":[39.861,-176.952,-45.985,-13.683,36.533,9.539,-11.277,7.780,6.225,-3.543,-18.553,-6.582]},{"start":47.67796,"duration":0.13401,"confidence":0.665,"loudness_start":-23.926,"loudness_max_time":0.03477,"loudness_max":-15.879,"pitches":[0.768,1.000,0.125,0.035,0.015,0.046,0.028,0.119,0.388,0.117,0.083,0.095],"timbre":[38.993,-147.337,-85.476,12.722,31.362,-24.339,-24.111,-26.733,2.804,1.248,-24.179,-0.334]},{"start":47.81197,"duration":0.30553,"confidence":1.000,"loudness_start":-26.384,"loudness_max_time":0.04398,"loudness_max":-11.119,"pitches":[0.116,0.347,1.000,0.181,0.042,0.124,0.072,0.307,0.237,0.073,0.224,0.085],"timbre":[42.959,-144.870,-2.412,-21.500,45.549,53.779,33.396,7.956,19.884,2.364,-4.152,-6.134]},{"start":48.11751,"duration":0.08091,"confidence":0.405,"loudness_start":-22.192,"loudness_max_time":0.00825,"loudness_max":-15.956,"pitches":[0.747,1.000,0.899,0.865,0.425,0.481,0.170,0.136,0.101,0.114,0.704,0.638],"timbre":[39.232,-160.271,-43.613,1.730,34.432,-87.121,-11.498,-11.503,-20.289,9.472,-4.485,3.956]},{"start":48.19841,"duration":0.19324,"confidence":0.837,"loudness_start":-23.457,"loudness_max_time":0.07747,"loudness_max":-12.937,"pitches":[0.110,0.356,0.538,0.297,0.204,0.165,0.137,0.321,1.000,0.218,0.673,0.088],"timbre":[40.543,-129.777,-30.118,-66.317,26.187,9.787,-11.889,2.452,14.010,-30.458,-21.938,7.405]},{"start":48.39166,"duration":0.11456,"confidence":0.640,"loudness_start":-23.229,"loudness_max_time":0.02786,"loudness_max":-12.703,"pitches":[0.564,0.621,0.115,0.074,0.180,0.587,0.162,0.180,0.623,0.388,1.000,0.239],"timbre":[40.659,-158.740,-68.365,49.297,13.223,-14.677,4.161,10.094,-15.486,7.811,-0.646,17.037]},{"start":48.50621,"duration":0.13456,"confidence":0.679,"loudness_start":-26.660,"loudness_max_time":0.05628,"loudness_max":-17.380,"pitches":[1.000,0.428,0.151,0.071,0.154,0.945,0.357,0.302,0.535,0.334,0.551,0.264],"timbre":[38.254,-140.732,-63.302,-49.125,35.717,0.874,-1.089,-15.366,11.769,-14.465,-24.963,-1.307]},{"start":48.64077,"duration":0.17882,"confidence":0.707,"loudness_start":-23.380,"loudness_max_time":0.05431,"loudness_max":-15.692,"pitches":[0.248,0.056,0.032,0.031,0.027,0.206,0.046,0.115,0.163,0.105,1.000,0.040],"timbre":[39.754,-167.579,-47.493,-42.903,38.639,-5.298,8.288,3.093,8.149,-2.973,-23.025,-1.258]},{"start":48.81959,"duration":0.09814,"confidence":0.808,"loudness_start":-23.176,"loudness_max_time":0.02906,"loudness_max":-11.740,"pitches":[0.114,0.225,0.261,0.174,0.264,1.000,0.266,0.211,0.122,0.175,0.346,0.138],"timbre":[42.371,-175.979,-50.360,31.941,21.750,-23.167,-32.012,-46.267,-6.507,29.778,12.382,-1.834]},{"start":48.91773,"duration":0.15111,"confidence":0.430,"loudness_start":-22.393,"loudness_max_time":0.06971,"loudness_max":-16.402,"pitches":[0.041,0.041,0.037,0.058,0.058,1.000,0.100,0.042,0.031,0.042,0.264,0.065],"timbre":[40.257,-213.426,-45.579,-30.169,38.383,-18.472,-38.444,-7.553,11.119,-10.108,-27.897,6.378]},{"start":49.06884,"duration":0.15184,"confidence":0.609,"loudness_start":-24.131,"loudness_max_time":0.05028,"loudness_max":-16.119,"pitches":[0.677,0.317,0.151,0.180,0.124,0.970,0.230,0.187,0.374,0.217,1.000,0.263],"timbre":[38.654,-173.336,-72.210,-9.504,17.016,-2.506,-33.016,-2.789,8.561,-41.002,-30.013,-1.405]},{"start":49.22068,"duration":0.32113,"confidence":1.000,"loudness_start":-27.103,"loudness_max_time":0.06331,"loudness_max":-7.831,"pitches":[0.241,0.065,0.054,0.051,0.070,1.000,0.217,0.226,0.034,0.043,0.438,0.046],"timbre":[43.619,-137.944,12.605,-79.855,30.046,65.484,31.916,5.740,18.686,-17.973,-8.397,-6.918]},{"start":49.54181,"duration":0.25170,"confidence":0.710,"loudness_start":-18.202,"loudness_max_time":0.00620,"loudness_max":-8.162,"pitches":[1.000,0.093,0.092,0.186,0.167,0.675,0.235,0.132,0.069,0.062,0.129,0.060],"timbre":[45.435,-101.138,-18.997,59.065,13.378,-59.471,-42.221,-40.091,-10.747,7.128,-30.536,-4.612]},{"start":49.79351,"duration":0.14172,"confidence":0.603,"loudness_start":-22.888,"loudness_max_time":0.06760,"loudness_max":-16.249,"pitches":[1.000,0.436,0.140,0.036,0.033,0.109,0.047,0.097,0.215,0.102,0.090,0.159],"timbre":[40.748,-183.347,-47.946,-19.957,27.311,-17.672,-24.303,13.798,9.535,-6.659,-4.333,7.420]},{"start":49.93524,"duration":0.13039,"confidence":0.704,"loudness_start":-24.318,"loudness_max_time":0.04245,"loudness_max":-14.428,"pitches":[0.712,1.000,0.112,0.051,0.020,0.026,0.045,0.132,0.345,0.116,0.046,0.052],"timbre":[41.085,-148.736,-53.171,21.292,36.106,-11.921,-4.209,-21.983,13.977,-3.550,-13.103,5.128]},{"start":50.06562,"duration":0.29850,"confidence":0.944,"loudness_start":-23.871,"loudness_max_time":0.05182,"loudness_max":-11.551,"pitches":[0.361,0.421,1.000,0.159,0.055,0.079,0.064,0.289,0.170,0.067,0.089,0.085],"timbre":[43.659,-164.961,23.928,-36.657,49.531,26.454,52.057,16.714,21.644,-14.703,-5.804,-4.953]},{"start":50.36413,"duration":0.13488,"confidence":0.060,"loudness_start":-20.259,"loudness_max_time":0.03067,"loudness_max":-15.210,"pitches":[0.650,1.000,0.238,0.057,0.072,0.529,0.159,0.279,0.990,0.189,0.272,0.131],"timbre":[39.922,-169.821,-35.854,13.109,39.367,-39.113,3.325,9.617,-2.614,-10.525,5.685,5.464]},{"start":50.49900,"duration":0.16045,"confidence":0.843,"loudness_start":-24.341,"loudness_max_time":0.04141,"loudness_max":-13.447,"pitches":[0.390,0.627,0.309,0.054,0.018,0.053,0.078,0.370,1.000,0.198,0.039,0.072],"timbre":[41.667,-112.653,-47.664,1.858,11.249,13.242,-8.618,-24.595,10.189,-24.049,6.343,0.386]},{"start":50.65946,"duration":0.09374,"confidence":0.614,"loudness_start":-22.899,"loudness_max_time":0.02392,"loudness_max":-14.122,"pitches":[0.996,1.000,0.189,0.116,0.185,0.332,0.237,0.427,0.854,0.422,0.480,0.219],"timbre":[40.938,-175.581,-22.249,37.951,23.792,-62.342,30.348,5.084,-11.648,17.555,9.706,5.654]},{"start":50.75320,"duration":0.15705,"confidence":0.494,"loudness_start":-23.010,"loudness_max_time":0.06571,"loudness_max":-16.226,"pitches":[1.000,0.271,0.279,0.162,0.156,0.800,0.286,0.274,0.626,0.224,0.225,0.147],"timbre":[39.902,-137.236,-38.725,-20.690,39.431,-22.312,14.061,8.209,20.833,-23.107,-18.193,3.009]},{"start":50.91025,"duration":0.16798,"confidence":0.849,"loudness_start":-24.309,"loudness_max_time":0.05484,"loudness_max":-13.875,"pitches":[1.000,0.170,0.049,0.057,0.106,0.816,0.155,0.447,0.286,0.090,0.321,0.113],"timbre":[40.479,-150.968,-25.751,-28.506,46.681,18.748,20.651,8.976,15.729,-0.860,-30.583,-10.923]},{"start":51.07823,"duration":0.12644,"confidence":0.801,"loudness_start":-23.293,"loudness_max_time":0.03399,"loudness_max":-11.748,"pitches":[0.299,0.121,0.117,0.120,0.152,1.000,0.183,0.124,0.078,0.061,0.058,0.110],"timbre":[41.743,-168.472,-53.074,33.318,25.269,0.455,-17.689,-49.450,-17.684,31.711,8.425,-7.445]},{"start":51.20467,"duration":0.16281,"confidence":0.726,"loudness_start":-22.687,"loudness_max_time":0.03977,"loudness_max":-13.664,"pitches":[0.273,0.051,0.019,0.035,0.039,1.000,0.100,0.028,0.021,0.053,0.294,0.069],"timbre":[41.387,-206.161,-57.700,4.597,42.766,-19.912,-37.041,-15.272,6.594,-7.432,2.262,3.553]},{"start":51.36748,"duration":0.14662,"confidence":0.493,"loudness_start":-22.950,"loudness_max_time":0.01837,"loudness_max":-16.403,"pitches":[1.000,0.115,0.130,0.043,0.024,0.214,0.065,0.115,0.160,0.050,0.448,0.221],"timbre":[39.638,-189.577,-58.117,-6.775,14.264,-60.045,-25.061,-31.440,-4.417,14.959,13.455,4.582]},{"start":51.51410,"duration":0.29111,"confidence":0.993,"loudness_start":-23.299,"loudness_max_time":0.03084,"loudness_max":-8.129,"pitches":[0.265,0.090,0.079,0.076,0.134,1.000,0.297,0.283,0.034,0.042,0.147,0.050],"timbre":[46.997,-130.188,18.171,9.963,35.949,6.023,32.951,-13.332,23.515,-4.521,21.231,-10.018]},{"start":51.80522,"duration":0.24730,"confidence":0.628,"loudness_start":-16.100,"loudness_max_time":0.00823,"loudness_max":-9.095,"pitches":[1.000,0.065,0.035,0.079,0.090,0.404,0.130,0.058,0.046,0.035,0.078,0.071],"timbre":[45.924,-116.855,-24.239,47.263,10.220,-47.976,-44.433,-24.207,-8.039,2.987,-26.812,-1.262]},{"start":52.05252,"duration":0.14014,"confidence":0.705,"loudness_start":-23.337,"loudness_max_time":0.03841,"loudness_max":-14.472,"pitches":[1.000,0.521,0.206,0.055,0.059,0.127,0.103,0.115,0.331,0.133,0.122,0.252],"timbre":[40.286,-172.432,-57.142,-5.726,41.392,-0.130,-7.685,-5.440,3.136,-12.702,-15.601,-0.936]},{"start":52.19265,"duration":0.16213,"confidence":0.543,"loudness_start":-23.933,"loudness_max_time":0.04454,"loudness_max":-17.238,"pitches":[0.632,1.000,0.100,0.049,0.019,0.026,0.038,0.149,0.401,0.084,0.037,0.070],"timbre":[39.029,-171.568,-58.661,-17.367,33.578,-21.684,-7.611,-23.273,4.107,-12.254,-14.188,0.921]},{"start":52.35478,"duration":0.13923,"confidence":0.960,"loudness_start":-23.653,"loudness_max_time":0.02912,"loudness_max":-11.092,"pitches":[0.502,1.000,0.081,0.018,0.029,0.068,0.031,0.293,0.208,0.041,0.030,0.044],"timbre":[45.767,-125.082,40.022,11.896,43.699,-31.173,41.686,0.839,23.143,15.680,18.598,-16.885]},{"start":52.49401,"duration":0.14757,"confidence":0.232,"loudness_start":-16.212,"loudness_max_time":0.03232,"loudness_max":-12.310,"pitches":[0.591,1.000,0.154,0.034,0.047,0.060,0.072,0.244,0.783,0.179,0.092,0.095],"timbre":[43.457,-150.757,-17.210,50.799,32.828,-58.060,8.087,-0.808,12.109,13.853,-16.339,12.374]},{"start":52.64159,"duration":0.12948,"confidence":0.566,"loudness_start":-22.421,"loudness_max_time":0.02942,"loudness_max":-14.309,"pitches":[0.604,1.000,0.286,0.066,0.032,0.299,0.130,0.247,0.876,0.259,0.335,0.101],"timbre":[39.897,-145.421,-45.973,16.611,34.020,-20.187,-12.840,0.714,14.122,-7.169,7.308,-4.214]},{"start":52.77107,"duration":0.15864,"confidence":0.866,"loudness_start":-24.603,"loudness_max_time":0.03499,"loudness_max":-13.265,"pitches":[0.681,0.651,0.184,0.027,0.016,0.053,0.072,0.339,1.000,0.177,0.056,0.088],"timbre":[42.186,-115.568,-42.370,24.604,3.133,-13.129,-22.692,-24.753,-5.162,25.210,-8.150,7.857]},{"start":52.92971,"duration":0.09900,"confidence":0.550,"loudness_start":-24.508,"loudness_max_time":0.01573,"loudness_max":-13.915,"pitches":[0.843,0.898,0.160,0.158,0.357,0.908,0.252,0.445,1.000,0.557,0.575,0.235],"timbre":[39.792,-160.567,-54.716,44.206,24.644,-77.169,13.372,14.435,-16.389,22.446,1.433,16.662]},{"start":53.02871,"duration":0.14345,"confidence":0.714,"loudness_start":-25.319,"loudness_max_time":0.05779,"loudness_max":-16.550,"pitches":[1.000,0.210,0.192,0.147,0.118,0.568,0.223,0.311,0.327,0.186,0.193,0.148],"timbre":[38.550,-164.190,-36.644,-44.485,51.352,-3.348,28.119,12.990,15.548,-3.758,-29.169,4.413]},{"start":53.17215,"duration":0.15388,"confidence":0.650,"loudness_start":-23.406,"loudness_max_time":0.04494,"loudness_max":-15.509,"pitches":[1.000,0.142,0.054,0.073,0.097,0.256,0.116,0.266,0.304,0.059,0.027,0.119],"timbre":[40.222,-150.600,-26.015,-25.652,39.324,-10.811,26.703,-6.749,0.766,-4.802,-22.024,-11.474]},{"start":53.32603,"duration":0.14340,"confidence":0.779,"loudness_start":-21.650,"loudness_max_time":0.05073,"loudness_max":-11.487,"pitches":[0.207,0.171,0.095,0.135,0.190,1.000,0.187,0.154,0.096,0.124,0.091,0.165],"timbre":[42.129,-157.154,-39.200,-3.587,34.473,16.929,-9.613,-41.712,4.923,-1.702,-48.243,4.036]},{"start":53.46943,"duration":0.12780,"confidence":0.691,"loudness_start":-22.694,"loudness_max_time":0.04269,"loudness_max":-14.076,"pitches":[0.256,0.066,0.024,0.036,0.057,1.000,0.145,0.019,0.021,0.072,0.183,0.094],"timbre":[41.400,-211.424,-53.279,3.166,38.994,-6.882,-37.189,-21.799,5.653,-15.613,-16.440,0.065]},{"start":53.59723,"duration":0.16277,"confidence":0.609,"loudness_start":-23.156,"loudness_max_time":0.05294,"loudness_max":-15.436,"pitches":[1.000,0.187,0.119,0.059,0.028,0.324,0.077,0.112,0.200,0.098,0.658,0.181],"timbre":[38.969,-187.910,-66.834,-29.585,30.142,-5.291,-15.884,-6.727,15.686,-48.241,-25.252,9.747]},{"start":53.76000,"duration":0.30961,"confidence":1.000,"loudness_start":-24.299,"loudness_max_time":0.05297,"loudness_max":-8.030,"pitches":[0.481,0.047,0.063,0.074,0.093,1.000,0.251,0.311,0.040,0.026,0.155,0.048],"timbre":[46.217,-140.862,16.470,-27.755,37.760,37.456,34.072,4.089,17.666,-9.433,8.499,0.492]},{"start":54.06961,"duration":0.25492,"confidence":0.638,"loudness_start":-18.750,"loudness_max_time":0.01178,"loudness_max":-9.499,"pitches":[1.000,0.070,0.080,0.136,0.143,0.518,0.201,0.103,0.063,0.053,0.081,0.264],"timbre":[45.946,-109.125,-0.687,51.943,29.097,-45.296,-31.083,-40.659,-5.908,18.006,-27.708,-7.432]},{"start":54.32454,"duration":0.12594,"confidence":0.730,"loudness_start":-21.896,"loudness_max_time":0.03570,"loudness_max":-12.102,"pitches":[1.000,0.560,0.210,0.050,0.090,0.359,0.176,0.103,0.305,0.137,0.227,0.883],"timbre":[41.915,-167.138,-51.768,11.251,39.964,7.174,-8.872,-13.315,8.099,-23.235,-11.566,-0.998]},{"start":54.45048,"duration":0.13229,"confidence":0.652,"loudness_start":-23.335,"loudness_max_time":0.05751,"loudness_max":-15.434,"pitches":[0.774,1.000,0.160,0.043,0.017,0.035,0.051,0.112,0.311,0.072,0.052,0.302],"timbre":[40.541,-167.814,-47.078,-17.272,35.674,0.130,-6.081,-18.810,12.070,-22.252,-19.595,1.740]},{"start":54.58277,"duration":0.30395,"confidence":0.912,"loudness_start":-23.161,"loudness_max_time":0.06452,"loudness_max":-11.328,"pitches":[0.112,0.355,1.000,0.184,0.030,0.092,0.068,0.248,0.132,0.060,0.084,0.344],"timbre":[42.650,-157.161,17.260,-59.392,43.379,12.437,35.290,10.818,17.555,-14.184,-20.157,1.312]},{"start":54.88671,"duration":0.13991,"confidence":0.184,"loudness_start":-22.162,"loudness_max_time":0.02212,"loudness_max":-17.828,"pitches":[0.510,1.000,0.205,0.049,0.066,0.197,0.117,0.282,0.987,0.148,0.185,0.419],"timbre":[40.240,-153.380,-23.803,-32.190,28.284,-34.413,-13.542,4.765,12.670,0.670,0.455,1.264]},{"start":55.02662,"duration":0.16707,"confidence":0.738,"loudness_start":-21.992,"loudness_max_time":0.04601,"loudness_max":-13.030,"pitches":[0.222,0.656,0.312,0.058,0.026,0.047,0.050,0.183,1.000,0.193,0.054,0.461],"timbre":[42.352,-104.731,-54.225,6.858,0.243,12.751,-12.684,-27.536,4.792,-27.025,-0.816,10.615]},{"start":55.19370,"duration":0.10463,"confidence":0.667,"loudness_start":-24.200,"loudness_max_time":0.02401,"loudness_max":-12.846,"pitches":[0.947,0.686,0.136,0.129,0.261,0.637,0.308,0.364,1.000,0.532,0.656,0.855],"timbre":[40.804,-162.956,-50.115,51.457,26.096,-44.952,13.672,1.431,6.560,2.200,6.865,12.351]},{"start":55.29832,"duration":0.13297,"confidence":0.663,"loudness_start":-24.824,"loudness_max_time":0.05454,"loudness_max":-15.876,"pitches":[1.000,0.309,0.121,0.068,0.109,0.550,0.254,0.157,0.357,0.205,0.249,0.961],"timbre":[39.439,-140.526,-49.552,-45.654,40.133,-5.707,-1.736,-11.577,15.219,-21.236,-29.537,-5.101]},{"start":55.43129,"duration":0.17410,"confidence":0.657,"loudness_start":-23.312,"loudness_max_time":0.05561,"loudness_max":-15.321,"pitches":[0.695,0.106,0.033,0.049,0.071,0.437,0.084,0.223,0.269,0.056,0.223,1.000],"timbre":[39.955,-171.602,-37.625,-40.728,52.444,-11.862,11.937,10.539,13.052,-10.301,-23.273,-9.501]},{"start":55.60540,"duration":0.12263,"confidence":0.753,"loudness_start":-22.602,"loudness_max_time":0.03590,"loudness_max":-12.612,"pitches":[0.091,0.120,0.134,0.104,0.196,1.000,0.226,0.172,0.096,0.074,0.069,0.195],"timbre":[41.842,-184.617,-40.677,20.908,27.188,-7.251,-18.876,-36.522,-6.154,12.880,7.573,-10.033]},{"start":55.72803,"duration":0.13351,"confidence":0.610,"loudness_start":-22.010,"loudness_max_time":0.03715,"loudness_max":-14.527,"pitches":[0.125,0.074,0.027,0.047,0.064,1.000,0.140,0.024,0.019,0.063,0.168,0.338],"timbre":[40.801,-214.664,-56.339,11.381,41.291,-13.968,-31.130,-18.906,-4.647,-9.510,-23.854,6.228]},{"start":55.86154,"duration":0.13946,"confidence":0.730,"loudness_start":-24.597,"loudness_max_time":0.05022,"loudness_max":-15.158,"pitches":[0.583,0.361,0.480,0.169,0.074,0.881,0.226,0.284,0.457,0.175,1.000,0.677],"timbre":[40.128,-153.277,-69.762,-13.940,21.052,-0.612,-29.346,-23.711,11.155,-33.248,-31.092,4.898]},{"start":56.00100,"duration":0.33043,"confidence":1.000,"loudness_start":-25.868,"loudness_max_time":0.07543,"loudness_max":-7.534,"pitches":[0.229,0.037,0.027,0.056,0.072,1.000,0.209,0.268,0.048,0.029,0.208,0.259],"timbre":[42.854,-171.008,24.180,-115.399,37.461,33.554,31.637,13.074,17.763,-29.941,-8.491,-6.447]},{"start":56.33143,"duration":0.27800,"confidence":0.595,"loudness_start":-15.929,"loudness_max_time":0.01172,"loudness_max":-8.365,"pitches":[1.000,0.084,0.098,0.173,0.130,0.618,0.198,0.163,0.090,0.053,0.113,0.662],"timbre":[45.868,-119.567,-12.627,67.504,31.654,-57.405,-33.774,-31.214,0.879,13.031,-37.339,-4.715]},{"start":56.60943,"duration":0.10485,"confidence":0.495,"loudness_start":-23.050,"loudness_max_time":0.01895,"loudness_max":-16.375,"pitches":[1.000,0.730,0.173,0.063,0.055,0.156,0.119,0.131,0.256,0.165,0.213,0.424],"timbre":[39.817,-195.107,-45.246,-2.004,47.364,-63.954,-3.515,-18.939,10.090,-7.066,-0.827,-5.942]},{"start":56.71429,"duration":0.15787,"confidence":0.532,"loudness_start":-23.044,"loudness_max_time":0.04511,"loudness_max":-16.782,"pitches":[0.484,1.000,0.118,0.044,0.019,0.032,0.049,0.072,0.366,0.078,0.038,0.357],"timbre":[39.204,-171.356,-51.833,-10.346,30.258,-10.337,-7.042,-12.671,3.253,-19.790,-26.380,1.797]},{"start":56.87215,"duration":0.29769,"confidence":1.000,"loudness_start":-25.473,"loudness_max_time":0.04124,"loudness_max":-9.991,"pitches":[0.184,0.405,1.000,0.168,0.050,0.092,0.074,0.292,0.248,0.072,0.089,0.239],"timbre":[44.406,-137.961,-7.478,-2.214,43.817,40.508,29.280,-2.285,20.509,3.118,11.108,-3.773]},{"start":57.16984,"duration":0.14472,"confidence":0.284,"loudness_start":-21.625,"loudness_max_time":0.01832,"loudness_max":-15.428,"pitches":[0.283,0.973,0.306,0.050,0.038,0.293,0.165,0.233,0.980,0.264,0.347,1.000],"timbre":[39.818,-145.818,-58.238,9.141,24.931,-55.806,-16.327,-14.322,4.633,3.827,21.233,7.945]},{"start":57.31456,"duration":0.13356,"confidence":0.836,"loudness_start":-23.443,"loudness_max_time":0.02113,"loudness_max":-13.963,"pitches":[0.320,0.679,0.259,0.051,0.013,0.066,0.144,0.379,1.000,0.202,0.106,0.303],"timbre":[41.892,-121.344,-41.365,19.702,-10.474,-48.186,-31.228,-18.523,-9.198,26.874,-11.109,5.480]},{"start":57.44812,"duration":0.11424,"confidence":0.613,"loudness_start":-23.364,"loudness_max_time":0.05209,"loudness_max":-15.354,"pitches":[1.000,0.919,0.199,0.120,0.250,0.635,0.313,0.318,0.991,0.419,0.613,0.910],"timbre":[40.835,-148.015,-37.583,15.609,15.325,-27.552,0.016,39.094,13.057,-1.162,-20.961,21.633]},{"start":57.56236,"duration":0.12916,"confidence":0.697,"loudness_start":-24.921,"loudness_max_time":0.05437,"loudness_max":-15.873,"pitches":[0.763,0.257,0.302,0.170,0.197,0.940,0.436,0.179,0.650,0.274,0.337,1.000],"timbre":[39.844,-133.783,-62.045,-33.293,28.240,11.254,-5.915,-8.069,15.422,-15.230,-13.787,2.459]},{"start":57.69152,"duration":0.17728,"confidence":0.777,"loudness_start":-23.516,"loudness_max_time":0.07575,"loudness_max":-14.274,"pitches":[0.778,0.169,0.083,0.099,0.168,1.000,0.234,0.357,0.399,0.120,0.377,0.909],"timbre":[39.665,-161.793,-23.327,-68.841,52.717,-10.093,16.341,4.806,9.680,2.882,-30.995,-11.962]},{"start":57.86880,"duration":0.12848,"confidence":0.793,"loudness_start":-21.653,"loudness_max_time":0.03435,"loudness_max":-11.130,"pitches":[0.182,0.112,0.132,0.122,0.179,1.000,0.168,0.199,0.091,0.069,0.081,0.468],"timbre":[42.344,-176.690,-58.696,34.734,34.071,-8.609,-20.016,-43.169,-5.388,13.995,0.496,0.984]},{"start":57.99728,"duration":0.11166,"confidence":0.716,"loudness_start":-22.721,"loudness_max_time":0.04113,"loudness_max":-13.702,"pitches":[0.101,0.036,0.026,0.058,0.083,1.000,0.184,0.037,0.040,0.037,0.067,0.268],"timbre":[41.464,-207.583,-53.723,-1.584,41.652,-2.843,-35.875,-26.817,9.422,-17.438,-14.956,0.323]},{"start":58.10893,"duration":0.16249,"confidence":0.641,"loudness_start":-23.385,"loudness_max_time":0.07117,"loudness_max":-15.496,"pitches":[0.421,0.258,0.185,0.226,0.160,0.864,0.307,0.258,0.355,0.150,1.000,0.854],"timbre":[38.375,-208.067,-51.571,-52.721,36.467,-9.593,-24.261,19.580,16.244,-28.957,-30.519,6.951]},{"start":58.27143,"duration":0.28993,"confidence":1.000,"loudness_start":-26.484,"loudness_max_time":0.07347,"loudness_max":-8.358,"pitches":[0.280,0.061,0.051,0.051,0.091,1.000,0.285,0.266,0.040,0.033,0.208,0.246],"timbre":[43.839,-146.896,13.320,-87.339,29.033,30.094,20.066,14.017,7.991,-11.416,-13.360,-2.903]},{"start":58.56136,"duration":0.29678,"confidence":0.764,"loudness_start":-18.138,"loudness_max_time":0.04356,"loudness_max":-8.063,"pitches":[1.000,0.079,0.054,0.134,0.117,0.679,0.179,0.102,0.147,0.063,0.171,0.247],"timbre":[44.689,-129.856,-7.037,10.171,35.426,22.764,-2.519,-2.245,17.408,-44.267,-30.862,-1.177]},{"start":58.85814,"duration":0.15601,"confidence":0.619,"loudness_start":-22.297,"loudness_max_time":0.02389,"loudness_max":-14.152,"pitches":[1.000,0.904,0.260,0.158,0.047,0.176,0.067,0.147,0.329,0.195,0.217,0.197],"timbre":[40.309,-173.219,-52.468,15.335,36.451,-39.992,-12.306,-2.120,7.614,7.509,22.652,-7.851]},{"start":59.01415,"duration":0.07982,"confidence":0.517,"loudness_start":-23.478,"loudness_max_time":0.01461,"loudness_max":-17.199,"pitches":[0.850,0.860,1.000,0.870,0.321,0.330,0.137,0.143,0.101,0.091,0.592,0.606],"timbre":[38.327,-180.547,-61.682,7.942,33.022,-75.658,-12.695,-12.776,-8.723,12.208,-5.824,-9.531]},{"start":59.09397,"duration":0.33610,"confidence":0.913,"loudness_start":-24.721,"loudness_max_time":0.08236,"loudness_max":-11.805,"pitches":[0.146,0.291,1.000,0.138,0.036,0.073,0.060,0.224,0.228,0.065,0.055,0.051],"timbre":[40.532,-162.757,7.313,-85.221,38.719,-12.165,21.257,7.010,18.212,12.189,-11.149,-2.105]},{"start":59.43007,"duration":0.09977,"confidence":0.627,"loudness_start":-22.132,"loudness_max_time":0.02766,"loudness_max":-14.068,"pitches":[0.635,1.000,0.166,0.137,0.087,0.354,0.153,0.263,0.722,0.241,0.316,0.049],"timbre":[40.454,-110.900,-44.890,27.610,11.761,-23.984,-13.290,-25.818,-3.442,-6.135,3.336,-1.039]},{"start":59.52984,"duration":0.18671,"confidence":0.828,"loudness_start":-24.161,"loudness_max_time":0.06679,"loudness_max":-14.610,"pitches":[0.395,0.439,0.583,0.376,0.203,0.104,0.061,0.227,1.000,0.157,0.051,0.158],"timbre":[40.381,-119.537,-14.912,-56.740,21.118,20.142,5.513,-2.866,20.710,-30.083,-26.745,-0.151]},{"start":59.71655,"duration":0.10367,"confidence":0.595,"loudness_start":-22.996,"loudness_max_time":0.02406,"loudness_max":-13.125,"pitches":[0.649,0.721,0.148,0.153,0.219,0.588,0.275,0.550,1.000,0.329,0.526,0.225],"timbre":[40.352,-164.366,-57.371,55.272,26.572,-40.151,16.999,16.433,-6.589,16.147,3.998,14.118]},{"start":59.82023,"duration":0.13129,"confidence":0.582,"loudness_start":-26.169,"loudness_max_time":0.05735,"loudness_max":-18.773,"pitches":[0.821,0.528,0.323,0.270,0.193,1.000,0.522,0.465,0.820,0.279,0.320,0.068],"timbre":[37.379,-146.667,-58.633,-55.472,29.238,-7.295,1.776,-6.662,8.194,-3.997,-21.547,0.788]},{"start":59.95152,"duration":0.18145,"confidence":0.697,"loudness_start":-24.463,"loudness_max_time":0.09796,"loudness_max":-16.478,"pitches":[1.000,0.315,0.224,0.744,0.207,0.674,0.358,0.565,0.878,0.142,0.090,0.103],"timbre":[39.284,-156.665,-24.233,-55.676,49.704,-7.447,18.231,11.378,16.228,7.350,-24.879,-10.607]},{"start":60.13297,"duration":0.12875,"confidence":0.803,"loudness_start":-22.759,"loudness_max_time":0.03707,"loudness_max":-12.031,"pitches":[0.077,0.115,0.113,0.084,0.148,1.000,0.180,0.191,0.473,0.130,0.064,0.081],"timbre":[42.525,-168.588,-47.479,31.011,28.607,-16.676,-20.581,-38.358,-7.103,14.830,-16.279,-0.021]},{"start":60.26172,"duration":0.12785,"confidence":0.680,"loudness_start":-22.681,"loudness_max_time":0.05099,"loudness_max":-14.483,"pitches":[0.096,0.064,0.036,0.106,0.066,1.000,0.190,0.113,0.356,0.112,0.144,0.062],"timbre":[41.567,-193.621,-45.231,-12.020,31.940,-5.986,-39.652,-7.995,10.224,-20.351,-22.495,1.291]},{"start":60.38957,"duration":0.15039,"confidence":0.638,"loudness_start":-23.327,"loudness_max_time":0.05764,"loudness_max":-15.221,"pitches":[0.886,0.257,0.226,0.288,0.101,0.637,0.104,0.246,0.269,0.178,1.000,0.457],"timbre":[39.642,-170.968,-67.275,-24.952,34.877,2.654,-23.015,-9.248,16.389,-42.204,-34.545,6.330]},{"start":60.53995,"duration":0.31760,"confidence":1.000,"loudness_start":-25.639,"loudness_max_time":0.06312,"loudness_max":-7.687,"pitches":[0.203,0.051,0.041,0.076,0.110,1.000,0.244,0.286,0.367,0.031,0.179,0.029],"timbre":[43.579,-152.988,7.488,-84.963,32.600,53.785,24.986,14.749,21.712,-22.596,-17.085,-2.788]},{"start":60.85755,"duration":0.27465,"confidence":0.732,"loudness_start":-19.027,"loudness_max_time":0.01611,"loudness_max":-8.553,"pitches":[1.000,0.077,0.078,0.149,0.117,0.562,0.159,0.130,0.288,0.055,0.071,0.051],"timbre":[45.827,-106.752,-12.738,61.168,23.166,-50.769,-36.771,-26.979,-3.543,12.878,-32.244,-2.763]},{"start":61.13220,"duration":0.11678,"confidence":0.730,"loudness_start":-22.929,"loudness_max_time":0.01960,"loudness_max":-13.674,"pitches":[1.000,0.702,0.184,0.093,0.025,0.166,0.099,0.163,0.478,0.192,0.227,0.155],"timbre":[41.052,-166.162,-52.076,32.946,33.721,-61.685,-12.557,-26.988,0.818,3.337,-5.335,-6.259]},{"start":61.24898,"duration":0.13918,"confidence":0.558,"loudness_start":-24.108,"loudness_max_time":0.03718,"loudness_max":-16.542,"pitches":[0.467,1.000,0.133,0.061,0.013,0.036,0.040,0.065,0.376,0.081,0.037,0.051],"timbre":[38.512,-166.621,-51.744,1.743,38.454,-10.426,4.926,-7.528,16.345,-19.982,-27.708,-13.735]},{"start":61.38816,"duration":0.17288,"confidence":1.000,"loudness_start":-26.341,"loudness_max_time":0.05092,"loudness_max":-10.781,"pitches":[0.252,1.000,0.071,0.044,0.022,0.182,0.032,0.302,0.153,0.072,0.103,0.020],"timbre":[43.416,-135.731,34.148,-49.729,47.603,38.889,54.446,2.947,23.319,-2.772,3.874,-12.579]},{"start":61.56104,"duration":0.24503,"confidence":0.247,"loudness_start":-16.693,"loudness_max_time":0.01896,"loudness_max":-11.193,"pitches":[0.113,0.366,0.777,0.291,0.069,0.065,0.041,0.123,1.000,0.106,0.032,0.090],"timbre":[43.459,-149.743,-22.868,47.472,26.601,-72.417,2.217,-4.537,9.911,24.945,-0.012,11.127]},{"start":61.80608,"duration":0.17447,"confidence":0.819,"loudness_start":-23.637,"loudness_max_time":0.05752,"loudness_max":-14.066,"pitches":[0.141,0.476,0.266,0.086,0.015,0.054,0.068,0.245,1.000,0.116,0.039,0.050],"timbre":[40.832,-119.415,-15.788,-24.812,17.564,24.463,-3.141,-15.158,11.491,-20.720,-18.444,2.100]},{"start":61.98054,"duration":0.10875,"confidence":0.700,"loudness_start":-22.791,"loudness_max_time":0.02624,"loudness_max":-11.837,"pitches":[0.398,0.452,0.100,0.129,0.129,0.462,0.131,0.324,1.000,0.334,0.333,0.128],"timbre":[41.438,-153.203,-67.679,48.252,21.160,-24.133,9.478,-7.277,-0.674,7.446,9.558,19.163]},{"start":62.08930,"duration":0.14594,"confidence":0.545,"loudness_start":-24.436,"loudness_max_time":0.04990,"loudness_max":-17.076,"pitches":[1.000,0.222,0.226,0.226,0.094,0.672,0.265,0.270,0.530,0.140,0.207,0.205],"timbre":[39.153,-140.072,-64.275,-31.661,34.479,-13.913,-1.610,-11.568,17.816,-15.353,-15.203,-9.550]},{"start":62.23524,"duration":0.15261,"confidence":0.712,"loudness_start":-23.648,"loudness_max_time":0.04863,"loudness_max":-15.609,"pitches":[0.429,0.074,0.090,0.178,0.093,0.558,0.117,0.341,1.000,0.136,0.157,0.068],"timbre":[40.087,-150.514,-36.775,-23.033,41.104,0.312,16.731,-3.563,14.898,-1.027,-21.152,-8.652]},{"start":62.38785,"duration":0.13270,"confidence":0.832,"loudness_start":-22.856,"loudness_max_time":0.04472,"loudness_max":-11.638,"pitches":[0.095,0.139,0.156,0.146,0.234,1.000,0.227,0.268,0.446,0.142,0.076,0.099],"timbre":[41.524,-167.026,-42.543,0.142,31.489,33.704,-0.940,-40.574,1.631,-0.401,-31.179,0.561]},{"start":62.52054,"duration":0.13991,"confidence":0.610,"loudness_start":-22.681,"loudness_max_time":0.04336,"loudness_max":-16.215,"pitches":[0.079,0.042,0.048,0.048,0.060,1.000,0.133,0.051,0.092,0.059,0.159,0.054],"timbre":[41.467,-195.920,-38.692,-28.575,35.242,-14.432,-41.601,9.692,13.816,-5.384,-3.329,6.181]},{"start":62.66045,"duration":0.13787,"confidence":0.579,"loudness_start":-22.609,"loudness_max_time":0.05060,"loudness_max":-15.357,"pitches":[0.649,0.265,0.184,0.243,0.110,0.799,0.204,0.172,0.930,0.222,1.000,0.290],"timbre":[40.364,-156.945,-74.846,0.940,22.682,7.449,-25.453,-13.699,19.863,-42.779,-15.493,6.817]},{"start":62.79832,"duration":0.33088,"confidence":1.000,"loudness_start":-26.151,"loudness_max_time":0.06975,"loudness_max":-8.571,"pitches":[0.298,0.038,0.045,0.102,0.090,1.000,0.226,0.326,0.189,0.031,0.203,0.054],"timbre":[42.674,-166.039,21.873,-122.007,30.235,41.843,29.398,12.402,16.398,-20.570,-15.022,-5.351]},{"start":63.12921,"duration":0.13973,"confidence":0.551,"loudness_start":-17.065,"loudness_max_time":0.00548,"loudness_max":-8.443,"pitches":[1.000,0.138,0.027,0.032,0.044,0.161,0.028,0.107,0.117,0.058,0.141,0.117],"timbre":[46.080,-100.608,7.660,42.567,13.616,-63.703,-35.604,-29.536,-0.750,6.071,-28.835,-9.437]},{"start":63.26893,"duration":0.13279,"confidence":0.316,"loudness_start":-19.917,"loudness_max_time":0.00991,"loudness_max":-13.412,"pitches":[1.000,0.141,0.109,0.404,0.041,0.117,0.106,0.185,0.380,0.114,0.085,0.102],"timbre":[44.324,-132.398,48.376,-4.039,29.258,-58.608,-16.757,-12.803,-2.354,2.975,0.699,-12.110]},{"start":63.40172,"duration":0.08685,"confidence":0.248,"loudness_start":-17.037,"loudness_max_time":0.01066,"loudness_max":-13.017,"pitches":[0.920,1.000,0.764,0.866,0.901,0.980,0.395,0.352,0.238,0.237,0.507,0.340],"timbre":[43.978,-140.526,11.018,-13.990,25.570,-71.014,-16.274,-0.349,7.944,-4.943,-5.830,-24.938]},{"start":63.48857,"duration":0.17420,"confidence":0.289,"loudness_start":-17.299,"loudness_max_time":0.06937,"loudness_max":-13.820,"pitches":[0.644,1.000,0.179,0.097,0.025,0.093,0.056,0.109,0.146,0.084,0.043,0.060],"timbre":[44.441,-146.307,12.468,-25.452,58.397,-37.229,-10.159,1.444,14.546,4.502,-6.090,-16.108]},{"start":63.66277,"duration":0.14467,"confidence":0.374,"loudness_start":-17.336,"loudness_max_time":0.03682,"loudness_max":-12.892,"pitches":[0.761,1.000,0.064,0.030,0.039,0.266,0.050,0.094,0.113,0.067,0.111,0.054],"timbre":[44.607,-135.336,8.933,-9.535,61.700,-23.582,-16.446,-2.634,16.592,-0.737,-6.735,-30.468]},{"start":63.80744,"duration":0.14168,"confidence":0.309,"loudness_start":-17.767,"loudness_max_time":0.02692,"loudness_max":-12.819,"pitches":[1.000,0.962,0.113,0.043,0.025,0.120,0.027,0.087,0.123,0.052,0.063,0.100],"timbre":[43.739,-150.999,2.414,11.843,67.809,-33.780,-15.658,-9.386,8.966,8.624,-6.836,-31.300]},{"start":63.94912,"duration":0.14313,"confidence":0.476,"loudness_start":-19.934,"loudness_max_time":0.03583,"loudness_max":-14.192,"pitches":[1.000,0.584,0.144,0.034,0.038,0.358,0.056,0.034,0.037,0.121,0.190,0.063],"timbre":[43.376,-155.387,15.272,-8.822,86.860,-31.461,-16.807,-2.847,7.566,10.622,8.492,-22.303]},{"start":64.09224,"duration":0.13356,"confidence":0.568,"loudness_start":-18.441,"loudness_max_time":0.03617,"loudness_max":-11.919,"pitches":[1.000,0.564,0.237,0.065,0.059,0.148,0.101,0.244,0.096,0.101,0.074,0.071],"timbre":[44.815,-129.747,22.919,18.340,71.280,-24.713,-35.805,-17.963,11.435,7.972,9.237,-21.601]},{"start":64.22580,"duration":0.14553,"confidence":0.499,"loudness_start":-18.342,"loudness_max_time":0.04238,"loudness_max":-12.327,"pitches":[1.000,0.446,0.091,0.061,0.103,0.218,0.085,0.114,0.127,0.139,0.232,0.160],"timbre":[44.463,-149.706,19.861,-3.551,61.705,-19.227,-7.347,7.233,15.145,7.511,-12.050,-19.491]},{"start":64.37134,"duration":0.14481,"confidence":0.404,"loudness_start":-18.590,"loudness_max_time":0.04652,"loudness_max":-13.872,"pitches":[1.000,0.124,0.107,0.037,0.053,0.274,0.111,0.100,0.070,0.070,0.106,0.092],"timbre":[44.277,-150.489,3.542,-11.873,55.563,-28.223,-11.212,-2.087,24.919,5.456,-7.932,-23.856]},{"start":64.51615,"duration":0.41918,"confidence":0.542,"loudness_start":-18.512,"loudness_max_time":0.17428,"loudness_max":-10.884,"pitches":[0.396,0.065,0.035,0.033,0.109,1.000,0.129,0.047,0.045,0.049,0.049,0.055],"timbre":[45.482,-133.031,11.726,-18.640,52.888,-12.300,-3.786,-1.990,21.439,-18.680,-11.392,-26.065]},{"start":64.93533,"duration":0.15751,"confidence":0.339,"loudness_start":-20.694,"loudness_max_time":0.03530,"loudness_max":-15.143,"pitches":[0.397,0.048,0.213,0.534,0.120,0.233,0.108,0.135,1.000,0.050,0.040,0.081],"timbre":[40.716,-184.437,-43.198,5.971,38.758,-22.399,-25.626,-22.363,6.505,-11.482,-13.555,-13.547]},{"start":65.09283,"duration":0.12036,"confidence":0.563,"loudness_start":-23.066,"loudness_max_time":0.05267,"loudness_max":-16.994,"pitches":[0.251,0.050,0.087,1.000,0.222,0.113,0.069,0.059,0.575,0.059,0.026,0.044],"timbre":[40.327,-166.030,-59.868,-18.405,31.795,-38.453,-43.770,1.395,11.834,-15.468,-24.964,5.832]},{"start":65.21320,"duration":0.59229,"confidence":1.000,"loudness_start":-24.066,"loudness_max_time":0.04974,"loudness_max":-4.248,"pitches":[0.407,0.109,0.093,0.589,0.117,1.000,0.193,0.086,0.101,0.080,0.114,0.090],"timbre":[47.965,-76.379,33.476,-36.259,32.635,74.221,26.673,1.166,9.570,-29.218,10.196,13.776]},{"start":65.80549,"duration":0.40014,"confidence":0.638,"loudness_start":-17.299,"loudness_max_time":0.09191,"loudness_max":-8.700,"pitches":[0.466,0.197,1.000,0.162,0.053,0.103,0.035,0.031,0.035,0.052,0.035,0.043],"timbre":[45.563,-112.101,33.090,-29.056,51.998,-24.567,-2.076,-13.697,18.156,8.018,-14.291,-12.129]},{"start":66.20562,"duration":0.15102,"confidence":0.430,"loudness_start":-17.412,"loudness_max_time":0.04709,"loudness_max":-12.696,"pitches":[1.000,0.760,0.207,0.074,0.075,0.393,0.105,0.054,0.075,0.189,0.264,0.067],"timbre":[44.462,-126.062,18.741,-16.330,76.552,-18.746,-27.420,1.637,18.382,-2.448,-7.935,-22.062]},{"start":66.35664,"duration":0.13968,"confidence":0.425,"loudness_start":-17.726,"loudness_max_time":0.03162,"loudness_max":-12.427,"pitches":[1.000,0.587,0.165,0.056,0.041,0.090,0.053,0.113,0.062,0.108,0.071,0.134],"timbre":[44.888,-114.970,20.534,8.022,62.822,-30.870,-30.124,-16.656,2.884,8.734,3.052,-22.764]},{"start":66.49633,"duration":0.27909,"confidence":0.406,"loudness_start":-17.881,"loudness_max_time":0.03415,"loudness_max":-12.920,"pitches":[1.000,0.226,0.216,0.194,0.285,0.950,0.610,0.489,0.348,0.286,0.134,0.184],"timbre":[44.736,-155.068,13.004,-5.267,68.931,-27.874,-2.458,0.865,12.088,9.323,0.158,-17.172]},{"start":66.77542,"duration":0.15642,"confidence":0.293,"loudness_start":-17.609,"loudness_max_time":0.03561,"loudness_max":-14.274,"pitches":[1.000,0.067,0.024,0.023,0.038,0.362,0.058,0.037,0.040,0.044,0.036,0.106],"timbre":[43.594,-177.770,-8.694,-14.729,72.320,-31.180,-7.679,14.074,21.353,-9.329,-12.600,-24.763]},{"start":66.93184,"duration":0.12844,"confidence":0.588,"loudness_start":-19.345,"loudness_max_time":0.01933,"loudness_max":-11.311,"pitches":[1.000,0.088,0.182,0.061,0.086,0.306,0.093,0.214,0.095,0.079,0.082,0.082],"timbre":[44.768,-126.089,-1.726,2.596,42.497,-35.642,-7.104,-20.686,7.363,8.797,10.422,-33.749]},{"start":67.06027,"duration":0.13283,"confidence":0.447,"loudness_start":-17.215,"loudness_max_time":0.03643,"loudness_max":-11.097,"pitches":[1.000,0.081,0.036,0.064,0.107,0.698,0.130,0.074,0.690,0.096,0.152,0.108],"timbre":[44.006,-165.141,-20.774,21.348,52.072,-24.604,-24.174,-12.687,18.398,-8.199,-18.505,-20.915]},{"start":67.19311,"duration":0.14444,"confidence":0.571,"loudness_start":-20.553,"loudness_max_time":0.04377,"loudness_max":-13.644,"pitches":[0.407,0.080,0.046,0.297,0.089,0.074,0.037,0.094,1.000,0.061,0.046,0.071],"timbre":[41.428,-176.709,-48.922,-6.602,52.115,-3.481,-27.237,-19.130,8.407,-9.016,-24.319,-9.467]},{"start":67.33755,"duration":0.12204,"confidence":0.586,"loudness_start":-22.884,"loudness_max_time":0.04334,"loudness_max":-15.698,"pitches":[0.320,0.066,0.091,1.000,0.197,0.337,0.131,0.041,0.422,0.074,0.125,0.147],"timbre":[39.608,-174.248,-75.331,-7.175,44.791,-2.108,-26.268,-9.575,-5.359,-15.951,-16.271,-1.865]},{"start":67.45959,"duration":0.19787,"confidence":1.000,"loudness_start":-24.925,"loudness_max_time":0.06752,"loudness_max":-4.070,"pitches":[0.398,0.037,0.077,0.450,0.232,1.000,0.409,0.153,0.076,0.021,0.028,0.041],"timbre":[46.383,-91.653,44.250,-133.988,31.570,51.088,30.446,9.110,10.092,-31.204,3.936,16.942]},{"start":67.65746,"duration":0.48653,"confidence":0.109,"loudness_start":-10.467,"loudness_max_time":0.00697,"loudness_max":-6.774,"pitches":[0.658,0.361,0.483,1.000,0.302,0.887,0.235,0.192,0.169,0.269,0.308,0.291],"timbre":[49.798,-64.270,44.979,56.750,23.999,-37.991,9.981,-26.323,-13.397,11.849,-34.667,33.601]},{"start":68.14399,"duration":0.33660,"confidence":0.605,"loudness_start":-16.593,"loudness_max_time":0.01901,"loudness_max":-9.572,"pitches":[0.505,0.327,1.000,0.103,0.045,0.098,0.037,0.031,0.044,0.066,0.091,0.050],"timbre":[47.018,-107.971,32.594,34.929,46.726,-49.735,-2.540,-15.370,6.327,23.213,-12.554,-1.238]},{"start":68.48059,"duration":0.13429,"confidence":0.376,"loudness_start":-18.432,"loudness_max_time":0.02341,"loudness_max":-14.307,"pitches":[1.000,0.761,0.168,0.060,0.065,0.272,0.077,0.045,0.067,0.135,0.136,0.090],"timbre":[44.365,-129.314,27.369,-17.135,68.204,-28.095,-21.295,-4.559,10.930,-8.726,6.673,-28.186]},{"start":68.61488,"duration":0.14531,"confidence":0.341,"loudness_start":-17.140,"loudness_max_time":0.03744,"loudness_max":-12.088,"pitches":[1.000,0.845,0.293,0.110,0.092,0.320,0.097,0.313,0.117,0.155,0.092,0.095],"timbre":[44.982,-116.546,19.552,9.376,67.633,-27.581,-22.547,-14.292,2.718,0.072,0.167,-26.029]},{"start":68.76018,"duration":0.14000,"confidence":0.432,"loudness_start":-17.795,"loudness_max_time":0.03579,"loudness_max":-11.780,"pitches":[1.000,0.451,0.075,0.082,0.141,0.637,0.116,0.122,0.143,0.164,0.359,0.190],"timbre":[44.889,-154.814,17.552,-0.366,47.548,-22.061,-1.798,-8.720,-2.427,8.035,1.151,-16.950]},{"start":68.90018,"duration":0.14481,"confidence":0.151,"loudness_start":-16.978,"loudness_max_time":0.02990,"loudness_max":-13.633,"pitches":[1.000,0.144,0.035,0.036,0.043,0.247,0.103,0.090,0.063,0.079,0.100,0.068],"timbre":[43.996,-161.604,-8.926,-7.262,70.383,-44.059,-8.094,-0.959,18.180,-0.295,-8.205,-24.300]},{"start":69.04499,"duration":0.13982,"confidence":0.325,"loudness_start":-18.731,"loudness_max_time":0.02466,"loudness_max":-13.740,"pitches":[1.000,0.070,0.020,0.033,0.047,0.322,0.070,0.027,0.033,0.068,0.112,0.111],"timbre":[43.613,-161.491,-8.443,-11.443,68.295,-38.706,-3.944,-3.473,14.968,10.411,-1.643,-31.545]},{"start":69.18481,"duration":0.13732,"confidence":0.574,"loudness_start":-18.517,"loudness_max_time":0.03024,"loudness_max":-11.411,"pitches":[1.000,0.090,0.147,0.080,0.066,0.155,0.091,0.277,0.090,0.064,0.064,0.112],"timbre":[44.869,-150.976,-7.198,-2.575,67.186,-21.710,-7.985,-5.509,16.686,-0.109,-2.796,-33.753]},{"start":69.32213,"duration":0.12834,"confidence":0.060,"loudness_start":-17.900,"loudness_max_time":0.04522,"loudness_max":-14.762,"pitches":[1.000,0.070,0.027,0.049,0.062,0.202,0.067,0.089,0.565,0.070,0.039,0.092],"timbre":[42.671,-189.371,-17.633,3.784,73.909,-37.172,-6.287,-11.596,9.677,5.750,-18.906,-22.903]},{"start":69.45048,"duration":0.17016,"confidence":0.516,"loudness_start":-20.528,"loudness_max_time":0.05668,"loudness_max":-14.771,"pitches":[0.199,0.053,0.196,0.414,0.081,0.165,0.061,0.105,1.000,0.040,0.020,0.064],"timbre":[40.927,-187.774,-43.332,-9.432,53.013,-13.199,-23.420,-14.377,5.959,-21.545,-27.789,-10.399]},{"start":69.62063,"duration":0.10118,"confidence":0.800,"loudness_start":-22.369,"loudness_max_time":0.02426,"loudness_max":-12.817,"pitches":[0.222,0.098,0.174,1.000,0.320,0.646,0.199,0.056,0.743,0.103,0.165,0.095],"timbre":[41.775,-164.233,-61.004,24.666,33.266,-15.776,-29.178,-31.954,-14.284,-9.049,0.117,-5.584]},{"start":69.72181,"duration":0.60608,"confidence":1.000,"loudness_start":-23.060,"loudness_max_time":0.06926,"loudness_max":-3.819,"pitches":[0.376,0.101,0.135,0.639,0.110,1.000,0.210,0.090,0.092,0.081,0.122,0.089],"timbre":[45.617,-113.650,32.209,-95.245,44.628,41.211,15.308,16.055,14.066,-40.175,-1.935,3.501]},{"start":70.32789,"duration":0.08644,"confidence":0.118,"loudness_start":-16.205,"loudness_max_time":0.02741,"loudness_max":-13.735,"pitches":[0.983,1.000,0.982,0.963,0.320,0.408,0.102,0.126,0.078,0.087,0.616,0.625],"timbre":[45.384,-122.039,25.709,-22.264,48.564,-50.569,-13.115,-18.366,15.084,13.550,3.852,-21.625]},{"start":70.41433,"duration":0.18508,"confidence":0.476,"loudness_start":-15.839,"loudness_max_time":0.01312,"loudness_max":-9.137,"pitches":[0.620,1.000,0.056,0.022,0.045,0.181,0.059,0.035,0.047,0.060,0.103,0.061],"timbre":[47.585,-104.810,45.232,19.964,41.646,-58.746,-5.034,-6.781,5.605,22.516,-16.988,5.193]},{"start":70.59941,"duration":0.15678,"confidence":0.085,"loudness_start":-16.182,"loudness_max_time":0.03191,"loudness_max":-12.279,"pitches":[1.000,0.959,0.112,0.034,0.036,0.161,0.030,0.037,0.078,0.044,0.049,0.070],"timbre":[44.339,-153.790,2.939,11.857,72.581,-41.985,-11.429,-3.725,12.424,1.110,-13.687,-19.343]},{"start":70.75619,"duration":0.13401,"confidence":0.232,"loudness_start":-19.597,"loudness_max_time":0.02725,"loudness_max":-15.187,"pitches":[1.000,0.488,0.138,0.026,0.035,0.465,0.061,0.014,0.037,0.110,0.121,0.123],"timbre":[42.770,-173.790,-2.698,-13.659,92.677,-53.812,-17.428,-10.138,-5.908,4.308,11.355,-19.524]},{"start":70.89020,"duration":0.13438,"confidence":0.738,"loudness_start":-18.102,"loudness_max_time":0.03257,"loudness_max":-10.635,"pitches":[1.000,0.784,0.325,0.082,0.054,0.160,0.070,0.309,0.094,0.123,0.099,0.114],"timbre":[46.795,-95.158,35.223,5.312,62.666,-27.522,-30.192,-17.535,10.134,-3.588,4.733,-22.326]},{"start":71.02458,"duration":0.13247,"confidence":0.303,"loudness_start":-14.997,"loudness_max_time":0.04153,"loudness_max":-10.768,"pitches":[1.000,0.536,0.083,0.082,0.127,0.391,0.107,0.106,0.152,0.185,0.283,0.125],"timbre":[46.406,-125.159,19.721,-1.245,56.005,-26.068,-9.169,1.696,13.241,-0.904,-11.907,-15.661]},{"start":71.15705,"duration":0.15234,"confidence":0.066,"loudness_start":-16.024,"loudness_max_time":0.03799,"loudness_max":-13.205,"pitches":[1.000,0.141,0.135,0.071,0.066,0.315,0.146,0.134,0.084,0.112,0.127,0.094],"timbre":[44.941,-139.043,4.759,-11.522,54.948,-34.102,-14.651,-6.069,22.268,9.498,-12.271,-21.502]},{"start":71.30939,"duration":0.14385,"confidence":0.318,"loudness_start":-18.184,"loudness_max_time":0.03413,"loudness_max":-13.221,"pitches":[1.000,0.083,0.018,0.031,0.067,0.523,0.071,0.037,0.058,0.087,0.164,0.085],"timbre":[44.309,-152.060,-0.137,-3.622,51.608,-30.870,-13.821,-1.621,22.658,-6.302,-11.722,-29.414]},{"start":71.45324,"duration":0.13347,"confidence":0.605,"loudness_start":-18.732,"loudness_max_time":0.02595,"loudness_max":-10.684,"pitches":[1.000,0.095,0.035,0.038,0.039,0.188,0.039,0.124,0.057,0.041,0.045,0.144],"timbre":[44.908,-158.736,-11.617,11.910,66.092,-25.206,-5.109,-17.424,14.396,0.724,9.489,-32.138]},{"start":71.58671,"duration":0.15664,"confidence":0.297,"loudness_start":-17.681,"loudness_max_time":0.03429,"loudness_max":-13.751,"pitches":[1.000,0.045,0.020,0.045,0.059,0.523,0.062,0.066,0.861,0.078,0.152,0.065],"timbre":[42.652,-189.774,-23.822,17.048,65.797,-39.152,-18.630,2.082,12.567,-1.095,-7.096,-21.004]},{"start":71.74336,"duration":0.14440,"confidence":0.486,"loudness_start":-21.114,"loudness_max_time":0.01974,"loudness_max":-15.819,"pitches":[0.301,0.037,0.118,0.540,0.081,0.299,0.083,0.129,1.000,0.042,0.031,0.063],"timbre":[40.660,-187.664,-46.842,2.430,43.288,-50.073,-31.612,-23.037,1.247,14.296,10.845,-7.507]},{"start":71.88776,"duration":0.09315,"confidence":0.450,"loudness_start":-22.610,"loudness_max_time":0.02482,"loudness_max":-16.870,"pitches":[0.427,0.181,0.178,1.000,0.320,0.212,0.069,0.091,0.632,0.090,0.037,0.092],"timbre":[39.336,-190.016,-72.930,-1.062,43.013,-57.451,-35.274,-12.766,-7.529,-4.313,-3.494,-3.859]},{"start":71.98091,"duration":0.47769,"confidence":1.000,"loudness_start":-24.249,"loudness_max_time":0.07471,"loudness_max":-4.049,"pitches":[0.257,0.059,0.095,0.414,0.108,1.000,0.214,0.058,0.085,0.050,0.103,0.062],"timbre":[45.010,-113.830,40.622,-132.518,39.969,39.498,17.155,20.065,4.725,-30.901,11.797,0.645]},{"start":72.45859,"duration":0.22054,"confidence":0.413,"loudness_start":-14.089,"loudness_max_time":0.02819,"loudness_max":-7.485,"pitches":[0.295,0.580,1.000,0.534,0.138,0.107,0.073,0.318,0.060,0.160,0.102,0.062],"timbre":[48.356,-105.284,23.095,26.526,41.242,-35.634,11.263,-5.023,25.243,-4.040,6.070,-19.788]},{"start":72.67914,"duration":0.17959,"confidence":0.013,"loudness_start":-15.924,"loudness_max_time":0.01226,"loudness_max":-11.441,"pitches":[0.564,1.000,0.284,0.037,0.052,0.319,0.125,0.029,0.029,0.032,0.030,0.038],"timbre":[45.352,-134.389,11.071,11.331,37.585,-51.792,-18.638,-10.184,0.995,19.243,-13.278,14.729]},{"start":72.85873,"duration":0.11016,"confidence":0.366,"loudness_start":-18.961,"loudness_max_time":0.04405,"loudness_max":-14.452,"pitches":[0.719,1.000,0.206,0.100,0.161,0.654,0.283,0.104,0.176,0.187,0.114,0.051],"timbre":[42.660,-157.093,-31.150,10.916,51.166,-25.757,-23.182,-14.903,5.220,-13.073,-15.946,24.824]},{"start":72.96889,"duration":0.15043,"confidence":0.632,"loudness_start":-22.501,"loudness_max_time":0.08526,"loudness_max":-14.406,"pitches":[0.478,1.000,0.570,0.083,0.154,0.705,0.503,0.060,0.106,0.272,0.160,0.037],"timbre":[40.701,-178.866,-17.102,-63.858,50.007,-22.435,-34.682,-2.768,-9.109,6.776,-24.834,12.455]},{"start":73.11932,"duration":0.18122,"confidence":0.816,"loudness_start":-23.249,"loudness_max_time":0.05901,"loudness_max":-13.149,"pitches":[0.435,0.699,0.410,0.078,0.105,1.000,0.393,0.251,0.108,0.120,0.056,0.132],"timbre":[41.581,-140.876,-23.851,-42.794,56.799,29.973,-46.346,-3.362,3.326,-26.953,-13.975,-2.158]},{"start":73.30054,"duration":0.10454,"confidence":0.621,"loudness_start":-21.771,"loudness_max_time":0.02071,"loudness_max":-12.784,"pitches":[0.608,0.696,0.276,0.132,0.263,1.000,0.496,0.289,0.334,0.315,0.378,0.177],"timbre":[41.795,-202.232,-27.812,39.238,39.140,-52.098,1.031,-7.155,-8.019,5.310,15.884,10.771]},{"start":73.40508,"duration":0.15020,"confidence":0.638,"loudness_start":-22.588,"loudness_max_time":0.05375,"loudness_max":-14.840,"pitches":[0.140,0.075,0.130,0.081,0.246,1.000,0.495,0.110,0.104,0.114,0.084,0.042],"timbre":[39.981,-195.267,-40.784,-34.488,48.704,-6.027,-21.965,10.424,8.669,-22.782,-25.198,7.991]},{"start":73.55528,"duration":0.12100,"confidence":0.744,"loudness_start":-23.369,"loudness_max_time":0.04108,"loudness_max":-14.199,"pitches":[0.240,0.236,0.670,0.095,0.337,1.000,0.683,0.106,0.162,0.146,0.041,0.112],"timbre":[41.017,-198.962,-54.975,-21.263,52.952,3.075,-24.434,-3.720,-13.844,-11.752,-26.199,0.743]},{"start":73.67628,"duration":0.17002,"confidence":0.838,"loudness_start":-23.632,"loudness_max_time":0.06671,"loudness_max":-11.720,"pitches":[0.087,0.158,0.335,0.101,0.181,1.000,0.561,0.228,0.098,0.228,0.047,0.084],"timbre":[40.988,-165.312,-56.035,-53.251,55.058,18.999,-23.837,4.950,1.267,-26.578,-22.963,-5.425]},{"start":73.84630,"duration":0.12023,"confidence":0.707,"loudness_start":-23.407,"loudness_max_time":0.03975,"loudness_max":-14.148,"pitches":[0.171,0.140,0.384,0.147,0.263,1.000,0.707,0.130,0.165,0.113,0.186,0.099],"timbre":[40.859,-172.889,-58.291,12.391,25.344,-3.415,-38.935,-7.471,-3.006,-19.084,-24.596,-9.052]},{"start":73.96653,"duration":0.13551,"confidence":0.826,"loudness_start":-26.032,"loudness_max_time":0.06076,"loudness_max":-14.278,"pitches":[0.121,0.097,0.137,0.035,0.061,1.000,0.194,0.086,0.135,0.067,0.041,0.062],"timbre":[40.302,-186.664,-50.489,-53.623,51.286,15.255,-24.308,-2.668,3.500,-12.659,-24.843,-1.489]},{"start":74.10204,"duration":0.14286,"confidence":0.683,"loudness_start":-22.440,"loudness_max_time":0.06374,"loudness_max":-15.194,"pitches":[0.158,0.128,0.505,0.094,0.123,1.000,0.581,0.700,0.365,0.399,0.156,0.101],"timbre":[40.616,-204.393,-34.485,-70.062,61.202,-8.459,-16.498,0.343,-3.764,-32.817,-23.288,-5.703]},{"start":74.24490,"duration":0.19374,"confidence":0.675,"loudness_start":-21.019,"loudness_max_time":0.06313,"loudness_max":-13.312,"pitches":[0.025,0.058,0.280,0.084,0.273,1.000,0.463,0.734,0.237,0.055,0.035,0.038],"timbre":[41.231,-168.994,-45.616,-22.462,52.201,-3.982,-36.572,6.135,15.848,-29.044,-25.355,-7.329]},{"start":74.43864,"duration":0.25510,"confidence":0.898,"loudness_start":-23.699,"loudness_max_time":0.01608,"loudness_max":-10.160,"pitches":[0.142,0.067,0.386,0.207,0.251,0.809,0.316,1.000,0.361,0.204,0.131,0.094],"timbre":[43.348,-73.964,-39.543,64.423,-8.616,-7.073,-17.750,-25.925,-14.398,0.568,-9.067,3.752]},{"start":74.69374,"duration":0.42898,"confidence":1.000,"loudness_start":-26.392,"loudness_max_time":0.05637,"loudness_max":-7.587,"pitches":[0.105,0.167,1.000,0.132,0.059,0.268,0.069,0.240,0.092,0.066,0.039,0.039],"timbre":[43.943,-136.294,-3.865,-48.103,45.151,77.365,16.385,12.111,5.788,5.719,-19.127,-3.423]},{"start":75.12272,"duration":0.13800,"confidence":0.432,"loudness_start":-21.674,"loudness_max_time":0.03282,"loudness_max":-15.992,"pitches":[0.337,1.000,0.322,0.051,0.114,0.756,0.277,0.137,0.176,0.066,0.049,0.033],"timbre":[40.089,-193.935,-51.923,-2.298,49.415,-22.900,-37.964,-10.348,0.652,-13.981,-8.062,-2.072]},{"start":75.26073,"duration":0.15723,"confidence":0.680,"loudness_start":-24.468,"loudness_max_time":0.07242,"loudness_max":-16.860,"pitches":[0.226,0.614,0.266,0.067,0.124,1.000,0.174,0.026,0.097,0.268,0.108,0.035],"timbre":[40.570,-181.398,-34.711,-33.381,58.251,-9.712,-41.506,5.948,-2.062,-17.567,11.184,0.162]},{"start":75.41796,"duration":0.14444,"confidence":0.758,"loudness_start":-22.930,"loudness_max_time":0.03662,"loudness_max":-12.870,"pitches":[0.294,0.806,0.687,0.107,0.097,1.000,0.111,0.135,0.083,0.131,0.059,0.062],"timbre":[43.520,-121.102,-34.031,20.487,33.150,-35.293,-62.382,-35.294,-11.752,-2.642,-7.964,2.954]},{"start":75.56240,"duration":0.09878,"confidence":0.717,"loudness_start":-22.513,"loudness_max_time":0.03702,"loudness_max":-11.878,"pitches":[0.554,0.693,0.194,0.115,0.302,1.000,0.458,0.305,0.294,0.205,0.325,0.157],"timbre":[42.759,-185.769,-35.044,38.092,40.923,-13.560,-8.424,-9.122,0.323,-0.354,9.911,11.979]},{"start":75.66118,"duration":0.14748,"confidence":0.651,"loudness_start":-22.409,"loudness_max_time":0.06787,"loudness_max":-14.394,"pitches":[0.303,0.240,0.132,0.072,0.179,1.000,0.587,0.126,0.122,0.130,0.125,0.128],"timbre":[40.656,-173.319,-47.079,-43.973,51.948,1.353,-25.969,2.521,10.810,-28.448,-28.980,3.903]},{"start":75.80866,"duration":0.13846,"confidence":0.765,"loudness_start":-24.779,"loudness_max_time":0.05680,"loudness_max":-14.974,"pitches":[0.150,0.147,0.127,0.050,0.226,1.000,0.609,0.059,0.106,0.122,0.096,0.072],"timbre":[39.740,-205.024,-55.662,-62.423,65.147,7.741,-22.260,15.369,-1.570,-14.245,-25.273,-3.750]},{"start":75.94712,"duration":0.15791,"confidence":0.807,"loudness_start":-24.021,"loudness_max_time":0.05978,"loudness_max":-12.858,"pitches":[0.089,0.141,0.705,0.103,0.272,1.000,0.627,0.315,0.125,0.116,0.044,0.078],"timbre":[40.456,-187.737,-51.737,-67.035,59.063,8.362,-24.245,17.797,-8.842,-14.222,-31.583,-9.021]},{"start":76.10503,"duration":0.12771,"confidence":0.621,"loudness_start":-22.506,"loudness_max_time":0.03822,"loudness_max":-14.481,"pitches":[0.297,0.217,0.270,0.164,0.337,1.000,0.786,0.129,0.185,0.260,0.079,0.142],"timbre":[40.691,-184.867,-55.296,2.913,36.016,-5.696,-30.098,-11.284,-9.887,-13.636,-26.661,-4.196]},{"start":76.23274,"duration":0.18494,"confidence":0.838,"loudness_start":-25.380,"loudness_max_time":0.05817,"loudness_max":-13.256,"pitches":[0.031,0.041,0.365,0.039,0.038,1.000,0.166,0.111,0.136,0.074,0.013,0.011],"timbre":[40.767,-182.735,-57.772,-31.066,51.225,11.428,-23.745,-20.173,1.273,-14.831,-8.209,-2.686]},{"start":76.41769,"duration":0.10844,"confidence":0.673,"loudness_start":-22.303,"loudness_max_time":0.02759,"loudness_max":-14.339,"pitches":[0.108,0.082,0.096,0.052,0.059,0.114,0.093,1.000,0.185,0.116,0.108,0.064],"timbre":[41.888,-178.452,-44.715,7.945,46.569,-55.028,-26.146,-29.892,-16.707,5.830,4.702,-9.716]},{"start":76.52612,"duration":0.15533,"confidence":0.611,"loudness_start":-20.940,"loudness_max_time":0.04833,"loudness_max":-13.999,"pitches":[0.320,0.129,0.707,0.079,0.036,0.236,0.135,1.000,0.480,0.173,0.101,0.107],"timbre":[41.124,-160.607,-63.294,4.938,49.286,-5.274,-35.134,-11.170,11.248,-30.005,-15.934,-10.741]},{"start":76.68145,"duration":0.30544,"confidence":0.972,"loudness_start":-24.707,"loudness_max_time":0.03747,"loudness_max":-10.257,"pitches":[0.145,0.114,0.297,0.214,0.209,0.913,0.286,1.000,0.344,0.218,0.110,0.115],"timbre":[42.294,-92.058,-49.204,27.109,6.812,44.487,-14.612,-8.262,-8.252,-25.972,-3.328,-5.337]},{"start":76.98689,"duration":0.36971,"confidence":1.000,"loudness_start":-25.970,"loudness_max_time":0.02120,"loudness_max":-6.697,"pitches":[0.039,0.240,1.000,0.057,0.065,0.314,0.054,0.244,0.105,0.084,0.023,0.028],"timbre":[47.805,-117.662,11.170,41.272,35.625,-3.891,20.441,-0.311,17.468,-2.777,17.175,-12.306]},{"start":77.35660,"duration":0.17565,"confidence":0.501,"loudness_start":-19.951,"loudness_max_time":0.06643,"loudness_max":-14.690,"pitches":[0.256,1.000,0.349,0.060,0.105,0.594,0.270,0.154,0.140,0.090,0.055,0.087],"timbre":[41.163,-178.655,-36.285,-22.440,58.142,-19.976,-19.759,2.745,9.864,-23.723,-23.632,9.859]},{"start":77.53224,"duration":0.11506,"confidence":0.651,"loudness_start":-22.409,"loudness_max_time":0.03062,"loudness_max":-14.693,"pitches":[0.518,0.990,0.419,0.130,0.179,1.000,0.632,0.101,0.168,0.143,0.210,0.080],"timbre":[40.331,-178.663,-58.070,5.873,62.705,-14.596,-41.562,-7.742,-8.157,-20.184,-7.937,-5.439]},{"start":77.64730,"duration":0.18127,"confidence":0.898,"loudness_start":-24.639,"loudness_max_time":0.05689,"loudness_max":-12.825,"pitches":[0.194,0.671,0.423,0.047,0.148,1.000,0.448,0.259,0.087,0.271,0.070,0.069],"timbre":[41.212,-144.453,-30.592,-48.899,62.760,37.602,-41.440,-2.912,1.618,-23.198,-11.659,-5.282]},{"start":77.82857,"duration":0.13338,"confidence":0.631,"loudness_start":-22.015,"loudness_max_time":0.02306,"loudness_max":-14.532,"pitches":[0.290,0.241,0.198,0.069,0.155,1.000,0.250,0.111,0.145,0.146,0.231,0.127],"timbre":[42.431,-174.849,-30.053,13.602,31.843,-37.703,-21.894,-0.326,3.214,-18.505,-8.318,18.916]},{"start":77.96195,"duration":0.13814,"confidence":0.498,"loudness_start":-21.688,"loudness_max_time":0.00729,"loudness_max":-15.569,"pitches":[0.098,0.114,0.266,0.033,0.095,1.000,0.177,0.130,0.094,0.051,0.065,0.031],"timbre":[41.006,-170.921,-59.590,9.234,37.197,-51.065,-30.684,-38.790,-4.192,-1.315,-20.308,5.135]},{"start":78.10009,"duration":0.11624,"confidence":0.777,"loudness_start":-23.531,"loudness_max_time":0.04745,"loudness_max":-14.037,"pitches":[0.146,0.163,0.370,0.123,0.259,1.000,0.271,0.082,0.096,0.122,0.138,0.043],"timbre":[41.442,-188.286,-52.041,-27.906,49.417,16.953,-23.152,-9.080,1.377,-28.784,-8.597,-3.549]},{"start":78.21633,"duration":0.15615,"confidence":0.703,"loudness_start":-22.088,"loudness_max_time":0.05495,"loudness_max":-11.888,"pitches":[0.390,0.318,0.588,0.188,0.238,1.000,0.395,0.392,0.223,0.114,0.082,0.240],"timbre":[41.289,-164.286,-55.845,-39.993,49.062,10.439,-25.626,1.263,-3.475,-29.025,-28.816,-6.489]},{"start":78.37247,"duration":0.12150,"confidence":0.588,"loudness_start":-22.351,"loudness_max_time":0.03950,"loudness_max":-14.799,"pitches":[0.238,0.234,0.316,0.149,0.229,1.000,0.700,0.110,0.189,0.259,0.213,0.108],"timbre":[40.440,-180.520,-66.063,8.617,39.982,-14.419,-33.171,-26.502,1.273,-22.315,-25.708,-7.589]},{"start":78.49397,"duration":0.14508,"confidence":0.843,"loudness_start":-25.597,"loudness_max_time":0.06166,"loudness_max":-13.399,"pitches":[0.025,0.097,0.125,0.071,0.091,1.000,0.187,0.130,0.149,0.045,0.011,0.022],"timbre":[40.043,-199.031,-43.787,-68.202,49.162,14.678,-24.493,-5.555,7.651,-18.582,-26.539,-0.762]},{"start":78.63905,"duration":0.15161,"confidence":0.576,"loudness_start":-21.740,"loudness_max_time":0.05022,"loudness_max":-14.972,"pitches":[0.216,0.175,0.523,0.130,0.223,0.654,0.307,1.000,0.281,0.177,0.092,0.090],"timbre":[41.137,-195.092,-40.978,-44.087,59.443,-12.376,-17.379,-7.304,-8.763,-31.652,-16.384,-4.175]},{"start":78.79066,"duration":0.15723,"confidence":0.638,"loudness_start":-21.017,"loudness_max_time":0.04629,"loudness_max":-13.641,"pitches":[0.038,0.108,0.223,0.047,0.024,0.123,0.118,1.000,0.361,0.191,0.063,0.057],"timbre":[41.948,-152.595,-58.772,15.157,49.149,-19.148,-41.670,-20.323,2.144,-8.039,-16.941,-12.932]},{"start":78.94789,"duration":0.29147,"confidence":0.962,"loudness_start":-24.086,"loudness_max_time":0.03679,"loudness_max":-9.813,"pitches":[0.181,0.074,0.215,0.171,0.168,0.870,0.262,1.000,0.338,0.189,0.158,0.134],"timbre":[42.622,-94.187,-53.052,30.125,13.968,49.191,-13.906,-5.422,-4.431,-30.116,-7.967,-3.756]},{"start":79.23937,"duration":0.55646,"confidence":1.000,"loudness_start":-26.689,"loudness_max_time":0.03523,"loudness_max":-7.992,"pitches":[0.048,0.100,1.000,0.087,0.060,0.393,0.076,0.190,0.095,0.075,0.018,0.027],"timbre":[45.407,-130.421,-10.925,34.486,35.009,42.969,14.298,1.353,7.415,4.967,-0.474,-10.106]},{"start":79.79583,"duration":0.11587,"confidence":0.816,"loudness_start":-23.989,"loudness_max_time":0.03677,"loudness_max":-13.217,"pitches":[0.495,1.000,0.384,0.127,0.209,0.420,0.243,0.076,0.189,0.127,0.222,0.094],"timbre":[40.734,-155.097,-45.031,15.430,46.809,5.725,-35.712,0.462,-4.658,-35.268,-4.446,-3.325]},{"start":79.91170,"duration":0.17279,"confidence":0.907,"loudness_start":-24.797,"loudness_max_time":0.06069,"loudness_max":-13.141,"pitches":[0.631,1.000,0.651,0.113,0.132,0.823,0.315,0.135,0.124,0.263,0.087,0.214],"timbre":[41.634,-125.133,-22.851,-49.153,49.531,37.679,-43.399,0.393,0.133,-19.953,-8.301,-5.271]},{"start":80.08449,"duration":0.10385,"confidence":0.594,"loudness_start":-21.744,"loudness_max_time":0.02711,"loudness_max":-12.223,"pitches":[0.753,1.000,0.535,0.130,0.264,0.574,0.475,0.261,0.407,0.380,0.533,0.240],"timbre":[41.960,-188.072,-38.289,29.396,38.229,-18.331,-5.072,-15.466,-8.750,-4.993,10.089,10.085]},{"start":80.18834,"duration":0.13297,"confidence":0.462,"loudness_start":-22.535,"loudness_max_time":0.06231,"loudness_max":-15.966,"pitches":[0.220,0.215,0.228,0.069,0.275,1.000,0.368,0.076,0.142,0.199,0.131,0.039],"timbre":[39.559,-182.393,-47.536,-41.077,45.077,-14.612,-27.989,2.216,8.465,-24.148,-20.056,1.998]},{"start":80.32132,"duration":0.18834,"confidence":0.693,"loudness_start":-24.247,"loudness_max_time":0.10972,"loudness_max":-16.401,"pitches":[0.060,0.065,0.143,0.052,0.327,1.000,0.278,0.047,0.041,0.046,0.015,0.022],"timbre":[39.732,-200.684,-41.060,-87.183,56.546,-8.643,-20.737,15.958,-8.016,-10.025,-9.625,-6.566]},{"start":80.50966,"duration":0.12726,"confidence":0.612,"loudness_start":-22.016,"loudness_max_time":0.02696,"loudness_max":-12.973,"pitches":[0.035,0.110,0.267,0.097,0.122,1.000,0.241,0.104,0.099,0.132,0.045,0.048],"timbre":[42.567,-153.827,-60.972,17.497,33.499,-41.021,-41.348,-19.938,-13.635,-10.834,-11.981,-7.561]},{"start":80.63692,"duration":0.13283,"confidence":0.653,"loudness_start":-22.076,"loudness_max_time":0.05221,"loudness_max":-14.784,"pitches":[0.142,0.178,0.326,0.085,0.169,1.000,0.445,0.081,0.136,0.155,0.176,0.064],"timbre":[41.446,-175.008,-52.959,-13.059,37.365,-5.359,-36.440,-15.764,5.814,-11.395,-26.544,1.185]},{"start":80.76975,"duration":0.17932,"confidence":0.754,"loudness_start":-23.610,"loudness_max_time":0.04991,"loudness_max":-13.362,"pitches":[0.156,0.052,0.056,0.024,0.026,1.000,0.069,0.065,0.150,0.091,0.021,0.042],"timbre":[41.025,-187.777,-62.360,-25.781,54.898,1.984,-27.528,-18.206,5.386,-18.964,-9.578,-4.393]},{"start":80.94907,"duration":0.10599,"confidence":0.576,"loudness_start":-21.661,"loudness_max_time":0.02041,"loudness_max":-15.177,"pitches":[0.113,0.132,0.468,0.107,0.098,0.603,0.157,1.000,0.247,0.209,0.093,0.069],"timbre":[41.131,-199.544,-49.143,-9.421,54.889,-65.840,-31.176,-21.418,-19.183,16.697,-2.581,-7.858]},{"start":81.05506,"duration":0.14698,"confidence":0.653,"loudness_start":-21.351,"loudness_max_time":0.04607,"loudness_max":-13.690,"pitches":[0.025,0.082,0.501,0.159,0.079,0.132,0.110,1.000,0.353,0.152,0.069,0.050],"timbre":[41.457,-158.145,-55.256,3.188,49.748,0.196,-34.558,-3.737,4.686,-24.766,-8.222,-16.323]},{"start":81.20204,"duration":0.17814,"confidence":0.975,"loudness_start":-24.033,"loudness_max_time":0.04785,"loudness_max":-9.453,"pitches":[0.505,0.174,0.205,0.197,0.109,0.260,0.194,1.000,0.472,0.172,0.239,0.325],"timbre":[43.463,-92.662,-2.438,-34.812,23.770,49.415,5.320,12.173,1.212,-35.653,-26.105,-4.491]},{"start":81.38018,"duration":0.27864,"confidence":0.806,"loudness_start":-20.996,"loudness_max_time":0.01518,"loudness_max":-9.108,"pitches":[0.592,0.499,0.417,1.000,0.472,0.653,0.323,0.381,0.990,0.423,0.417,0.385],"timbre":[46.977,-114.405,19.713,28.145,44.067,-44.652,-14.694,-13.320,5.699,19.155,-2.499,-12.001]},{"start":81.65882,"duration":0.11533,"confidence":0.145,"loudness_start":-16.765,"loudness_max_time":0.02278,"loudness_max":-13.688,"pitches":[0.998,1.000,0.130,0.073,0.021,0.019,0.050,0.178,0.153,0.042,0.056,0.082],"timbre":[44.318,-128.899,-6.324,-2.916,58.061,-55.099,-22.194,-6.389,14.467,18.297,-10.884,-18.915]},{"start":81.77415,"duration":0.15252,"confidence":0.414,"loudness_start":-18.431,"loudness_max_time":0.03496,"loudness_max":-13.347,"pitches":[0.695,1.000,0.076,0.047,0.035,0.203,0.047,0.065,0.108,0.053,0.089,0.032],"timbre":[44.615,-133.479,8.523,-16.891,67.065,-33.593,-18.909,-1.928,19.610,9.478,-3.311,-27.195]},{"start":81.92667,"duration":0.27116,"confidence":0.015,"loudness_start":-16.992,"loudness_max_time":0.04410,"loudness_max":-14.776,"pitches":[0.713,0.428,1.000,0.301,0.066,0.085,0.054,0.067,0.306,0.076,0.048,0.072],"timbre":[44.062,-150.656,5.616,-14.681,79.569,-48.332,-15.987,-12.056,14.347,11.094,-2.721,-19.833]},{"start":82.19782,"duration":0.14503,"confidence":0.482,"loudness_start":-18.304,"loudness_max_time":0.04307,"loudness_max":-12.830,"pitches":[1.000,0.599,0.282,0.103,0.038,0.052,0.053,0.190,0.213,0.128,0.074,0.083],"timbre":[44.532,-115.513,24.380,3.239,78.871,-14.924,-27.398,-21.079,10.997,2.197,-0.776,-26.565]},{"start":82.34286,"duration":0.14549,"confidence":0.590,"loudness_start":-17.998,"loudness_max_time":0.03788,"loudness_max":-10.266,"pitches":[1.000,0.389,0.076,0.092,0.127,0.403,0.081,0.162,0.394,0.155,0.330,0.128],"timbre":[45.310,-142.248,6.381,4.950,54.499,-9.503,-5.780,-3.563,15.359,-0.152,-13.726,-13.505]},{"start":82.48834,"duration":0.14512,"confidence":0.356,"loudness_start":-18.015,"loudness_max_time":0.02588,"loudness_max":-13.318,"pitches":[1.000,0.147,0.034,0.044,0.044,0.188,0.076,0.103,0.301,0.071,0.085,0.083],"timbre":[44.546,-150.854,-8.014,-14.910,59.012,-37.208,-7.794,-2.725,17.124,-3.552,-5.876,-25.162]},{"start":82.63347,"duration":0.40712,"confidence":0.498,"loudness_start":-17.912,"loudness_max_time":0.17027,"loudness_max":-10.784,"pitches":[0.311,0.055,0.058,0.044,0.121,1.000,0.144,0.095,0.227,0.048,0.050,0.037],"timbre":[45.514,-133.938,9.166,-28.189,53.813,-21.546,-5.105,1.320,13.600,-14.710,-7.496,-24.171]},{"start":83.04059,"duration":0.16866,"confidence":0.501,"loudness_start":-20.893,"loudness_max_time":0.05090,"loudness_max":-14.429,"pitches":[0.215,0.030,0.194,0.358,0.066,0.043,0.057,0.079,1.000,0.063,0.041,0.040],"timbre":[41.444,-165.527,-53.122,11.403,51.358,-13.812,-26.061,-25.263,8.580,-14.953,-13.711,-10.352]},{"start":83.20925,"duration":0.11229,"confidence":0.706,"loudness_start":-22.997,"loudness_max_time":0.03031,"loudness_max":-14.775,"pitches":[0.120,0.029,0.080,0.580,0.099,0.098,0.055,0.216,1.000,0.147,0.080,0.044],"timbre":[40.868,-175.133,-69.892,3.248,47.055,-33.474,-27.265,-20.033,1.796,-11.722,-1.442,-2.063]},{"start":83.32154,"duration":0.33356,"confidence":1.000,"loudness_start":-23.383,"loudness_max_time":0.05468,"loudness_max":-3.962,"pitches":[0.393,0.051,0.055,0.444,0.121,1.000,0.257,0.078,0.370,0.054,0.077,0.065],"timbre":[47.779,-76.095,47.956,-84.542,27.803,61.752,35.868,9.256,7.999,-32.985,12.327,12.340]},{"start":83.65510,"duration":0.27356,"confidence":0.224,"loudness_start":-13.848,"loudness_max_time":0.00613,"loudness_max":-8.594,"pitches":[0.809,0.532,0.469,1.000,0.458,0.614,0.307,0.251,0.594,0.311,0.403,0.449],"timbre":[48.594,-99.590,35.680,34.901,38.247,-45.685,-1.178,-11.307,10.279,8.246,-30.982,-3.791]},{"start":83.92866,"duration":0.39406,"confidence":0.610,"loudness_start":-16.656,"loudness_max_time":0.08258,"loudness_max":-8.477,"pitches":[0.393,0.202,1.000,0.193,0.056,0.152,0.033,0.050,0.214,0.063,0.081,0.046],"timbre":[46.006,-118.974,32.453,-31.144,50.871,-33.459,-7.539,-6.801,17.018,12.233,-15.237,-10.260]},{"start":84.32272,"duration":0.13973,"confidence":0.315,"loudness_start":-17.239,"loudness_max_time":0.04337,"loudness_max":-12.799,"pitches":[1.000,0.849,0.189,0.118,0.092,0.401,0.104,0.068,0.181,0.191,0.257,0.055],"timbre":[44.676,-127.524,13.988,-13.218,69.391,-27.242,-28.287,-7.049,18.997,-1.344,-4.720,-18.085]},{"start":84.46245,"duration":0.15079,"confidence":0.477,"loudness_start":-17.065,"loudness_max_time":0.03474,"loudness_max":-12.201,"pitches":[1.000,0.848,0.332,0.125,0.069,0.070,0.108,0.480,0.745,0.181,0.094,0.059],"timbre":[45.161,-125.873,11.058,6.848,62.636,-25.033,-25.669,-15.712,7.156,9.489,-3.345,-21.426]},{"start":84.61324,"duration":0.28290,"confidence":0.372,"loudness_start":-17.342,"loudness_max_time":0.04904,"loudness_max":-13.341,"pitches":[0.846,0.218,0.200,0.149,0.277,1.000,0.550,0.396,0.423,0.272,0.100,0.159],"timbre":[44.488,-164.584,11.813,-9.066,65.621,-31.337,0.991,4.114,6.567,3.132,-6.108,-19.602]},{"start":84.89615,"duration":0.12408,"confidence":0.553,"loudness_start":-18.269,"loudness_max_time":0.03190,"loudness_max":-11.920,"pitches":[0.892,0.076,0.076,0.175,0.042,0.143,0.053,0.271,1.000,0.216,0.185,0.095],"timbre":[44.767,-161.482,-13.163,-1.023,54.199,-20.507,-6.049,-22.760,16.691,-3.331,-0.086,-24.137]},{"start":85.02023,"duration":0.29610,"confidence":0.478,"loudness_start":-17.894,"loudness_max_time":0.04587,"loudness_max":-12.130,"pitches":[0.442,0.038,0.022,0.089,0.132,1.000,0.148,0.068,0.303,0.040,0.049,0.054],"timbre":[44.312,-154.614,-10.671,-16.347,53.639,-14.737,-13.839,-6.192,22.158,-9.676,-15.528,-21.910]},{"start":85.31633,"duration":0.13161,"confidence":0.477,"loudness_start":-20.352,"loudness_max_time":0.03808,"loudness_max":-14.032,"pitches":[0.085,0.045,0.103,0.172,0.068,0.013,0.041,0.178,1.000,0.073,0.022,0.020],"timbre":[41.186,-186.517,-50.940,12.838,46.333,-16.773,-26.827,-24.165,2.152,-2.417,-15.336,-10.852]},{"start":85.44794,"duration":0.14045,"confidence":0.546,"loudness_start":-23.516,"loudness_max_time":0.07475,"loudness_max":-17.783,"pitches":[0.141,0.053,0.085,1.000,0.164,0.169,0.094,0.188,0.967,0.087,0.023,0.050],"timbre":[39.776,-164.201,-57.843,-40.263,34.250,-12.227,-29.483,15.684,1.034,-9.071,0.142,-0.533]},{"start":85.58839,"duration":0.18608,"confidence":1.000,"loudness_start":-23.984,"loudness_max_time":0.05196,"loudness_max":-4.275,"pitches":[0.387,0.042,0.114,0.549,0.249,1.000,0.518,0.111,0.167,0.030,0.032,0.035],"timbre":[48.651,-69.796,48.659,-60.395,24.820,71.270,46.703,5.117,3.359,-28.897,21.395,19.806]},{"start":85.77447,"duration":0.47560,"confidence":0.201,"loudness_start":-11.058,"loudness_max_time":0.04188,"loudness_max":-7.107,"pitches":[0.642,0.359,0.393,1.000,0.317,0.809,0.222,0.215,0.443,0.243,0.297,0.274],"timbre":[49.684,-64.172,39.091,61.085,24.179,-35.837,8.045,-19.488,-12.346,15.359,-34.986,31.143]},{"start":86.25007,"duration":0.34376,"confidence":0.589,"loudness_start":-15.991,"loudness_max_time":0.02447,"loudness_max":-9.476,"pitches":[0.509,0.316,1.000,0.110,0.051,0.061,0.042,0.035,0.124,0.048,0.037,0.043],"timbre":[46.896,-112.004,24.050,29.673,48.558,-31.078,0.893,-19.417,12.943,9.742,1.694,-3.849]},{"start":86.59383,"duration":0.13800,"confidence":0.523,"loudness_start":-18.653,"loudness_max_time":0.03019,"loudness_max":-12.834,"pitches":[1.000,0.765,0.208,0.082,0.056,0.397,0.074,0.095,0.576,0.209,0.255,0.062],"timbre":[44.604,-142.779,9.556,-10.385,59.939,-16.333,-25.396,0.095,13.459,-14.596,0.196,-25.776]},{"start":86.73184,"duration":0.13973,"confidence":0.495,"loudness_start":-18.419,"loudness_max_time":0.02783,"loudness_max":-11.812,"pitches":[1.000,0.578,0.172,0.106,0.038,0.032,0.046,0.182,0.468,0.130,0.073,0.107],"timbre":[45.289,-130.421,8.303,10.577,59.593,-30.649,-26.698,-7.773,3.204,6.213,0.104,-22.675]},{"start":86.87156,"duration":0.13986,"confidence":0.496,"loudness_start":-18.391,"loudness_max_time":0.04271,"loudness_max":-12.294,"pitches":[1.000,0.485,0.075,0.093,0.134,0.446,0.093,0.123,0.264,0.169,0.310,0.139],"timbre":[44.623,-157.700,11.318,2.523,59.109,-18.626,-3.943,1.777,2.783,5.838,-8.809,-17.293]},{"start":87.01143,"duration":0.14503,"confidence":0.266,"loudness_start":-18.172,"loudness_max_time":0.05816,"loudness_max":-14.864,"pitches":[1.000,0.135,0.147,0.114,0.067,0.240,0.121,0.139,0.704,0.156,0.110,0.052],"timbre":[43.976,-171.890,-7.256,-23.268,66.416,-44.521,-9.127,13.085,13.243,3.577,-7.707,-22.819]},{"start":87.15646,"duration":0.12054,"confidence":0.044,"loudness_start":-18.135,"loudness_max_time":0.03098,"loudness_max":-15.254,"pitches":[1.000,0.167,0.082,0.227,0.073,0.402,0.141,0.184,0.614,0.150,0.077,0.079],"timbre":[43.488,-170.161,-11.084,-27.201,66.009,-44.463,-7.600,3.015,16.186,0.738,-7.860,-26.572]},{"start":87.27701,"duration":0.15823,"confidence":0.611,"loudness_start":-17.870,"loudness_max_time":0.04974,"loudness_max":-10.093,"pitches":[1.000,0.188,0.208,0.171,0.059,0.094,0.093,0.300,0.426,0.151,0.121,0.088],"timbre":[44.659,-149.892,-7.048,-22.786,71.212,-5.524,-4.260,-3.607,17.221,-15.015,-27.220,-29.005]},{"start":87.43524,"duration":0.13356,"confidence":0.430,"loudness_start":-18.399,"loudness_max_time":0.03721,"loudness_max":-11.797,"pitches":[0.772,0.070,0.034,0.061,0.058,0.309,0.092,0.151,1.000,0.151,0.141,0.053],"timbre":[43.210,-171.847,-27.677,15.071,58.311,-16.116,-13.889,-13.259,14.605,-12.926,-19.980,-20.935]},{"start":87.56880,"duration":0.14621,"confidence":0.612,"loudness_start":-21.435,"loudness_max_time":0.04490,"loudness_max":-13.877,"pitches":[0.281,0.076,0.071,0.296,0.064,0.063,0.030,0.123,1.000,0.076,0.029,0.060],"timbre":[41.444,-177.392,-52.724,-8.660,53.005,-4.978,-25.250,-22.819,8.100,-12.313,-24.152,-6.668]},{"start":87.71501,"duration":0.12721,"confidence":0.601,"loudness_start":-22.741,"loudness_max_time":0.04326,"loudness_max":-15.879,"pitches":[0.210,0.090,0.091,1.000,0.185,0.313,0.113,0.149,0.777,0.096,0.136,0.066],"timbre":[39.928,-175.490,-63.750,-13.998,45.944,-1.625,-16.232,-11.762,-3.008,-24.660,-21.538,0.347]},{"start":87.84222,"duration":0.34109,"confidence":1.000,"loudness_start":-24.060,"loudness_max_time":0.06323,"loudness_max":-4.106,"pitches":[0.326,0.046,0.065,0.501,0.110,1.000,0.246,0.087,0.283,0.029,0.040,0.041],"timbre":[46.645,-88.342,45.389,-112.218,30.190,52.493,29.852,14.106,9.564,-34.364,15.874,14.127]},{"start":88.18331,"duration":0.34231,"confidence":0.028,"loudness_start":-13.744,"loudness_max_time":0.00754,"loudness_max":-8.735,"pitches":[0.654,0.578,0.782,1.000,0.395,0.529,0.231,0.198,0.556,0.280,0.362,0.319],"timbre":[48.504,-95.018,32.379,33.220,38.970,-51.096,-7.951,-11.090,7.482,12.370,-24.852,4.166]},{"start":88.52562,"duration":0.33043,"confidence":0.479,"loudness_start":-15.463,"loudness_max_time":0.01425,"loudness_max":-9.314,"pitches":[0.453,0.342,1.000,0.130,0.048,0.107,0.034,0.039,0.283,0.065,0.089,0.050],"timbre":[47.025,-115.923,28.417,30.123,47.003,-56.826,-3.694,-18.339,1.321,21.798,-17.083,0.485]},{"start":88.85605,"duration":0.12227,"confidence":0.234,"loudness_start":-17.470,"loudness_max_time":0.02059,"loudness_max":-14.434,"pitches":[1.000,0.570,0.130,0.134,0.029,0.077,0.042,0.078,0.336,0.134,0.098,0.056],"timbre":[43.388,-172.399,1.791,-2.308,89.827,-43.245,-13.091,-2.100,0.537,5.797,0.628,-21.232]},{"start":88.97832,"duration":0.15773,"confidence":0.719,"loudness_start":-18.606,"loudness_max_time":0.05849,"loudness_max":-11.238,"pitches":[1.000,0.720,0.308,0.193,0.078,0.055,0.086,0.264,0.563,0.172,0.107,0.134],"timbre":[45.893,-99.559,35.355,-40.380,71.200,2.279,-21.694,-9.178,15.300,-16.077,-17.671,-19.252]},{"start":89.13605,"duration":0.13959,"confidence":0.314,"loudness_start":-15.059,"loudness_max_time":0.04157,"loudness_max":-10.378,"pitches":[1.000,0.458,0.067,0.088,0.126,0.475,0.112,0.182,0.431,0.170,0.337,0.133],"timbre":[46.503,-130.450,8.193,0.145,53.412,-23.618,-12.782,7.217,6.239,4.055,-11.853,-15.075]},{"start":89.27565,"duration":0.13791,"confidence":0.254,"loudness_start":-16.579,"loudness_max_time":0.05590,"loudness_max":-13.145,"pitches":[1.000,0.189,0.045,0.099,0.067,0.245,0.117,0.155,0.306,0.117,0.116,0.077],"timbre":[45.242,-141.364,-0.144,-13.185,48.957,-32.803,-14.520,-5.268,21.735,4.509,-14.073,-18.395]},{"start":89.41356,"duration":0.15088,"confidence":0.119,"loudness_start":-17.522,"loudness_max_time":0.03426,"loudness_max":-14.539,"pitches":[1.000,0.100,0.048,0.107,0.053,0.203,0.062,0.153,0.538,0.115,0.138,0.073],"timbre":[44.274,-149.718,5.248,-20.068,50.328,-40.315,-12.377,1.640,25.705,6.705,-8.694,-23.222]},{"start":89.56444,"duration":0.13324,"confidence":0.480,"loudness_start":-17.379,"loudness_max_time":0.02675,"loudness_max":-10.915,"pitches":[1.000,0.090,0.165,0.086,0.057,0.072,0.076,0.320,0.370,0.071,0.057,0.073],"timbre":[44.768,-150.579,-8.985,10.374,59.533,-25.257,-11.442,-12.178,22.454,-3.223,-3.665,-32.180]},{"start":89.69769,"duration":0.13524,"confidence":0.091,"loudness_start":-18.764,"loudness_max_time":0.04642,"loudness_max":-15.351,"pitches":[1.000,0.084,0.042,0.177,0.077,0.179,0.093,0.165,0.890,0.092,0.051,0.075],"timbre":[42.183,-185.532,-21.615,-2.933,68.212,-40.741,-12.847,3.336,12.733,-2.157,-15.465,-23.631]},{"start":89.83293,"duration":0.14630,"confidence":0.500,"loudness_start":-20.685,"loudness_max_time":0.04202,"loudness_max":-14.920,"pitches":[0.106,0.072,0.217,0.293,0.083,0.060,0.062,0.158,1.000,0.056,0.023,0.023],"timbre":[40.767,-181.304,-45.644,-2.625,46.544,-12.020,-26.407,-13.893,6.540,-19.104,-30.108,-10.255]},{"start":89.97923,"duration":0.12472,"confidence":0.809,"loudness_start":-23.877,"loudness_max_time":0.04153,"loudness_max":-13.365,"pitches":[0.166,0.046,0.088,1.000,0.217,0.382,0.107,0.082,0.805,0.130,0.139,0.064],"timbre":[40.746,-162.431,-60.368,-17.995,39.654,27.804,-21.890,-11.058,-6.270,-24.662,-27.081,-4.292]},{"start":90.10395,"duration":0.47111,"confidence":1.000,"loudness_start":-23.987,"loudness_max_time":0.06567,"loudness_max":-4.063,"pitches":[0.302,0.056,0.069,0.433,0.122,1.000,0.242,0.092,0.112,0.043,0.096,0.083],"timbre":[46.612,-90.681,41.335,-102.889,35.022,47.449,21.083,7.337,8.780,-29.741,8.719,8.831]},{"start":90.57506,"duration":0.37129,"confidence":0.296,"loudness_start":-13.800,"loudness_max_time":0.02484,"loudness_max":-7.311,"pitches":[0.271,0.303,1.000,0.084,0.039,0.274,0.060,0.153,0.030,0.048,0.029,0.040],"timbre":[48.427,-98.894,28.004,27.263,39.154,-46.332,10.455,-13.639,25.250,-5.465,8.061,-14.171]},{"start":90.94635,"duration":0.17333,"confidence":0.057,"loudness_start":-17.056,"loudness_max_time":0.06112,"loudness_max":-13.625,"pitches":[0.525,1.000,0.134,0.045,0.077,0.597,0.105,0.039,0.054,0.039,0.067,0.073],"timbre":[42.655,-162.372,-13.285,-3.687,49.037,-29.296,-21.578,6.395,-1.766,-6.268,-26.519,6.946]},{"start":91.11968,"duration":0.14145,"confidence":0.422,"loudness_start":-21.404,"loudness_max_time":0.02877,"loudness_max":-15.569,"pitches":[0.324,0.791,0.254,0.083,0.090,1.000,0.250,0.042,0.095,0.160,0.204,0.048],"timbre":[39.530,-178.239,-44.152,13.506,58.858,-30.708,-28.963,0.273,-17.371,-22.836,11.026,-3.321]},{"start":91.26113,"duration":0.13265,"confidence":0.888,"loudness_start":-24.965,"loudness_max_time":0.03313,"loudness_max":-13.677,"pitches":[0.445,0.690,0.354,0.095,0.161,1.000,0.259,0.306,0.129,0.127,0.085,0.081],"timbre":[42.771,-113.755,-24.184,7.373,39.547,-1.961,-50.594,-24.669,-6.925,-2.101,20.771,-1.232]},{"start":91.39379,"duration":0.12676,"confidence":0.562,"loudness_start":-21.590,"loudness_max_time":0.04103,"loudness_max":-13.731,"pitches":[0.895,1.000,0.184,0.120,0.324,0.690,0.412,0.341,0.360,0.233,0.391,0.258],"timbre":[41.614,-189.950,-19.533,10.221,45.405,-0.132,2.370,-4.915,-10.139,4.941,-7.186,8.347]},{"start":91.52054,"duration":0.16444,"confidence":0.617,"loudness_start":-22.207,"loudness_max_time":0.05001,"loudness_max":-14.332,"pitches":[0.211,0.046,0.126,0.077,0.149,1.000,0.258,0.162,0.093,0.066,0.082,0.062],"timbre":[40.677,-165.619,-51.529,-4.699,43.872,-12.220,-17.591,-19.778,2.486,-17.259,-22.402,10.369]},{"start":91.68499,"duration":0.11968,"confidence":0.784,"loudness_start":-23.641,"loudness_max_time":0.03049,"loudness_max":-14.253,"pitches":[0.195,0.094,0.073,0.043,0.163,1.000,0.274,0.071,0.087,0.053,0.102,0.075],"timbre":[41.046,-172.967,-65.041,11.047,39.615,-2.644,-25.040,-19.325,-5.738,-20.609,-2.001,-8.455]},{"start":91.80467,"duration":0.14127,"confidence":0.850,"loudness_start":-23.645,"loudness_max_time":0.05012,"loudness_max":-11.885,"pitches":[0.281,0.114,0.168,0.120,0.280,1.000,0.497,0.215,0.097,0.087,0.058,0.161],"timbre":[41.128,-152.022,-55.807,-36.742,45.969,30.653,-18.958,-1.070,-4.445,-27.864,-38.075,-8.907]},{"start":91.94594,"duration":0.13234,"confidence":0.695,"loudness_start":-23.916,"loudness_max_time":0.05098,"loudness_max":-14.689,"pitches":[0.525,0.222,0.158,0.195,0.504,1.000,0.572,0.135,0.224,0.123,0.211,0.215],"timbre":[39.980,-172.592,-52.738,-14.013,31.661,15.613,-21.988,-6.619,-4.743,-21.691,-23.487,-7.645]},{"start":92.07828,"duration":0.19102,"confidence":0.755,"loudness_start":-25.368,"loudness_max_time":0.06291,"loudness_max":-14.905,"pitches":[0.023,0.012,0.045,0.036,0.172,1.000,0.297,0.065,0.066,0.014,0.008,0.011],"timbre":[39.896,-197.585,-40.515,-65.982,45.502,-11.564,-25.675,-8.936,0.830,-5.703,-19.727,0.143]},{"start":92.26930,"duration":0.11696,"confidence":0.403,"loudness_start":-21.502,"loudness_max_time":0.02761,"loudness_max":-15.813,"pitches":[0.205,0.038,0.025,0.045,0.078,0.305,0.102,1.000,0.129,0.050,0.044,0.065],"timbre":[41.109,-194.805,-42.700,-6.786,51.453,-54.285,-26.618,-21.591,-9.357,8.364,7.086,-8.983]},{"start":92.38626,"duration":0.13424,"confidence":0.695,"loudness_start":-21.390,"loudness_max_time":0.02865,"loudness_max":-13.403,"pitches":[0.216,0.081,0.216,0.085,0.044,0.336,0.098,1.000,0.385,0.100,0.084,0.113],"timbre":[42.225,-152.045,-53.546,20.556,44.026,-29.932,-43.871,-25.193,3.298,-2.484,4.386,-14.396]},{"start":92.52050,"duration":0.24721,"confidence":0.918,"loudness_start":-22.443,"loudness_max_time":0.04739,"loudness_max":-9.697,"pitches":[0.325,0.077,0.088,0.160,0.226,1.000,0.385,0.843,0.507,0.126,0.151,0.123],"timbre":[42.498,-107.884,-26.723,-26.450,25.398,45.748,-14.261,15.350,5.331,-40.818,-25.481,-7.701]},{"start":92.76771,"duration":0.45946,"confidence":1.000,"loudness_start":-25.341,"loudness_max_time":0.09650,"loudness_max":-7.610,"pitches":[0.125,0.191,1.000,0.192,0.114,0.367,0.087,0.351,0.112,0.080,0.061,0.057],"timbre":[40.995,-154.565,6.757,-126.369,55.836,-2.058,18.103,3.090,11.818,-3.697,-24.555,-4.483]},{"start":93.22717,"duration":0.15873,"confidence":0.385,"loudness_start":-20.791,"loudness_max_time":0.02198,"loudness_max":-15.420,"pitches":[0.314,1.000,0.140,0.037,0.086,0.755,0.200,0.105,0.158,0.049,0.042,0.052],"timbre":[41.070,-163.221,-47.829,4.691,48.131,-18.140,-33.209,-25.667,9.992,-23.777,-0.312,1.000]},{"start":93.38590,"duration":0.12794,"confidence":0.742,"loudness_start":-23.042,"loudness_max_time":0.04643,"loudness_max":-14.825,"pitches":[0.233,0.454,0.129,0.070,0.111,1.000,0.180,0.036,0.064,0.109,0.140,0.026],"timbre":[41.349,-184.918,-38.855,-29.963,66.697,11.716,-28.910,-18.800,-5.623,-30.187,-6.096,1.100]},{"start":93.51383,"duration":0.15596,"confidence":0.683,"loudness_start":-21.024,"loudness_max_time":0.04370,"loudness_max":-13.345,"pitches":[0.890,0.859,0.332,0.122,0.181,1.000,0.207,0.337,0.146,0.147,0.090,0.239],"timbre":[42.807,-134.976,-32.078,-9.010,44.022,10.755,-49.683,-17.185,1.778,-23.572,9.072,-5.648]},{"start":93.66980,"duration":0.13252,"confidence":0.617,"loudness_start":-21.934,"loudness_max_time":0.02910,"loudness_max":-12.088,"pitches":[0.682,0.502,0.115,0.103,0.175,1.000,0.278,0.229,0.243,0.185,0.347,0.181],"timbre":[41.757,-191.726,-35.194,31.598,52.104,-10.923,-2.266,-10.751,-0.196,-4.120,20.244,5.285]},{"start":93.80231,"duration":0.11034,"confidence":0.522,"loudness_start":-22.140,"loudness_max_time":0.03218,"loudness_max":-15.751,"pitches":[0.244,0.191,0.276,0.144,0.433,1.000,0.546,0.205,0.241,0.165,0.148,0.077],"timbre":[39.665,-197.668,-63.753,-1.899,50.856,-22.812,-29.458,-18.111,11.054,-15.313,-7.232,3.842]},{"start":93.91265,"duration":0.14077,"confidence":0.777,"loudness_start":-24.620,"loudness_max_time":0.06059,"loudness_max":-14.144,"pitches":[0.737,0.208,0.088,0.048,0.361,1.000,0.462,0.106,0.143,0.077,0.039,0.239],"timbre":[40.112,-195.297,-49.238,-56.796,57.198,10.048,-15.449,5.788,-9.817,-22.735,-21.052,-2.023]},{"start":94.05342,"duration":0.17279,"confidence":0.827,"loudness_start":-23.905,"loudness_max_time":0.06537,"loudness_max":-11.656,"pitches":[0.130,0.110,0.166,0.102,0.196,1.000,0.327,0.215,0.083,0.076,0.032,0.088],"timbre":[41.092,-173.820,-56.455,-54.466,60.390,12.578,-22.561,5.040,4.127,-26.320,-14.624,-3.682]},{"start":94.22621,"duration":0.11624,"confidence":0.637,"loudness_start":-22.250,"loudness_max_time":0.03702,"loudness_max":-13.912,"pitches":[0.265,0.167,0.253,0.228,0.456,1.000,0.621,0.214,0.215,0.116,0.232,0.169],"timbre":[40.596,-168.331,-62.725,24.315,26.477,-11.651,-33.904,-11.535,-0.424,-27.169,-17.600,-10.563]},{"start":94.34245,"duration":0.14018,"confidence":0.858,"loudness_start":-26.343,"loudness_max_time":0.06417,"loudness_max":-14.181,"pitches":[0.100,0.095,0.053,0.035,0.059,1.000,0.110,0.094,0.141,0.062,0.039,0.059],"timbre":[40.058,-182.796,-49.413,-66.559,53.183,17.958,-21.626,-2.746,10.082,-21.687,-23.659,-1.438]},{"start":94.48263,"duration":0.12662,"confidence":0.637,"loudness_start":-22.563,"loudness_max_time":0.06016,"loudness_max":-15.544,"pitches":[0.254,0.100,0.088,0.092,0.121,1.000,0.500,0.489,0.260,0.176,0.195,0.113],"timbre":[40.923,-197.244,-30.165,-68.593,55.782,-5.811,-17.705,-1.030,-4.931,-35.934,-20.379,-11.923]},{"start":94.60925,"duration":0.20381,"confidence":0.602,"loudness_start":-20.847,"loudness_max_time":0.07216,"loudness_max":-14.185,"pitches":[0.147,0.039,0.102,0.087,0.260,1.000,0.460,0.638,0.191,0.048,0.039,0.048],"timbre":[40.596,-179.798,-40.422,-44.481,58.486,-18.709,-29.857,19.738,2.291,-23.199,-23.302,-10.493]},{"start":94.81306,"duration":0.27746,"confidence":0.897,"loudness_start":-23.411,"loudness_max_time":0.01895,"loudness_max":-10.213,"pitches":[0.350,0.082,0.161,0.265,0.207,0.972,0.297,1.000,0.407,0.285,0.110,0.124],"timbre":[43.381,-80.140,-44.717,56.196,1.186,-1.801,-15.081,-32.511,-10.871,-2.431,-1.447,0.250]},{"start":95.09052,"duration":0.40735,"confidence":1.000,"loudness_start":-24.437,"loudness_max_time":0.03057,"loudness_max":-6.621,"pitches":[0.188,0.203,1.000,0.146,0.065,0.339,0.077,0.296,0.097,0.079,0.045,0.046],"timbre":[47.522,-121.716,11.414,29.306,43.641,27.007,27.680,-2.916,17.276,-2.799,13.609,-11.272]},{"start":95.49787,"duration":0.12676,"confidence":0.180,"loudness_start":-20.603,"loudness_max_time":0.03668,"loudness_max":-15.404,"pitches":[0.419,1.000,0.152,0.078,0.170,0.647,0.363,0.157,0.151,0.059,0.056,0.067],"timbre":[40.651,-189.620,-42.138,2.173,48.217,-39.979,-34.592,-0.955,-0.020,-21.085,-8.278,-0.891]},{"start":95.62463,"duration":0.15859,"confidence":0.628,"loudness_start":-23.312,"loudness_max_time":0.03819,"loudness_max":-16.269,"pitches":[0.597,1.000,0.277,0.073,0.177,0.840,0.500,0.065,0.117,0.157,0.106,0.129],"timbre":[39.899,-175.353,-39.250,-34.445,59.662,-3.602,-40.001,22.560,-4.066,-16.699,-5.307,-3.896]},{"start":95.78322,"duration":0.15596,"confidence":0.884,"loudness_start":-23.794,"loudness_max_time":0.04111,"loudness_max":-11.733,"pitches":[0.285,0.699,0.285,0.048,0.086,1.000,0.322,0.135,0.057,0.110,0.051,0.071],"timbre":[43.393,-118.522,-35.797,15.649,45.299,6.747,-54.941,-23.929,4.917,-26.989,12.932,-5.398]},{"start":95.93918,"duration":0.10395,"confidence":0.687,"loudness_start":-21.438,"loudness_max_time":0.02982,"loudness_max":-12.889,"pitches":[0.520,0.571,0.116,0.099,0.255,1.000,0.547,0.216,0.266,0.207,0.312,0.205],"timbre":[42.201,-189.307,-42.222,31.302,40.896,-12.444,-11.991,-8.490,-3.043,-17.036,6.308,15.737]},{"start":96.04313,"duration":0.13955,"confidence":0.598,"loudness_start":-23.286,"loudness_max_time":0.06128,"loudness_max":-15.274,"pitches":[0.260,0.185,0.111,0.067,0.232,1.000,0.344,0.095,0.062,0.050,0.113,0.114],"timbre":[40.307,-180.049,-48.790,-46.028,51.321,-6.373,-25.076,-4.147,12.037,-32.106,-18.090,2.890]},{"start":96.18268,"duration":0.13914,"confidence":0.678,"loudness_start":-23.281,"loudness_max_time":0.05997,"loudness_max":-14.642,"pitches":[0.209,0.177,0.079,0.091,0.334,1.000,0.393,0.097,0.118,0.083,0.128,0.072],"timbre":[40.027,-193.333,-50.943,-65.888,57.982,-4.959,-23.944,15.400,-3.773,-28.161,-29.534,-6.626]},{"start":96.32181,"duration":0.15764,"confidence":0.765,"loudness_start":-23.502,"loudness_max_time":0.06118,"loudness_max":-13.090,"pitches":[0.211,0.130,0.264,0.169,0.317,1.000,0.612,0.350,0.210,0.094,0.057,0.122],"timbre":[40.249,-175.066,-45.152,-68.875,50.462,0.727,-19.370,10.594,-15.688,-17.686,-35.407,-12.757]},{"start":96.47946,"duration":0.12726,"confidence":0.603,"loudness_start":-22.751,"loudness_max_time":0.04141,"loudness_max":-14.741,"pitches":[0.480,0.242,0.171,0.160,0.340,1.000,0.749,0.139,0.209,0.137,0.072,0.183],"timbre":[40.352,-187.430,-58.704,9.531,38.363,-9.208,-27.347,-8.175,-9.328,-12.115,-25.930,-2.776]},{"start":96.60671,"duration":0.18626,"confidence":0.869,"loudness_start":-25.732,"loudness_max_time":0.06057,"loudness_max":-13.006,"pitches":[0.054,0.013,0.040,0.024,0.183,1.000,0.314,0.065,0.074,0.017,0.005,0.013],"timbre":[40.436,-186.731,-59.913,-36.734,56.250,13.493,-22.370,-17.717,7.258,-21.736,-8.952,-2.336]},{"start":96.79297,"duration":0.11079,"confidence":0.700,"loudness_start":-22.199,"loudness_max_time":0.03025,"loudness_max":-14.589,"pitches":[0.124,0.028,0.025,0.057,0.121,0.393,0.144,1.000,0.178,0.085,0.117,0.069],"timbre":[41.525,-182.613,-46.670,11.473,43.875,-46.387,-26.135,-32.644,-18.896,8.037,2.294,-12.357]},{"start":96.90376,"duration":0.15528,"confidence":0.708,"loudness_start":-21.610,"loudness_max_time":0.04583,"loudness_max":-13.080,"pitches":[0.148,0.085,0.071,0.035,0.029,0.343,0.128,1.000,0.441,0.096,0.083,0.075],"timbre":[41.751,-165.564,-55.616,3.401,52.538,2.554,-36.163,-11.896,11.622,-29.449,-6.059,-18.457]},{"start":97.05905,"duration":0.30245,"confidence":0.935,"loudness_start":-23.315,"loudness_max_time":0.03899,"loudness_max":-10.022,"pitches":[0.147,0.090,0.085,0.185,0.163,0.899,0.227,1.000,0.309,0.128,0.114,0.106],"timbre":[42.078,-91.765,-51.205,24.568,8.250,49.261,-8.676,-7.063,-1.903,-33.894,-12.959,-4.968]},{"start":97.36150,"duration":0.40571,"confidence":1.000,"loudness_start":-25.021,"loudness_max_time":0.03418,"loudness_max":-7.290,"pitches":[0.181,0.179,1.000,0.164,0.077,0.424,0.068,0.249,0.104,0.052,0.033,0.049],"timbre":[47.437,-121.391,7.719,36.485,38.441,12.820,19.953,4.511,19.333,-8.700,12.448,-14.876]},{"start":97.76721,"duration":0.13302,"confidence":0.377,"loudness_start":-21.816,"loudness_max_time":0.04500,"loudness_max":-16.084,"pitches":[0.574,1.000,0.126,0.079,0.104,0.715,0.173,0.128,0.122,0.039,0.060,0.072],"timbre":[40.696,-155.954,-51.032,-3.414,35.327,-30.703,-40.503,-28.905,-3.820,-17.580,-10.378,-9.932]},{"start":97.90023,"duration":0.14494,"confidence":0.678,"loudness_start":-23.051,"loudness_max_time":0.04299,"loudness_max":-14.838,"pitches":[0.462,0.728,0.231,0.073,0.124,1.000,0.281,0.052,0.092,0.117,0.144,0.107],"timbre":[40.251,-168.868,-57.410,-8.620,65.964,-3.139,-39.328,-3.647,-2.250,-24.457,-11.277,-1.143]},{"start":98.04517,"duration":0.15819,"confidence":0.840,"loudness_start":-24.667,"loudness_max_time":0.04003,"loudness_max":-13.633,"pitches":[0.312,0.771,0.324,0.051,0.111,1.000,0.212,0.288,0.106,0.133,0.060,0.073],"timbre":[42.189,-118.838,-28.370,0.252,45.139,11.244,-49.361,-25.724,-9.218,-3.853,10.846,-7.456]},{"start":98.20336,"duration":0.13265,"confidence":0.580,"loudness_start":-21.896,"loudness_max_time":0.02842,"loudness_max":-14.819,"pitches":[0.367,0.297,0.059,0.078,0.188,1.000,0.217,0.133,0.194,0.138,0.267,0.136],"timbre":[42.104,-168.638,-26.295,14.431,32.711,-33.711,-10.002,0.539,0.765,-13.865,-8.933,17.766]},{"start":98.33601,"duration":0.10998,"confidence":0.543,"loudness_start":-22.056,"loudness_max_time":0.03680,"loudness_max":-15.691,"pitches":[0.157,0.118,0.074,0.039,0.237,1.000,0.492,0.159,0.159,0.098,0.085,0.087],"timbre":[41.192,-152.097,-65.128,3.067,32.824,-38.444,-40.048,-28.544,4.547,-12.773,-22.873,2.797]},{"start":98.44599,"duration":0.17361,"confidence":0.808,"loudness_start":-23.807,"loudness_max_time":0.07698,"loudness_max":-13.674,"pitches":[0.118,0.071,0.026,0.044,0.169,1.000,0.169,0.042,0.066,0.051,0.073,0.031],"timbre":[40.066,-207.717,-42.620,-78.756,63.227,-3.278,-19.091,17.537,-10.128,-14.201,-23.139,-5.557]},{"start":98.61959,"duration":0.11002,"confidence":0.732,"loudness_start":-21.890,"loudness_max_time":0.03230,"loudness_max":-11.915,"pitches":[0.292,0.285,0.240,0.207,0.289,1.000,0.394,0.400,0.219,0.110,0.095,0.196],"timbre":[42.481,-139.769,-64.248,10.884,39.593,-9.664,-30.106,-22.280,-8.686,-18.212,-11.355,-12.216]},{"start":98.72961,"duration":0.14236,"confidence":0.618,"loudness_start":-22.567,"loudness_max_time":0.06136,"loudness_max":-15.220,"pitches":[0.243,0.143,0.121,0.085,0.139,1.000,0.447,0.060,0.132,0.074,0.118,0.099],"timbre":[40.360,-181.658,-48.574,-42.386,45.278,4.776,-25.117,-16.989,0.882,-20.026,-33.172,-9.601]},{"start":98.87197,"duration":0.13637,"confidence":0.778,"loudness_start":-24.638,"loudness_max_time":0.05937,"loudness_max":-14.181,"pitches":[0.167,0.061,0.133,0.103,0.097,1.000,0.166,0.133,0.167,0.033,0.014,0.050],"timbre":[39.590,-195.792,-40.889,-79.842,47.700,7.560,-21.928,-3.661,4.307,-18.517,-28.547,-3.101]},{"start":99.00834,"duration":0.15701,"confidence":0.553,"loudness_start":-21.475,"loudness_max_time":0.05664,"loudness_max":-14.911,"pitches":[0.322,0.099,0.076,0.107,0.241,1.000,0.207,0.617,0.173,0.086,0.065,0.084],"timbre":[40.923,-208.001,-39.831,-49.097,62.346,-16.370,-18.490,6.811,-8.984,-34.937,-15.902,-4.714]},{"start":99.16535,"duration":0.16385,"confidence":0.877,"loudness_start":-21.784,"loudness_max_time":0.05434,"loudness_max":-10.038,"pitches":[0.991,0.564,0.887,0.356,0.400,0.733,0.579,1.000,0.709,0.719,0.954,0.981],"timbre":[45.655,-98.590,6.930,-42.829,5.743,13.288,-12.029,10.887,-1.282,-28.893,8.482,-3.042]},{"start":99.32921,"duration":0.72177,"confidence":0.307,"loudness_start":-15.801,"loudness_max_time":0.03034,"loudness_max":-10.237,"pitches":[0.149,0.029,0.078,0.413,0.085,1.000,0.107,0.127,0.894,0.037,0.032,0.031],"timbre":[42.847,-58.032,1.416,88.979,-9.853,-17.603,-5.406,-15.791,2.318,-32.027,-27.423,-8.051]},{"start":100.05098,"duration":0.09215,"confidence":0.730,"loudness_start":-32.196,"loudness_max_time":0.01664,"loudness_max":-23.182,"pitches":[0.056,0.255,0.280,0.553,0.683,0.729,0.341,0.381,1.000,0.129,0.023,0.063],"timbre":[31.960,-172.418,-66.174,18.402,3.101,-50.320,-37.915,-24.012,-9.764,15.492,0.785,-6.862]},{"start":100.14313,"duration":0.14023,"confidence":0.727,"loudness_start":-32.526,"loudness_max_time":0.06452,"loudness_max":-22.880,"pitches":[0.145,0.058,0.045,0.159,0.063,0.212,0.080,0.236,1.000,0.069,0.008,0.016],"timbre":[32.009,-194.971,-29.910,-69.270,21.943,-2.572,-11.014,9.327,19.316,-15.924,-19.555,-4.821]},{"start":100.28336,"duration":0.43646,"confidence":1.000,"loudness_start":-29.893,"loudness_max_time":0.06769,"loudness_max":-15.138,"pitches":[0.111,0.042,0.063,0.318,0.062,0.192,0.053,0.162,1.000,0.076,0.023,0.035],"timbre":[35.044,-168.261,-9.453,-20.470,38.862,38.158,-7.847,34.281,32.020,-45.190,-58.490,-2.421]},{"start":100.71982,"duration":0.12980,"confidence":0.882,"loudness_start":-34.931,"loudness_max_time":0.05658,"loudness_max":-22.530,"pitches":[0.630,0.148,0.271,1.000,0.383,0.880,0.306,0.179,0.963,0.204,0.069,0.117],"timbre":[31.818,-163.674,-6.931,-28.948,42.412,28.306,-19.308,-6.384,7.683,-12.500,-17.842,6.039]},{"start":100.84961,"duration":0.16240,"confidence":1.000,"loudness_start":-32.637,"loudness_max_time":0.06856,"loudness_max":-15.239,"pitches":[0.055,0.044,0.086,0.056,0.048,0.045,0.100,0.597,1.000,0.077,0.024,0.056],"timbre":[34.820,-140.081,28.019,-62.238,15.959,37.832,25.746,14.077,2.757,-31.591,-44.059,23.148]},{"start":101.01202,"duration":0.12658,"confidence":0.591,"loudness_start":-28.070,"loudness_max_time":0.04376,"loudness_max":-20.035,"pitches":[0.415,0.118,0.092,0.249,0.182,0.658,0.192,0.328,1.000,0.138,0.031,0.068],"timbre":[34.827,-143.446,-25.829,43.152,23.323,-13.907,-20.383,-13.630,4.899,-9.021,-37.689,-0.057]},{"start":101.13859,"duration":0.14063,"confidence":0.852,"loudness_start":-33.653,"loudness_max_time":0.06085,"loudness_max":-20.566,"pitches":[0.166,0.085,0.129,0.351,0.140,0.296,0.246,0.621,1.000,0.249,0.104,0.108],"timbre":[32.813,-115.229,28.831,-9.565,52.815,23.845,-19.938,-6.850,13.208,-17.664,-47.801,-4.537]},{"start":101.27923,"duration":0.14621,"confidence":0.898,"loudness_start":-32.814,"loudness_max_time":0.06091,"loudness_max":-20.011,"pitches":[0.264,0.073,0.079,0.316,0.119,0.353,0.107,0.252,1.000,0.124,0.016,0.072],"timbre":[33.908,-190.756,2.217,-11.580,45.753,24.548,3.767,16.369,16.455,-19.363,-36.695,-8.421]},{"start":101.42544,"duration":0.14000,"confidence":0.946,"loudness_start":-32.259,"loudness_max_time":0.05185,"loudness_max":-17.556,"pitches":[0.065,0.035,0.076,0.116,0.074,0.080,0.127,0.565,1.000,0.080,0.025,0.048],"timbre":[36.276,-114.688,-12.663,-0.612,15.644,47.349,-2.852,-23.194,24.436,-48.134,-24.543,1.704]},{"start":101.56544,"duration":0.45737,"confidence":1.000,"loudness_start":-28.485,"loudness_max_time":0.05899,"loudness_max":-11.322,"pitches":[0.252,0.065,0.056,0.191,0.050,0.196,0.053,0.116,1.000,0.075,0.057,0.054],"timbre":[35.366,-158.455,15.164,5.278,47.993,42.275,-2.314,25.934,29.102,-54.323,-56.332,-7.226]},{"start":102.02281,"duration":0.14540,"confidence":0.749,"loudness_start":-33.666,"loudness_max_time":0.02575,"loudness_max":-24.355,"pitches":[0.169,0.026,0.208,0.426,0.029,0.125,0.065,0.500,1.000,0.126,0.022,0.051],"timbre":[31.927,-163.463,10.053,29.139,36.046,-26.814,-7.023,-24.642,-12.396,5.006,10.598,4.381]},{"start":102.16821,"duration":0.11583,"confidence":0.679,"loudness_start":-30.438,"loudness_max_time":0.02464,"loudness_max":-23.071,"pitches":[0.171,0.022,0.037,0.097,0.016,0.203,0.050,0.301,1.000,0.138,0.012,0.014],"timbre":[31.528,-177.937,-78.305,33.377,17.013,-41.941,-27.625,-10.288,1.105,8.555,-12.860,3.075]},{"start":102.28404,"duration":0.12608,"confidence":0.882,"loudness_start":-34.804,"loudness_max_time":0.04457,"loudness_max":-22.981,"pitches":[0.027,0.005,0.022,0.072,0.020,0.050,0.023,0.307,1.000,0.126,0.014,0.011],"timbre":[31.957,-180.596,-55.998,-47.904,11.186,36.121,-1.935,-12.241,7.013,-30.615,-16.651,-5.484]},{"start":102.41011,"duration":0.16503,"confidence":0.745,"loudness_start":-30.865,"loudness_max_time":0.06108,"loudness_max":-21.490,"pitches":[0.396,0.093,0.126,0.652,0.126,0.510,0.151,0.219,1.000,0.092,0.024,0.033],"timbre":[33.199,-211.922,6.680,-44.616,50.394,-0.201,-0.710,-0.417,15.200,-26.842,-19.814,1.095]},{"start":102.57515,"duration":0.27152,"confidence":1.000,"loudness_start":-28.229,"loudness_max_time":0.04054,"loudness_max":-13.540,"pitches":[0.070,0.029,0.036,0.178,0.043,0.088,0.038,0.188,1.000,0.023,0.009,0.026],"timbre":[39.041,-121.503,-36.882,46.312,15.498,36.089,-11.400,-14.019,19.330,-22.776,16.530,-9.757]},{"start":102.84667,"duration":0.15120,"confidence":0.261,"loudness_start":-33.751,"loudness_max_time":0.05281,"loudness_max":-30.439,"pitches":[0.090,0.025,0.105,0.388,0.066,0.243,0.064,0.330,1.000,0.174,0.027,0.047],"timbre":[28.570,-140.979,-12.831,-43.574,20.259,-24.370,-17.168,-32.827,7.598,-10.314,-19.308,8.792]},{"start":102.99787,"duration":0.11628,"confidence":0.843,"loudness_start":-32.347,"loudness_max_time":0.04322,"loudness_max":-21.288,"pitches":[0.177,0.050,0.074,0.137,0.089,0.279,0.084,0.358,1.000,0.168,0.012,0.021],"timbre":[33.885,-178.423,-31.132,-8.255,12.416,7.784,6.917,-8.023,-0.422,-5.239,-17.284,16.357]},{"start":103.11415,"duration":0.16821,"confidence":0.969,"loudness_start":-30.082,"loudness_max_time":0.06754,"loudness_max":-16.100,"pitches":[0.046,0.043,0.089,0.105,0.048,0.044,0.086,0.521,1.000,0.063,0.022,0.055],"timbre":[35.015,-146.956,7.437,-73.254,13.846,27.222,12.180,17.306,15.211,-42.348,-40.071,13.478]},{"start":103.28236,"duration":0.12118,"confidence":0.440,"loudness_start":-29.089,"loudness_max_time":0.03751,"loudness_max":-21.021,"pitches":[0.584,0.153,0.125,0.243,0.235,1.000,0.273,0.235,0.455,0.070,0.044,0.079],"timbre":[34.159,-134.922,14.238,49.729,48.119,-16.607,-22.596,-32.674,-2.461,3.932,-24.892,-6.049]},{"start":103.40354,"duration":0.18150,"confidence":0.858,"loudness_start":-31.424,"loudness_max_time":0.06023,"loudness_max":-18.938,"pitches":[0.017,0.013,0.026,0.090,0.020,0.057,0.037,0.154,1.000,0.061,0.018,0.014],"timbre":[34.246,-154.647,-5.868,-9.916,27.942,8.090,3.171,-16.750,13.668,-17.299,-39.029,4.107]},{"start":103.58503,"duration":0.10136,"confidence":0.745,"loudness_start":-29.894,"loudness_max_time":0.01947,"loudness_max":-20.164,"pitches":[0.247,0.041,0.045,0.156,0.068,0.376,0.086,0.418,1.000,0.218,0.026,0.030],"timbre":[33.922,-172.680,-37.655,52.900,15.514,-46.023,-11.069,-22.575,-12.686,12.928,-4.532,3.292]},{"start":103.68639,"duration":0.16585,"confidence":0.941,"loudness_start":-32.285,"loudness_max_time":0.05715,"loudness_max":-17.770,"pitches":[0.090,0.047,0.140,0.320,0.112,0.121,0.187,1.000,0.992,0.152,0.043,0.075],"timbre":[35.073,-106.755,-3.757,19.401,19.118,50.316,2.915,-25.954,16.616,-46.797,-34.509,10.782]},{"start":103.85224,"duration":0.27660,"confidence":1.000,"loudness_start":-31.348,"loudness_max_time":0.03611,"loudness_max":-10.226,"pitches":[0.122,0.049,0.047,0.079,0.041,0.098,0.037,0.076,1.000,0.060,0.043,0.049],"timbre":[39.850,-102.645,-24.294,36.572,12.284,91.186,16.131,-18.909,19.046,-49.881,-16.772,-2.090]},{"start":104.12884,"duration":0.17029,"confidence":0.297,"loudness_start":-28.244,"loudness_max_time":0.04194,"loudness_max":-24.856,"pitches":[0.173,0.009,0.059,0.463,0.013,0.116,0.026,0.193,1.000,0.082,0.006,0.022],"timbre":[33.311,-231.212,13.263,-17.557,53.770,-24.010,9.972,-10.013,3.549,-14.788,-7.254,3.175]},{"start":104.29914,"duration":0.10154,"confidence":0.380,"loudness_start":-28.400,"loudness_max_time":0.00710,"loudness_max":-23.326,"pitches":[0.034,0.006,0.059,0.128,0.010,0.036,0.025,0.457,1.000,0.190,0.009,0.013],"timbre":[33.005,-210.722,-45.808,15.238,15.516,-64.339,-13.266,-25.873,-11.150,10.030,-16.395,-1.747]},{"start":104.40068,"duration":0.17537,"confidence":0.624,"loudness_start":-31.165,"loudness_max_time":0.05506,"loudness_max":-23.716,"pitches":[0.161,0.028,0.025,0.126,0.023,0.231,0.049,0.178,1.000,0.082,0.014,0.011],"timbre":[30.557,-171.328,-66.177,-5.142,20.610,2.611,-23.559,-0.082,20.722,-28.631,-34.386,-4.182]},{"start":104.57605,"duration":0.10694,"confidence":0.911,"loudness_start":-35.833,"loudness_max_time":0.01935,"loudness_max":-23.552,"pitches":[0.039,0.006,0.072,0.168,0.028,0.055,0.024,0.326,1.000,0.136,0.011,0.014],"timbre":[31.749,-163.175,-30.996,34.784,29.133,-38.869,-24.525,-26.087,-18.046,18.865,4.746,2.516]},{"start":104.68299,"duration":0.17392,"confidence":0.787,"loudness_start":-32.627,"loudness_max_time":0.05472,"loudness_max":-22.191,"pitches":[0.149,0.029,0.035,0.119,0.035,0.208,0.050,0.096,1.000,0.059,0.005,0.009],"timbre":[32.510,-195.369,-28.711,-20.003,19.429,3.684,8.736,6.124,8.487,-19.140,-27.211,12.623]},{"start":104.85692,"duration":0.29506,"confidence":1.000,"loudness_start":-31.712,"loudness_max_time":0.02442,"loudness_max":-14.563,"pitches":[0.425,0.152,0.133,0.641,0.235,0.621,0.193,0.559,1.000,0.061,0.029,0.078],"timbre":[39.057,-84.158,-11.571,74.725,16.586,-22.015,-28.537,-38.162,-5.775,26.345,-24.924,-0.128]},{"start":105.15197,"duration":0.11125,"confidence":0.274,"loudness_start":-31.717,"loudness_max_time":0.02946,"loudness_max":-27.203,"pitches":[0.068,0.008,0.040,0.325,0.024,0.098,0.021,0.271,1.000,0.159,0.006,0.013],"timbre":[31.050,-198.406,-18.440,-5.346,44.242,-45.548,4.518,-23.621,8.007,26.382,-11.003,-6.527]},{"start":105.26322,"duration":0.16014,"confidence":0.694,"loudness_start":-31.339,"loudness_max_time":0.03992,"loudness_max":-22.334,"pitches":[0.157,0.037,0.033,0.235,0.063,0.320,0.069,0.192,1.000,0.071,0.010,0.025],"timbre":[33.141,-175.454,-10.767,3.133,27.555,-12.709,-2.910,-9.348,7.854,-6.902,-2.274,-2.099]},{"start":105.42336,"duration":0.12417,"confidence":0.985,"loudness_start":-30.327,"loudness_max_time":0.02087,"loudness_max":-15.921,"pitches":[0.079,0.024,0.131,0.481,0.031,0.063,0.101,1.000,0.809,0.128,0.017,0.083],"timbre":[38.077,-122.328,4.091,65.524,34.295,-9.170,-19.903,-41.147,-6.862,31.044,12.132,-4.811]},{"start":105.54753,"duration":0.12023,"confidence":0.442,"loudness_start":-28.099,"loudness_max_time":0.03757,"loudness_max":-20.492,"pitches":[0.355,0.087,0.070,0.334,0.141,0.597,0.173,0.261,1.000,0.210,0.023,0.050],"timbre":[34.587,-148.136,-27.539,36.903,20.035,-11.157,-25.650,-27.958,-2.518,9.088,-32.558,-12.122]},{"start":105.66776,"duration":0.15048,"confidence":0.881,"loudness_start":-32.508,"loudness_max_time":0.06000,"loudness_max":-18.903,"pitches":[0.029,0.022,0.048,0.100,0.042,0.092,0.072,0.317,1.000,0.101,0.032,0.024],"timbre":[34.061,-140.156,-6.631,-28.970,20.970,20.619,-1.481,-17.780,10.550,-16.723,-40.156,2.769]},{"start":105.81823,"duration":0.13224,"confidence":0.778,"loudness_start":-30.156,"loudness_max_time":0.05014,"loudness_max":-20.024,"pitches":[0.519,0.161,0.203,0.515,0.240,0.787,0.231,0.439,1.000,0.211,0.035,0.098],"timbre":[33.579,-160.882,7.118,8.931,36.590,26.922,5.934,-3.676,3.527,-22.473,-39.831,14.557]},{"start":105.95048,"duration":0.16336,"confidence":0.978,"loudness_start":-32.037,"loudness_max_time":0.05524,"loudness_max":-16.571,"pitches":[0.030,0.022,0.050,0.132,0.042,0.046,0.070,0.279,1.000,0.093,0.015,0.031],"timbre":[35.700,-119.915,-44.460,8.510,0.062,53.131,-9.336,-21.447,18.486,-40.182,-33.718,11.464]},{"start":106.11383,"duration":0.31660,"confidence":1.000,"loudness_start":-30.695,"loudness_max_time":0.03920,"loudness_max":-11.116,"pitches":[0.387,0.110,0.111,0.405,0.090,0.260,0.082,0.172,1.000,0.132,0.096,0.105],"timbre":[38.746,-106.229,-8.116,42.384,23.688,90.722,18.387,-29.020,18.867,-53.156,-18.303,-6.200]},{"start":106.43043,"duration":0.09655,"confidence":0.239,"loudness_start":-28.585,"loudness_max_time":0.00967,"loudness_max":-24.103,"pitches":[0.116,0.010,0.040,0.211,0.018,0.086,0.027,0.297,1.000,0.210,0.014,0.024],"timbre":[32.214,-231.199,-39.920,8.247,33.404,-73.931,-9.169,-0.134,-0.600,8.214,-7.071,-0.156]},{"start":106.52698,"duration":0.13932,"confidence":0.788,"loudness_start":-31.209,"loudness_max_time":0.04649,"loudness_max":-21.979,"pitches":[0.060,0.010,0.081,0.189,0.017,0.049,0.018,0.336,1.000,0.136,0.015,0.026],"timbre":[33.045,-211.939,-37.489,-12.969,28.698,20.817,1.703,9.206,6.245,-29.049,-23.831,-4.640]},{"start":106.66630,"duration":0.13855,"confidence":0.669,"loudness_start":-33.188,"loudness_max_time":0.05528,"loudness_max":-24.606,"pitches":[0.359,0.072,0.097,0.288,0.064,0.486,0.129,0.339,1.000,0.121,0.024,0.036],"timbre":[30.768,-167.696,-33.795,-18.016,40.240,12.168,-31.658,-9.583,13.146,-22.155,-33.468,-1.429]},{"start":106.80485,"duration":0.13973,"confidence":0.850,"loudness_start":-34.402,"loudness_max_time":0.05390,"loudness_max":-22.760,"pitches":[0.025,0.008,0.027,0.085,0.037,0.090,0.037,0.185,1.000,0.135,0.024,0.016],"timbre":[30.627,-165.368,-35.522,-41.478,16.632,32.960,-0.408,8.969,1.961,-37.816,-35.761,6.110]},{"start":106.94458,"duration":0.17546,"confidence":0.835,"loudness_start":-34.640,"loudness_max_time":0.05726,"loudness_max":-22.485,"pitches":[0.330,0.082,0.065,0.201,0.087,0.486,0.129,0.182,1.000,0.060,0.020,0.027],"timbre":[32.160,-176.804,13.703,-29.474,35.930,2.797,19.534,2.386,14.014,-18.983,-12.561,2.603]},{"start":107.12005,"duration":0.25692,"confidence":0.997,"loudness_start":-30.110,"loudness_max_time":0.03239,"loudness_max":-15.946,"pitches":[0.134,0.059,0.071,0.236,0.090,0.200,0.079,0.313,1.000,0.038,0.011,0.049],"timbre":[38.977,-75.288,2.052,66.894,24.642,-20.638,-33.867,-32.990,-7.449,34.133,-21.498,-2.475]},{"start":107.37696,"duration":0.14907,"confidence":0.598,"loudness_start":-32.595,"loudness_max_time":0.04007,"loudness_max":-24.982,"pitches":[0.082,0.015,0.056,0.223,0.030,0.114,0.037,0.159,1.000,0.144,0.023,0.030],"timbre":[32.252,-180.029,4.280,-0.968,28.182,-34.339,22.878,8.971,15.029,-11.621,-4.015,11.899]},{"start":107.52603,"duration":0.16218,"confidence":0.714,"loudness_start":-30.726,"loudness_max_time":0.04576,"loudness_max":-22.508,"pitches":[0.140,0.029,0.033,0.131,0.048,0.228,0.043,0.191,1.000,0.088,0.018,0.018],"timbre":[32.893,-168.909,-9.158,3.939,24.188,-6.244,-1.683,-10.574,-3.505,1.236,-13.601,17.163]},{"start":107.68821,"duration":0.12322,"confidence":1.000,"loudness_start":-29.997,"loudness_max_time":0.02203,"loudness_max":-14.804,"pitches":[0.024,0.020,0.098,0.170,0.022,0.046,0.084,0.474,1.000,0.153,0.015,0.051],"timbre":[37.726,-124.310,-33.208,67.681,0.971,-16.711,-22.745,-27.893,-16.071,16.473,19.147,6.216]},{"start":107.81143,"duration":0.11973,"confidence":0.635,"loudness_start":-29.292,"loudness_max_time":0.03855,"loudness_max":-19.912,"pitches":[0.336,0.093,0.100,0.416,0.156,0.559,0.142,0.274,1.000,0.189,0.052,0.052],"timbre":[34.577,-137.026,-26.050,38.613,22.497,-5.472,-29.524,-29.807,-6.257,4.643,-27.230,-6.373]},{"start":107.93116,"duration":0.14558,"confidence":0.882,"loudness_start":-32.071,"loudness_max_time":0.06121,"loudness_max":-19.330,"pitches":[0.077,0.032,0.077,0.294,0.062,0.120,0.105,0.241,1.000,0.119,0.050,0.048],"timbre":[34.557,-141.819,13.148,-30.878,42.539,22.885,-14.589,-21.267,7.430,-18.878,-40.681,2.833]},{"start":108.07673,"duration":0.13537,"confidence":0.713,"loudness_start":-28.605,"loudness_max_time":0.05529,"loudness_max":-19.852,"pitches":[0.136,0.055,0.051,0.187,0.077,0.232,0.073,0.195,1.000,0.114,0.019,0.034],"timbre":[34.677,-190.665,-27.620,-16.195,23.341,15.842,-13.001,10.011,15.509,-36.658,-36.046,-4.643]},{"start":108.21211,"duration":0.15583,"confidence":0.984,"loudness_start":-31.282,"loudness_max_time":0.05920,"loudness_max":-16.469,"pitches":[0.070,0.036,0.140,0.307,0.070,0.085,0.130,0.553,1.000,0.111,0.024,0.050],"timbre":[35.302,-122.592,-8.002,-15.363,26.617,64.986,-15.209,-16.931,22.959,-52.957,-45.801,1.160]},{"start":108.36794,"duration":0.16277,"confidence":1.000,"loudness_start":-32.325,"loudness_max_time":0.05424,"loudness_max":-8.822,"pitches":[1.000,0.255,0.131,0.129,0.185,0.227,0.132,0.154,0.247,0.185,0.171,0.317],"timbre":[40.695,-148.996,47.239,-110.088,76.169,81.920,2.869,13.203,13.544,-6.813,-14.838,-4.528]},{"start":108.53070,"duration":0.15079,"confidence":0.281,"loudness_start":-16.531,"loudness_max_time":0.03005,"loudness_max":-12.331,"pitches":[1.000,0.035,0.021,0.038,0.033,0.170,0.059,0.059,0.039,0.040,0.092,0.070],"timbre":[45.083,-128.859,68.095,10.525,71.648,-27.931,-26.441,-8.755,-4.186,-4.468,2.758,-20.530]},{"start":108.68150,"duration":0.26626,"confidence":0.433,"loudness_start":-16.593,"loudness_max_time":0.03853,"loudness_max":-11.702,"pitches":[1.000,0.062,0.034,0.061,0.119,0.348,0.060,0.059,0.050,0.058,0.069,0.065],"timbre":[45.215,-115.978,34.334,19.075,71.549,-22.760,-24.085,-16.917,-4.006,4.142,-4.122,-20.475]},{"start":108.94776,"duration":0.31995,"confidence":0.406,"loudness_start":-19.343,"loudness_max_time":0.04145,"loudness_max":-14.322,"pitches":[0.885,0.123,0.106,0.316,0.099,0.451,0.093,0.302,1.000,0.107,0.165,0.140],"timbre":[42.040,-171.834,3.002,-1.112,65.372,-28.635,-26.261,-3.648,-1.514,-14.026,-2.810,-15.598]},{"start":109.26771,"duration":0.08014,"confidence":0.105,"loudness_start":-22.384,"loudness_max_time":0.00985,"loudness_max":-18.361,"pitches":[0.399,0.076,0.092,1.000,0.366,0.251,0.062,0.305,0.469,0.084,0.020,0.089],"timbre":[39.959,-183.383,0.018,-16.847,47.027,-49.177,-38.441,-16.983,-8.282,-9.224,4.108,6.098]},{"start":109.34785,"duration":0.34336,"confidence":1.000,"loudness_start":-21.160,"loudness_max_time":0.06717,"loudness_max":-4.686,"pitches":[1.000,0.246,0.215,0.383,0.191,0.404,0.212,0.503,0.366,0.229,0.182,0.350],"timbre":[45.411,-134.974,74.751,-108.360,61.074,15.237,10.244,38.850,8.391,-33.999,-1.528,10.183]},{"start":109.69120,"duration":0.42091,"confidence":0.056,"loudness_start":-14.412,"loudness_max_time":0.01282,"loudness_max":-9.914,"pitches":[1.000,0.078,0.038,0.156,0.078,0.893,0.061,0.248,0.169,0.054,0.034,0.075],"timbre":[45.931,-99.389,35.421,52.669,56.473,-52.039,-19.504,-16.391,16.787,-2.176,-25.313,-1.475]},{"start":110.11211,"duration":0.40844,"confidence":0.271,"loudness_start":-19.649,"loudness_max_time":0.02383,"loudness_max":-16.199,"pitches":[1.000,0.063,0.044,0.064,0.083,0.495,0.061,0.056,0.395,0.069,0.049,0.079],"timbre":[41.309,-171.214,-13.679,-4.272,50.829,-45.206,-30.410,1.584,-1.025,2.581,-10.449,-3.823]},{"start":110.52054,"duration":0.15107,"confidence":0.514,"loudness_start":-22.899,"loudness_max_time":0.03959,"loudness_max":-17.820,"pitches":[0.714,0.034,0.026,0.028,0.044,1.000,0.097,0.020,0.107,0.048,0.017,0.038],"timbre":[40.484,-168.051,7.386,-28.068,75.916,-24.821,-38.516,-2.703,-6.276,-4.607,13.922,-4.147]},{"start":110.67161,"duration":0.25683,"confidence":0.305,"loudness_start":-20.155,"loudness_max_time":0.03181,"loudness_max":-16.705,"pitches":[1.000,0.087,0.047,0.059,0.085,0.412,0.056,0.045,0.079,0.057,0.061,0.050],"timbre":[41.534,-172.770,4.742,-16.072,49.160,-43.885,-25.637,0.984,8.858,-2.016,4.318,-9.627]},{"start":110.92844,"duration":0.15578,"confidence":0.172,"loudness_start":-22.597,"loudness_max_time":0.03153,"loudness_max":-18.463,"pitches":[1.000,0.090,0.080,0.116,0.126,0.419,0.082,0.099,0.536,0.143,0.089,0.134],"timbre":[39.479,-155.698,-15.120,-26.858,60.460,-30.251,-16.949,-10.801,13.264,-1.010,-7.731,-14.227]},{"start":111.08422,"duration":0.42295,"confidence":0.698,"loudness_start":-22.039,"loudness_max_time":0.03066,"loudness_max":-14.362,"pitches":[0.845,0.295,0.287,0.208,0.263,0.631,0.215,0.210,1.000,0.235,0.210,0.345],"timbre":[42.067,-159.354,-0.713,2.221,69.746,-11.028,-25.105,-16.310,-1.033,4.458,4.992,-11.492]},{"start":111.50717,"duration":0.11741,"confidence":0.208,"loudness_start":-21.904,"loudness_max_time":0.04179,"loudness_max":-18.560,"pitches":[0.664,0.087,0.162,1.000,0.195,0.312,0.062,0.436,0.807,0.118,0.056,0.049],"timbre":[39.832,-177.474,-1.105,-26.872,76.058,-27.191,-35.693,-4.496,-13.724,-21.200,4.829,-6.590]},{"start":111.62458,"duration":0.73710,"confidence":1.000,"loudness_start":-21.832,"loudness_max_time":0.05432,"loudness_max":-5.725,"pitches":[1.000,0.180,0.163,0.365,0.151,0.817,0.173,0.811,0.465,0.164,0.149,0.228],"timbre":[45.086,-112.303,48.866,-49.202,71.002,59.283,4.265,20.055,9.851,-39.440,-34.774,11.911]},{"start":112.36168,"duration":0.12263,"confidence":0.284,"loudness_start":-19.920,"loudness_max_time":0.01221,"loudness_max":-17.111,"pitches":[1.000,0.238,0.177,0.059,0.112,0.507,0.113,0.038,0.143,0.069,0.082,0.233],"timbre":[41.175,-172.090,-2.668,-16.649,64.796,-53.916,-28.426,1.339,4.888,8.825,1.185,-12.993]},{"start":112.48431,"duration":0.31102,"confidence":0.091,"loudness_start":-20.551,"loudness_max_time":0.05703,"loudness_max":-18.450,"pitches":[0.991,0.077,0.048,0.091,0.157,1.000,0.145,0.069,0.657,0.089,0.053,0.141],"timbre":[39.735,-179.043,-12.347,-4.368,84.732,-42.514,-32.131,5.976,-0.229,2.568,-13.320,-7.513]},{"start":112.79533,"duration":0.11138,"confidence":0.579,"loudness_start":-23.740,"loudness_max_time":0.03083,"loudness_max":-18.389,"pitches":[0.772,0.091,0.018,0.032,0.129,1.000,0.202,0.032,0.130,0.085,0.027,0.096],"timbre":[40.098,-162.245,-12.985,-27.841,65.296,-34.353,-24.161,-10.783,-16.285,0.666,8.897,-6.574]},{"start":112.90671,"duration":0.15138,"confidence":0.410,"loudness_start":-20.751,"loudness_max_time":0.05603,"loudness_max":-16.589,"pitches":[1.000,0.284,0.202,0.081,0.143,0.333,0.071,0.072,0.130,0.066,0.121,0.361],"timbre":[41.059,-180.699,-6.634,-17.238,66.512,-31.454,-23.233,8.488,9.337,1.932,-3.898,-9.092]},{"start":113.05810,"duration":0.13927,"confidence":0.306,"loudness_start":-22.816,"loudness_max_time":0.11016,"loudness_max":-18.693,"pitches":[1.000,0.047,0.024,0.040,0.038,0.277,0.033,0.036,0.044,0.052,0.104,0.145],"timbre":[40.192,-170.837,9.591,-41.306,84.200,-38.038,-16.314,-12.396,3.041,-1.150,7.253,-15.736]},{"start":113.19737,"duration":0.27878,"confidence":0.407,"loudness_start":-19.123,"loudness_max_time":0.04076,"loudness_max":-14.888,"pitches":[1.000,0.050,0.025,0.050,0.094,0.642,0.076,0.047,0.059,0.059,0.071,0.046],"timbre":[42.667,-157.737,23.899,-12.645,90.460,-25.539,-26.191,2.522,15.374,-6.499,3.695,-16.547]},{"start":113.47615,"duration":0.31887,"confidence":0.467,"loudness_start":-20.579,"loudness_max_time":0.04239,"loudness_max":-14.405,"pitches":[0.914,0.119,0.101,0.257,0.103,0.519,0.078,0.263,1.000,0.096,0.119,0.112],"timbre":[40.964,-172.795,-14.021,-5.346,74.758,-20.427,-26.970,-0.918,1.053,-2.818,-9.298,-10.886]},{"start":113.79501,"duration":0.10472,"confidence":0.419,"loudness_start":-23.505,"loudness_max_time":0.01603,"loudness_max":-19.159,"pitches":[0.591,0.048,0.157,1.000,0.271,0.488,0.068,0.404,0.647,0.107,0.076,0.084],"timbre":[39.705,-189.138,-6.325,-25.411,74.851,-46.050,-37.933,-13.542,-15.644,-2.301,3.354,1.459]},{"start":113.89973,"duration":0.17986,"confidence":1.000,"loudness_start":-21.249,"loudness_max_time":0.04385,"loudness_max":-5.817,"pitches":[1.000,0.038,0.031,0.711,0.085,0.391,0.057,0.363,0.273,0.048,0.053,0.076],"timbre":[47.883,-90.343,78.324,-38.641,66.274,61.104,21.619,7.712,5.601,-46.020,14.423,19.305]},{"start":114.07959,"duration":0.55116,"confidence":0.093,"loudness_start":-11.997,"loudness_max_time":0.03695,"loudness_max":-8.621,"pitches":[1.000,0.102,0.055,0.278,0.089,0.812,0.075,0.557,0.245,0.063,0.059,0.081],"timbre":[47.496,-98.573,26.648,50.960,45.214,-37.823,-14.836,-3.744,2.264,6.326,-31.716,16.883]},{"start":114.63075,"duration":0.41819,"confidence":0.347,"loudness_start":-20.506,"loudness_max_time":0.03288,"loudness_max":-16.182,"pitches":[1.000,0.082,0.056,0.079,0.113,0.946,0.084,0.068,0.477,0.086,0.062,0.116],"timbre":[41.206,-169.142,-25.043,-7.716,49.840,-36.182,-26.096,5.081,1.017,6.521,-4.017,-4.517]},{"start":115.04893,"duration":0.12227,"confidence":0.473,"loudness_start":-22.324,"loudness_max_time":0.04028,"loudness_max":-17.733,"pitches":[0.432,0.035,0.027,0.024,0.058,1.000,0.115,0.032,0.099,0.052,0.019,0.061],"timbre":[40.607,-159.284,-4.676,-36.267,67.401,-20.758,-43.142,-2.026,-11.031,-7.700,15.435,-0.558]},{"start":115.17120,"duration":0.27723,"confidence":0.337,"loudness_start":-20.072,"loudness_max_time":0.06222,"loudness_max":-16.626,"pitches":[1.000,0.109,0.067,0.060,0.075,0.316,0.050,0.049,0.092,0.065,0.061,0.088],"timbre":[41.169,-172.842,1.184,-29.364,64.490,-32.594,-24.477,-0.648,2.518,2.502,-1.836,-9.250]},{"start":115.44844,"duration":0.17361,"confidence":0.257,"loudness_start":-22.313,"loudness_max_time":0.03864,"loudness_max":-17.826,"pitches":[1.000,0.089,0.074,0.101,0.086,0.359,0.116,0.085,0.586,0.126,0.090,0.096],"timbre":[39.594,-161.126,-15.427,-27.600,68.888,-31.826,-12.068,-2.700,13.062,-7.776,-7.588,-19.559]},{"start":115.62204,"duration":0.08848,"confidence":0.677,"loudness_start":-21.940,"loudness_max_time":0.02057,"loudness_max":-14.076,"pitches":[1.000,0.150,0.060,0.071,0.052,0.123,0.017,0.037,0.045,0.046,0.044,0.131],"timbre":[42.480,-139.196,14.163,0.239,73.605,-52.324,-25.864,1.686,-2.673,7.400,10.292,-23.162]},{"start":115.71052,"duration":0.32499,"confidence":0.221,"loudness_start":-19.277,"loudness_max_time":0.07098,"loudness_max":-16.070,"pitches":[0.694,0.148,0.145,0.203,0.121,0.326,0.121,0.192,1.000,0.112,0.084,0.173],"timbre":[40.695,-164.498,6.266,-9.742,77.804,-38.194,-26.959,-23.400,0.008,-0.109,-10.434,-11.402]},{"start":116.03551,"duration":0.12821,"confidence":0.174,"loudness_start":-22.172,"loudness_max_time":0.03209,"loudness_max":-18.475,"pitches":[0.723,0.106,0.139,1.000,0.181,0.407,0.071,0.444,0.994,0.116,0.056,0.154],"timbre":[39.266,-167.210,-8.786,-19.443,74.283,-35.139,-43.116,4.201,-13.906,-26.477,7.269,-5.320]},{"start":116.16372,"duration":0.18014,"confidence":1.000,"loudness_start":-23.076,"loudness_max_time":0.04327,"loudness_max":-5.789,"pitches":[1.000,0.033,0.034,0.338,0.065,0.257,0.057,0.253,0.284,0.042,0.034,0.058],"timbre":[47.483,-75.950,83.853,-37.513,61.328,65.371,36.088,16.061,7.686,-39.069,10.882,14.589]},{"start":116.34385,"duration":0.14000,"confidence":0.275,"loudness_start":-12.154,"loudness_max_time":0.03726,"loudness_max":-8.093,"pitches":[1.000,0.141,0.114,0.245,0.118,0.449,0.124,0.707,0.645,0.119,0.088,0.185],"timbre":[48.870,-72.698,60.332,31.902,14.151,-35.116,38.591,4.911,-15.716,6.091,-1.597,39.285]},{"start":116.48385,"duration":0.52644,"confidence":0.139,"loudness_start":-14.680,"loudness_max_time":0.00721,"loudness_max":-9.973,"pitches":[1.000,0.087,0.061,0.104,0.059,0.843,0.070,0.198,0.237,0.068,0.057,0.087],"timbre":[45.889,-113.735,26.923,48.274,51.567,-59.093,-16.271,-11.071,14.776,-2.097,-24.829,-0.953]},{"start":117.01029,"duration":0.27891,"confidence":0.242,"loudness_start":-20.313,"loudness_max_time":0.04820,"loudness_max":-17.377,"pitches":[1.000,0.064,0.040,0.077,0.144,0.640,0.086,0.057,0.560,0.076,0.045,0.129],"timbre":[40.262,-183.044,-11.963,6.885,91.455,-46.307,-33.130,16.704,-2.967,1.250,-8.526,-8.186]},{"start":117.28921,"duration":0.28571,"confidence":1.000,"loudness_start":-24.600,"loudness_max_time":0.04399,"loudness_max":-9.644,"pitches":[1.000,0.223,0.231,0.142,0.159,0.945,0.160,0.140,0.283,0.194,0.192,0.253],"timbre":[43.320,-129.699,21.873,-42.548,51.848,62.301,-21.315,0.640,-10.997,-28.900,-7.101,-7.498]},{"start":117.57492,"duration":0.14907,"confidence":0.010,"loudness_start":-19.038,"loudness_max_time":0.05959,"loudness_max":-16.277,"pitches":[1.000,0.084,0.358,0.083,0.055,0.163,0.055,0.121,0.053,0.086,0.033,0.064],"timbre":[41.922,-142.320,48.547,-22.493,60.846,-32.108,-44.070,3.296,11.748,-8.434,-5.277,-21.486]},{"start":117.72399,"duration":0.28603,"confidence":0.222,"loudness_start":-19.062,"loudness_max_time":0.03833,"loudness_max":-15.050,"pitches":[1.000,0.075,0.352,0.077,0.138,0.220,0.073,0.131,0.099,0.358,0.058,0.042],"timbre":[43.035,-142.302,30.755,-13.222,66.198,-32.463,-32.436,-8.276,1.576,0.068,-7.250,-18.902]},{"start":118.01002,"duration":0.44658,"confidence":0.394,"loudness_start":-19.951,"loudness_max_time":0.03601,"loudness_max":-14.248,"pitches":[0.538,0.109,0.583,0.678,0.095,0.113,0.123,0.611,1.000,0.392,0.066,0.062],"timbre":[41.786,-166.611,-11.213,-9.522,53.232,-32.580,-32.772,-0.312,-4.257,-3.694,8.594,-10.109]},{"start":118.45660,"duration":0.14580,"confidence":1.000,"loudness_start":-20.789,"loudness_max_time":0.01574,"loudness_max":-5.907,"pitches":[1.000,0.079,0.287,0.430,0.053,0.060,0.062,0.390,0.238,0.110,0.050,0.034],"timbre":[50.477,-40.730,97.292,39.367,42.579,-36.398,17.687,-5.734,-15.338,3.776,15.313,42.523]},{"start":118.60240,"duration":0.55079,"confidence":0.306,"loudness_start":-12.552,"loudness_max_time":0.05058,"loudness_max":-7.852,"pitches":[1.000,0.129,0.590,0.263,0.092,0.567,0.103,0.689,0.216,0.146,0.064,0.094],"timbre":[49.030,-70.665,23.521,31.022,52.683,-37.484,-5.962,0.614,7.805,-0.206,-22.494,20.473]},{"start":119.15320,"duration":0.44694,"confidence":0.035,"loudness_start":-18.303,"loudness_max_time":0.02985,"loudness_max":-15.019,"pitches":[1.000,0.093,0.397,0.138,0.119,0.425,0.076,0.142,0.410,0.292,0.061,0.086],"timbre":[43.129,-125.721,-17.988,-22.540,44.516,-35.822,-34.687,-0.003,0.523,19.329,-3.318,2.533]},{"start":119.60014,"duration":0.13429,"confidence":0.038,"loudness_start":-19.361,"loudness_max_time":0.01514,"loudness_max":-17.631,"pitches":[0.970,0.105,0.163,0.040,0.041,1.000,0.120,0.107,0.106,0.138,0.019,0.062],"timbre":[41.523,-143.714,-1.329,-30.453,69.417,-50.819,-43.281,-7.994,-4.974,-6.774,4.596,-1.536]},{"start":119.73442,"duration":0.26667,"confidence":0.194,"loudness_start":-19.023,"loudness_max_time":0.02566,"loudness_max":-16.654,"pitches":[1.000,0.089,0.250,0.064,0.078,0.185,0.040,0.091,0.103,0.131,0.057,0.045],"timbre":[41.844,-173.320,9.897,-21.037,46.012,-47.270,-25.928,1.240,5.597,4.373,1.668,-11.999]},{"start":120.00109,"duration":0.14381,"confidence":0.055,"loudness_start":-20.344,"loudness_max_time":0.01334,"loudness_max":-16.904,"pitches":[1.000,0.159,0.908,0.128,0.073,0.286,0.134,0.204,0.541,0.203,0.067,0.095],"timbre":[40.552,-153.816,-4.233,-16.838,55.301,-52.073,-27.860,0.446,3.538,1.582,-0.501,-15.438]},{"start":120.14490,"duration":0.11075,"confidence":0.641,"loudness_start":-21.519,"loudness_max_time":0.02661,"loudness_max":-13.861,"pitches":[1.000,0.156,0.396,0.104,0.076,0.048,0.054,0.131,0.206,0.088,0.063,0.083],"timbre":[42.971,-146.498,17.788,-2.170,76.861,-27.975,-24.917,-8.735,-3.697,8.702,15.095,-15.790]},{"start":120.25565,"duration":0.15039,"confidence":0.262,"loudness_start":-18.647,"loudness_max_time":0.05227,"loudness_max":-14.815,"pitches":[1.000,0.303,0.571,0.187,0.127,0.284,0.175,0.135,0.642,0.129,0.125,0.388],"timbre":[42.178,-175.639,-3.313,-4.935,65.757,-34.149,-30.807,6.501,6.255,5.345,-10.029,-15.910]},{"start":120.40603,"duration":0.25637,"confidence":0.238,"loudness_start":-22.134,"loudness_max_time":0.08658,"loudness_max":-18.500,"pitches":[0.130,0.087,0.404,0.696,0.046,0.098,0.079,0.611,1.000,0.140,0.044,0.045],"timbre":[39.908,-173.635,9.705,-39.752,66.119,-33.722,-59.504,-2.700,2.718,2.467,0.433,0.485]},{"start":120.66240,"duration":0.20417,"confidence":1.000,"loudness_start":-20.739,"loudness_max_time":0.07237,"loudness_max":-5.616,"pitches":[1.000,0.108,0.567,0.151,0.085,0.097,0.063,0.244,0.321,0.120,0.035,0.064],"timbre":[45.317,-108.118,85.660,-118.532,51.766,-6.799,4.469,28.313,-4.329,-17.427,5.935,11.883]},{"start":120.86658,"duration":0.54073,"confidence":0.325,"loudness_start":-11.334,"loudness_max_time":0.04236,"loudness_max":-7.630,"pitches":[1.000,0.118,0.533,0.339,0.104,0.620,0.131,0.851,0.340,0.208,0.074,0.110],"timbre":[49.032,-54.378,13.913,38.098,47.399,-27.821,-2.967,8.143,-1.941,3.358,-30.327,26.328]},{"start":121.40730,"duration":0.42712,"confidence":0.110,"loudness_start":-18.248,"loudness_max_time":0.04451,"loudness_max":-15.648,"pitches":[1.000,0.101,0.484,0.080,0.113,0.306,0.064,0.067,0.429,0.157,0.056,0.071],"timbre":[42.196,-128.564,-35.301,-19.469,76.686,-41.249,-32.068,0.433,16.482,9.828,-7.413,3.666]},{"start":121.83442,"duration":0.13501,"confidence":0.488,"loudness_start":-22.667,"loudness_max_time":0.04893,"loudness_max":-17.261,"pitches":[0.932,0.131,0.583,0.064,0.049,1.000,0.119,0.036,0.168,0.185,0.047,0.078],"timbre":[40.692,-152.778,-32.796,-46.215,78.948,-21.962,-37.188,-0.883,-4.451,-2.232,4.138,8.885]},{"start":121.96943,"duration":0.15088,"confidence":0.434,"loudness_start":-20.484,"loudness_max_time":0.05618,"loudness_max":-16.062,"pitches":[1.000,0.324,0.226,0.081,0.106,0.262,0.085,0.100,0.146,0.075,0.074,0.260],"timbre":[41.789,-155.357,-13.415,-23.970,62.363,-30.609,-23.376,-7.497,9.881,-0.482,8.607,-6.832]},{"start":122.12032,"duration":0.41039,"confidence":0.273,"loudness_start":-19.641,"loudness_max_time":0.01828,"loudness_max":-16.623,"pitches":[1.000,0.195,0.423,0.149,0.283,0.568,0.152,0.243,0.172,0.280,0.113,0.098],"timbre":[41.341,-127.245,5.042,-9.228,62.792,-37.929,-41.102,3.302,20.574,-7.382,0.578,-10.630]},{"start":122.53070,"duration":0.44145,"confidence":0.622,"loudness_start":-23.234,"loudness_max_time":0.04698,"loudness_max":-15.375,"pitches":[0.064,0.091,0.478,0.493,0.071,0.103,0.101,0.481,1.000,0.223,0.042,0.053],"timbre":[40.311,-171.208,-23.604,-37.119,44.456,-13.558,-34.431,-8.675,-7.428,19.566,-4.168,0.013]},{"start":122.97215,"duration":0.16422,"confidence":1.000,"loudness_start":-22.038,"loudness_max_time":0.02679,"loudness_max":-4.682,"pitches":[1.000,0.073,0.821,0.952,0.087,0.095,0.082,0.410,0.198,0.391,0.077,0.040],"timbre":[50.190,-53.677,63.593,13.468,36.335,35.531,36.295,-5.462,-12.972,-6.405,62.463,40.075]},{"start":123.13637,"duration":0.82159,"confidence":0.251,"loudness_start":-10.993,"loudness_max_time":0.03608,"loudness_max":-6.894,"pitches":[0.957,0.191,0.526,0.278,0.145,1.000,0.155,0.613,0.299,0.296,0.129,0.205],"timbre":[48.643,-67.486,7.690,55.236,35.331,-25.914,-0.574,4.823,-5.766,7.869,-25.430,41.485]},{"start":123.95796,"duration":0.66685,"confidence":0.057,"loudness_start":-20.692,"loudness_max_time":0.23156,"loudness_max":-17.227,"pitches":[1.000,0.108,0.541,0.098,0.090,0.752,0.076,0.174,0.226,0.128,0.058,0.043],"timbre":[40.531,-138.210,-34.868,-39.057,23.766,-27.683,-38.369,-6.311,-5.993,10.296,-8.408,8.834]},{"start":124.62481,"duration":0.15261,"confidence":0.336,"loudness_start":-25.508,"loudness_max_time":0.05788,"loudness_max":-20.697,"pitches":[0.208,0.207,0.175,0.181,0.276,0.168,0.161,0.326,1.000,0.280,0.189,0.152],"timbre":[36.147,-126.553,-56.160,-48.645,2.017,-24.807,-18.698,-10.492,18.632,-14.133,-14.884,5.463]},{"start":124.77741,"duration":0.45483,"confidence":0.677,"loudness_start":-25.467,"loudness_max_time":0.06568,"loudness_max":-16.904,"pitches":[0.045,0.064,0.397,0.461,0.058,0.089,0.086,0.427,1.000,0.235,0.040,0.046],"timbre":[36.847,-201.870,-33.953,-39.809,46.102,-16.014,-19.003,-43.739,2.723,-4.727,-25.212,9.703]},{"start":125.23224,"duration":0.64776,"confidence":1.000,"loudness_start":-27.088,"loudness_max_time":0.03052,"loudness_max":-4.551,"pitches":[0.838,0.151,0.784,1.000,0.183,0.676,0.214,0.932,0.258,0.434,0.131,0.162],"timbre":[47.329,-78.940,44.482,14.414,60.224,98.683,35.809,-0.419,16.180,-44.368,55.570,21.817]},{"start":125.88000,"duration":0.48290,"confidence":0.696,"loudness_start":-19.806,"loudness_max_time":0.01666,"loudness_max":-10.836,"pitches":[1.000,0.144,0.401,0.128,0.194,0.575,0.094,0.142,0.118,0.190,0.070,0.063],"timbre":[44.633,-125.909,24.405,55.795,29.694,-46.913,-3.961,-10.233,-12.742,-0.713,-8.917,42.225]},{"start":126.36290,"duration":0.12880,"confidence":0.597,"loudness_start":-24.318,"loudness_max_time":0.03490,"loudness_max":-17.673,"pitches":[0.796,0.104,0.227,0.046,0.058,1.000,0.133,0.087,0.049,0.052,0.044,0.072],"timbre":[39.469,-183.459,-4.013,-17.304,67.510,-12.301,-37.721,-5.670,-0.267,-13.747,15.030,1.863]},{"start":126.49170,"duration":0.28322,"confidence":0.989,"loudness_start":-22.451,"loudness_max_time":0.03727,"loudness_max":-7.833,"pitches":[1.000,0.204,0.066,0.062,0.075,0.170,0.102,0.071,0.181,0.057,0.036,0.288],"timbre":[45.362,-118.268,25.496,7.187,43.289,41.119,-7.653,6.074,-10.695,-23.627,22.751,-20.909]},{"start":126.77492,"duration":0.15039,"confidence":0.498,"loudness_start":-18.508,"loudness_max_time":0.09926,"loudness_max":-11.246,"pitches":[1.000,0.784,0.218,0.147,0.099,0.222,0.093,0.137,0.613,0.169,0.094,0.191],"timbre":[45.570,-113.869,-15.878,-57.123,68.165,-32.516,-9.873,40.393,-7.464,0.541,12.433,-29.194]},{"start":126.92531,"duration":0.44095,"confidence":0.945,"loudness_start":-16.240,"loudness_max_time":0.04847,"loudness_max":-2.095,"pitches":[0.743,0.406,1.000,0.390,0.332,0.578,0.432,0.309,0.668,0.302,0.295,0.515],"timbre":[48.985,-63.974,-35.509,45.268,42.810,49.124,-21.281,-20.345,20.234,-61.160,-22.239,-30.651]},{"start":127.36626,"duration":0.15311,"confidence":0.211,"loudness_start":-19.813,"loudness_max_time":0.02126,"loudness_max":-16.121,"pitches":[0.346,0.637,0.301,0.880,0.082,0.092,0.056,0.265,1.000,0.230,0.145,0.027],"timbre":[42.119,-131.681,-32.442,-32.569,47.016,-50.568,-37.299,-6.381,-0.098,-0.108,12.007,2.753]},{"start":127.51937,"duration":0.68830,"confidence":1.000,"loudness_start":-19.781,"loudness_max_time":0.01024,"loudness_max":-5.010,"pitches":[0.260,0.069,0.095,0.170,0.128,1.000,0.216,0.307,0.345,0.147,0.102,0.108],"timbre":[50.804,-47.272,29.458,45.068,43.009,-53.277,11.830,-6.045,-15.445,15.366,-24.195,28.324]},{"start":128.20766,"duration":0.41456,"confidence":0.350,"loudness_start":-16.761,"loudness_max_time":0.01900,"loudness_max":-12.059,"pitches":[0.290,0.035,0.027,0.050,0.077,1.000,0.168,0.038,0.129,0.042,0.040,0.046],"timbre":[44.702,-114.159,-52.467,-6.475,20.196,-46.112,-27.943,-4.190,14.494,21.353,-4.625,-2.758]},{"start":128.62222,"duration":0.13206,"confidence":0.387,"loudness_start":-20.935,"loudness_max_time":0.04885,"loudness_max":-16.446,"pitches":[1.000,0.127,0.088,0.072,0.066,0.861,0.120,0.196,0.745,0.128,0.030,0.108],"timbre":[41.686,-150.232,-39.782,-46.789,46.835,-24.105,-21.347,-15.309,6.396,3.148,-1.663,-5.298]},{"start":128.75429,"duration":0.38998,"confidence":0.845,"loudness_start":-19.306,"loudness_max_time":0.03328,"loudness_max":-8.095,"pitches":[0.884,0.209,0.133,0.231,0.236,1.000,0.339,0.166,0.452,0.181,0.215,0.290],"timbre":[45.397,-133.835,-5.118,10.945,22.931,18.467,-4.055,-0.407,-9.275,-14.508,6.363,-18.026]},{"start":129.14426,"duration":0.06898,"confidence":0.068,"loudness_start":-19.503,"loudness_max_time":0.00981,"loudness_max":-12.988,"pitches":[0.849,1.000,0.984,0.984,0.483,0.526,0.246,0.231,0.301,0.283,0.764,0.722],"timbre":[42.332,-47.866,-80.784,-33.234,51.201,-95.654,-2.754,-49.622,-33.043,15.009,4.067,-14.573]},{"start":129.21324,"duration":0.11075,"confidence":0.254,"loudness_start":-21.255,"loudness_max_time":0.01405,"loudness_max":-13.032,"pitches":[0.995,1.000,0.255,0.181,0.095,0.081,0.071,0.049,0.164,0.060,0.087,0.226],"timbre":[43.998,-164.143,-10.967,-5.519,55.620,-57.499,-11.808,-2.433,-1.485,17.005,-2.855,-16.525]},{"start":129.32399,"duration":0.17447,"confidence":0.577,"loudness_start":-18.241,"loudness_max_time":0.03368,"loudness_max":-10.329,"pitches":[0.534,0.637,0.238,0.269,0.542,0.583,0.684,0.696,1.000,0.674,0.506,0.045],"timbre":[44.066,-137.399,-33.678,9.960,40.594,-14.299,-24.059,-0.812,28.238,-9.583,1.592,-21.355]},{"start":129.49846,"duration":0.12730,"confidence":0.374,"loudness_start":-20.625,"loudness_max_time":0.04644,"loudness_max":-15.608,"pitches":[0.455,1.000,0.161,0.388,0.050,0.052,0.037,0.410,0.774,0.107,0.069,0.032],"timbre":[42.090,-152.765,-29.855,-26.103,37.195,-28.819,-44.590,-11.067,17.061,2.250,-11.229,-1.477]},{"start":129.62576,"duration":0.11551,"confidence":0.083,"loudness_start":-20.713,"loudness_max_time":0.02435,"loudness_max":-17.822,"pitches":[0.716,1.000,0.321,0.981,0.182,0.189,0.066,0.383,0.466,0.168,0.203,0.036],"timbre":[41.418,-140.142,-20.707,-46.460,37.523,-37.748,-33.198,0.381,2.837,-7.599,15.865,-6.320]},{"start":129.74127,"duration":0.32544,"confidence":0.982,"loudness_start":-18.638,"loudness_max_time":0.05226,"loudness_max":-4.790,"pitches":[0.936,0.363,0.744,0.996,0.451,0.425,0.342,0.662,1.000,0.455,0.231,0.527],"timbre":[48.569,-67.468,45.249,-60.069,39.164,36.434,34.070,13.835,3.543,-27.462,-17.316,15.462]},{"start":130.06671,"duration":0.38721,"confidence":0.243,"loudness_start":-13.524,"loudness_max_time":0.01023,"loudness_max":-8.491,"pitches":[0.206,0.046,0.048,0.073,0.117,1.000,0.134,0.111,0.131,0.041,0.029,0.040],"timbre":[48.308,-84.316,8.965,15.964,34.303,-62.806,3.661,11.096,21.664,8.807,-18.069,-9.911]},{"start":130.45392,"duration":0.14689,"confidence":0.421,"loudness_start":-16.300,"loudness_max_time":0.03439,"loudness_max":-10.597,"pitches":[1.000,0.542,0.106,0.112,0.053,0.123,0.158,0.170,0.554,0.488,0.729,0.042],"timbre":[44.912,-119.757,-51.862,-0.767,26.029,-20.128,-20.186,-27.976,24.654,10.487,-5.948,-13.978]},{"start":130.60082,"duration":0.28440,"confidence":0.235,"loudness_start":-18.943,"loudness_max_time":0.03532,"loudness_max":-15.681,"pitches":[0.228,0.021,0.014,0.062,0.107,1.000,0.200,0.041,0.504,0.030,0.017,0.032],"timbre":[42.526,-145.988,-42.094,-17.540,45.054,-45.184,-20.937,4.020,24.571,3.249,-5.584,-10.516]},{"start":130.88522,"duration":0.12912,"confidence":0.565,"loudness_start":-22.463,"loudness_max_time":0.03969,"loudness_max":-16.407,"pitches":[0.752,0.120,0.042,0.212,0.074,1.000,0.131,0.154,0.526,0.117,0.047,0.102],"timbre":[41.466,-154.588,-34.700,-47.962,49.268,-16.444,-13.529,-4.712,-5.133,0.559,4.878,-3.025]},{"start":131.01433,"duration":0.31206,"confidence":0.830,"loudness_start":-19.347,"loudness_max_time":0.03857,"loudness_max":-8.305,"pitches":[1.000,0.247,0.103,0.191,0.192,0.678,0.267,0.074,0.599,0.050,0.045,0.307],"timbre":[45.194,-143.665,1.739,-8.480,25.844,26.359,-7.178,2.973,-10.822,-22.122,-6.432,-14.366]},{"start":131.32639,"duration":0.26154,"confidence":0.584,"loudness_start":-18.765,"loudness_max_time":0.07283,"loudness_max":-11.020,"pitches":[0.515,0.542,1.000,0.296,0.104,0.160,0.067,0.067,0.309,0.138,0.057,0.099],"timbre":[44.836,-138.715,-11.825,-21.013,51.257,-40.196,-8.432,2.621,5.267,-17.318,-20.534,-24.427]},{"start":131.58794,"duration":0.31905,"confidence":0.691,"loudness_start":-20.007,"loudness_max_time":0.03942,"loudness_max":-10.378,"pitches":[0.305,0.396,1.000,0.307,0.047,0.120,0.097,0.126,0.385,0.058,0.020,0.147],"timbre":[43.693,-130.666,-34.828,-6.352,34.452,1.984,-25.830,-12.647,24.522,-6.207,11.684,-20.601]},{"start":131.90698,"duration":0.10590,"confidence":0.221,"loudness_start":-19.851,"loudness_max_time":0.01099,"loudness_max":-16.888,"pitches":[0.663,0.883,0.386,1.000,0.205,0.154,0.117,0.411,0.530,0.249,0.121,0.056],"timbre":[41.453,-126.958,-28.193,-25.647,52.836,-51.709,-39.284,-6.283,0.375,-5.720,1.196,0.097]},{"start":132.01288,"duration":0.31129,"confidence":1.000,"loudness_start":-20.478,"loudness_max_time":0.04345,"loudness_max":-5.714,"pitches":[0.926,0.290,0.487,1.000,0.380,0.354,0.307,0.587,0.750,0.333,0.210,0.533],"timbre":[48.671,-74.372,42.884,-58.715,54.893,53.528,24.937,18.395,2.715,-31.914,-5.400,13.218]},{"start":132.32417,"duration":0.82109,"confidence":0.038,"loudness_start":-12.745,"loudness_max_time":0.02221,"loudness_max":-9.879,"pitches":[0.462,0.193,0.158,0.157,0.147,1.000,0.144,0.128,0.223,0.133,0.133,0.206],"timbre":[47.231,-100.294,-10.666,20.195,34.041,-43.561,-10.147,1.093,20.576,7.964,-24.241,-8.009]},{"start":133.14526,"duration":0.13741,"confidence":0.478,"loudness_start":-20.903,"loudness_max_time":0.05600,"loudness_max":-16.040,"pitches":[0.850,0.091,0.049,0.151,0.062,0.640,0.083,0.167,1.000,0.138,0.045,0.095],"timbre":[41.845,-151.525,-40.031,-57.614,43.867,-18.699,-22.135,-14.252,8.647,-0.416,-10.979,-3.327]},{"start":133.28268,"duration":0.37052,"confidence":0.825,"loudness_start":-19.455,"loudness_max_time":0.03505,"loudness_max":-8.384,"pitches":[0.994,0.158,0.106,0.291,0.205,1.000,0.248,0.086,0.610,0.078,0.078,0.201],"timbre":[45.583,-133.938,-4.966,-0.942,20.887,22.885,-7.131,-0.139,-8.187,-17.590,9.230,-17.151]},{"start":133.65320,"duration":0.07333,"confidence":0.215,"loudness_start":-19.164,"loudness_max_time":0.01215,"loudness_max":-12.637,"pitches":[0.813,1.000,0.896,0.869,0.425,0.475,0.170,0.161,0.146,0.171,0.622,0.614],"timbre":[41.381,-79.747,-101.538,-4.333,59.812,-105.588,-7.776,-35.390,-42.649,27.004,-9.042,-13.218]},{"start":133.72653,"duration":0.12585,"confidence":0.560,"loudness_start":-21.826,"loudness_max_time":0.02942,"loudness_max":-13.529,"pitches":[0.846,1.000,0.234,0.103,0.052,0.075,0.074,0.078,0.143,0.062,0.077,0.260],"timbre":[43.301,-155.692,-22.327,-23.541,49.324,-8.287,1.587,-12.360,0.563,24.687,6.665,-16.967]},{"start":133.85238,"duration":0.17161,"confidence":0.515,"loudness_start":-18.142,"loudness_max_time":0.03241,"loudness_max":-10.969,"pitches":[0.760,0.682,0.125,0.135,0.217,0.256,0.435,0.455,1.000,0.707,0.625,0.028],"timbre":[43.682,-147.883,-37.326,9.105,38.254,-19.030,-24.064,-11.125,25.543,-7.610,-0.924,-23.937]},{"start":134.02399,"duration":0.12984,"confidence":0.251,"loudness_start":-20.352,"loudness_max_time":0.05026,"loudness_max":-16.765,"pitches":[0.433,1.000,0.145,0.324,0.044,0.092,0.036,0.296,0.582,0.067,0.082,0.029],"timbre":[41.672,-171.300,-18.491,-27.507,49.052,-42.975,-42.859,-5.822,13.614,3.134,-13.869,-0.247]},{"start":134.15383,"duration":0.14444,"confidence":0.149,"loudness_start":-21.378,"loudness_max_time":0.09243,"loudness_max":-17.695,"pitches":[0.524,1.000,0.359,0.955,0.125,0.184,0.085,0.409,0.953,0.226,0.254,0.040],"timbre":[41.621,-136.369,-16.010,-49.489,49.849,-38.200,-28.792,-6.237,9.528,-15.182,16.676,-3.135]},{"start":134.29828,"duration":0.11615,"confidence":0.958,"loudness_start":-18.606,"loudness_max_time":0.02357,"loudness_max":-6.263,"pitches":[1.000,0.789,0.178,0.202,0.047,0.113,0.054,0.141,0.390,0.185,0.121,0.039],"timbre":[50.998,-33.172,71.579,12.523,55.080,3.875,44.711,10.271,-15.360,1.058,31.194,19.505]},{"start":134.41442,"duration":0.18045,"confidence":0.136,"loudness_start":-10.637,"loudness_max_time":0.04278,"loudness_max":-5.959,"pitches":[1.000,0.666,0.191,0.230,0.206,0.335,0.279,0.382,0.881,0.601,0.759,0.090],"timbre":[51.224,-49.922,26.273,22.757,20.375,-36.339,54.080,-1.818,-42.417,7.402,-17.555,29.082]},{"start":134.59488,"duration":0.41011,"confidence":0.228,"loudness_start":-13.248,"loudness_max_time":0.01093,"loudness_max":-8.303,"pitches":[0.210,0.029,0.027,0.066,0.097,1.000,0.108,0.120,0.307,0.026,0.019,0.026],"timbre":[48.671,-86.018,1.221,12.900,34.722,-60.392,-2.865,8.380,21.489,6.460,-13.675,-8.091]},{"start":135.00499,"duration":0.42340,"confidence":0.053,"loudness_start":-15.522,"loudness_max_time":0.01037,"loudness_max":-11.600,"pitches":[0.268,0.033,0.025,0.045,0.089,1.000,0.174,0.048,0.112,0.043,0.031,0.053],"timbre":[44.511,-127.705,-44.078,0.827,24.119,-64.210,-30.918,-7.924,20.459,17.382,-16.311,-7.790]},{"start":135.42839,"duration":0.11075,"confidence":0.355,"loudness_start":-20.822,"loudness_max_time":0.02396,"loudness_max":-17.042,"pitches":[0.701,0.112,0.043,0.075,0.068,1.000,0.148,0.042,0.187,0.038,0.039,0.110],"timbre":[41.585,-152.870,-37.684,-37.430,50.381,-32.921,-26.718,-2.535,-3.364,10.794,-0.345,0.148]},{"start":135.53914,"duration":0.18118,"confidence":0.882,"loudness_start":-19.696,"loudness_max_time":0.04605,"loudness_max":-7.716,"pitches":[0.777,0.521,0.253,0.252,0.471,0.549,0.773,0.771,1.000,0.992,0.772,0.062],"timbre":[45.563,-132.749,5.472,-13.673,25.919,36.501,0.593,3.596,-7.030,-20.239,-8.945,-13.084]},{"start":135.72032,"duration":0.11129,"confidence":0.138,"loudness_start":-17.888,"loudness_max_time":0.01158,"loudness_max":-13.183,"pitches":[1.000,0.159,0.028,0.055,0.090,0.463,0.141,0.084,0.107,0.081,0.044,0.171],"timbre":[44.259,-133.685,44.103,7.571,25.459,-54.013,-17.178,-8.706,-19.894,-2.654,-5.778,-18.115]},{"start":135.83161,"duration":0.28454,"confidence":0.447,"loudness_start":-17.888,"loudness_max_time":0.09732,"loudness_max":-10.593,"pitches":[0.675,0.587,1.000,0.329,0.204,0.355,0.112,0.089,0.098,0.131,0.122,0.158],"timbre":[45.289,-152.620,6.781,-22.661,63.164,-25.937,-2.749,14.873,0.604,-8.115,-0.123,-28.294]},{"start":136.11615,"duration":0.17188,"confidence":0.568,"loudness_start":-18.559,"loudness_max_time":0.03948,"loudness_max":-10.493,"pitches":[1.000,0.672,0.109,0.130,0.047,0.087,0.211,0.219,0.748,0.590,0.761,0.040],"timbre":[44.218,-135.318,-22.731,3.279,23.788,-9.143,-15.495,-12.766,9.565,-7.309,4.974,-26.923]},{"start":136.28803,"duration":0.11791,"confidence":0.093,"loudness_start":-19.132,"loudness_max_time":0.06553,"loudness_max":-16.309,"pitches":[0.766,1.000,0.162,0.312,0.078,0.227,0.051,0.252,0.379,0.045,0.114,0.066],"timbre":[42.312,-141.780,-21.647,-27.564,44.713,-37.440,-41.198,-17.824,7.653,4.879,-13.569,0.065]},{"start":136.40594,"duration":0.16757,"confidence":0.258,"loudness_start":-20.038,"loudness_max_time":0.04115,"loudness_max":-16.104,"pitches":[0.626,1.000,0.390,0.900,0.121,0.449,0.105,0.399,0.587,0.221,0.251,0.084],"timbre":[41.983,-137.679,-20.287,-35.487,48.076,-24.592,-32.398,-8.650,4.365,-20.914,8.780,-2.239]},{"start":136.57351,"duration":0.69923,"confidence":0.997,"loudness_start":-19.263,"loudness_max_time":0.01249,"loudness_max":-4.899,"pitches":[0.305,0.090,0.085,0.167,0.135,1.000,0.199,0.268,0.212,0.104,0.089,0.084],"timbre":[50.691,-51.296,33.164,46.134,43.184,-53.180,10.627,-8.771,-14.421,14.149,-20.450,28.559]},{"start":137.27274,"duration":0.39469,"confidence":0.345,"loudness_start":-16.641,"loudness_max_time":0.01163,"loudness_max":-11.253,"pitches":[0.299,0.027,0.024,0.037,0.094,1.000,0.185,0.040,0.126,0.039,0.035,0.046],"timbre":[44.916,-117.123,-46.741,-1.494,16.851,-54.397,-31.509,-13.834,11.197,24.650,-14.013,-2.831]},{"start":137.66744,"duration":0.14517,"confidence":0.472,"loudness_start":-21.042,"loudness_max_time":0.06118,"loudness_max":-16.037,"pitches":[1.000,0.099,0.052,0.056,0.070,0.759,0.103,0.044,0.205,0.056,0.040,0.090],"timbre":[41.428,-153.190,-29.905,-53.737,51.931,-19.754,-16.984,-17.209,7.110,-2.174,-13.697,-8.525]},{"start":137.81261,"duration":0.38635,"confidence":0.853,"loudness_start":-19.831,"loudness_max_time":0.03551,"loudness_max":-8.507,"pitches":[0.877,0.151,0.111,0.182,0.200,1.000,0.276,0.133,0.344,0.194,0.204,0.227],"timbre":[45.062,-137.198,-2.209,4.476,25.486,23.658,-2.651,3.743,-8.746,-14.105,3.853,-20.156]},{"start":138.19896,"duration":0.07084,"confidence":0.182,"loudness_start":-20.340,"loudness_max_time":0.01261,"loudness_max":-13.214,"pitches":[0.872,1.000,0.954,0.931,0.447,0.586,0.215,0.181,0.235,0.249,0.743,0.731],"timbre":[42.354,-54.535,-76.545,-30.049,59.937,-87.916,-7.113,-55.255,-27.889,18.732,2.590,-18.571]},{"start":138.26980,"duration":0.10875,"confidence":0.156,"loudness_start":-20.602,"loudness_max_time":0.01328,"loudness_max":-13.301,"pitches":[1.000,0.929,0.215,0.116,0.096,0.156,0.071,0.032,0.101,0.082,0.079,0.263],"timbre":[43.798,-166.156,-12.550,-8.473,54.989,-57.957,-14.285,-2.948,0.645,20.954,-0.545,-14.246]},{"start":138.37855,"duration":0.16222,"confidence":0.532,"loudness_start":-18.301,"loudness_max_time":0.03439,"loudness_max":-10.729,"pitches":[1.000,0.515,0.149,0.185,0.200,0.266,0.232,0.232,0.687,0.484,0.782,0.045],"timbre":[43.984,-133.559,-33.969,-0.101,37.416,-13.528,-27.180,-12.727,30.536,-6.275,0.618,-22.240]},{"start":138.54077,"duration":0.14617,"confidence":0.254,"loudness_start":-20.216,"loudness_max_time":0.06228,"loudness_max":-16.558,"pitches":[0.424,1.000,0.153,0.346,0.040,0.115,0.044,0.291,0.400,0.053,0.028,0.034],"timbre":[42.037,-147.683,-20.619,-32.729,44.505,-30.909,-45.451,-12.052,16.972,9.583,-2.356,-4.187]},{"start":138.68694,"duration":0.13968,"confidence":0.211,"loudness_start":-20.104,"loudness_max_time":0.03628,"loudness_max":-16.682,"pitches":[0.922,0.943,0.333,1.000,0.155,0.426,0.092,0.367,0.515,0.234,0.218,0.054],"timbre":[42.112,-144.672,-19.080,-38.627,63.890,-35.103,-36.558,-9.625,10.553,5.850,6.099,-0.803]},{"start":138.82662,"duration":0.29664,"confidence":0.995,"loudness_start":-19.228,"loudness_max_time":0.02322,"loudness_max":-5.136,"pitches":[0.938,0.470,0.688,1.000,0.469,0.411,0.359,0.711,0.927,0.530,0.272,0.447],"timbre":[50.872,-46.734,47.437,24.767,49.421,10.499,36.771,-12.649,-17.902,5.507,33.127,16.798]},{"start":139.12327,"duration":0.41787,"confidence":0.112,"loudness_start":-13.244,"loudness_max_time":0.00773,"loudness_max":-8.663,"pitches":[0.257,0.051,0.048,0.054,0.091,1.000,0.119,0.095,0.095,0.046,0.034,0.053],"timbre":[48.232,-84.327,6.953,13.004,33.515,-62.077,-1.966,13.620,21.939,4.808,-16.447,-7.277]},{"start":139.54113,"duration":0.11456,"confidence":0.280,"loudness_start":-16.557,"loudness_max_time":0.00273,"loudness_max":-10.734,"pitches":[0.885,0.279,0.227,0.234,0.421,0.561,0.720,0.721,1.000,0.964,0.809,0.045],"timbre":[44.862,-131.426,-39.747,-8.802,23.893,-86.215,-28.490,-3.436,30.186,32.834,-12.802,-9.214]},{"start":139.65569,"duration":0.29764,"confidence":0.317,"loudness_start":-18.082,"loudness_max_time":0.05239,"loudness_max":-14.556,"pitches":[0.271,0.019,0.013,0.027,0.093,1.000,0.185,0.029,0.174,0.032,0.015,0.040],"timbre":[43.038,-143.717,-38.432,-8.961,55.433,-40.751,-20.717,8.249,27.366,4.256,-10.562,-7.365]},{"start":139.95333,"duration":0.12549,"confidence":0.343,"loudness_start":-21.329,"loudness_max_time":0.02727,"loudness_max":-17.639,"pitches":[0.736,0.126,0.028,0.043,0.117,1.000,0.150,0.053,0.202,0.081,0.026,0.130],"timbre":[41.005,-150.324,-39.746,-45.753,43.200,-32.391,-17.446,-10.674,-4.256,9.311,3.489,-0.239]},{"start":140.07882,"duration":0.30417,"confidence":0.886,"loudness_start":-19.846,"loudness_max_time":0.03322,"loudness_max":-7.710,"pitches":[1.000,0.207,0.053,0.165,0.187,0.595,0.235,0.042,0.080,0.048,0.041,0.330],"timbre":[46.031,-130.658,-1.190,22.071,26.609,13.249,-7.260,-6.807,-9.682,-7.689,22.015,-22.918]},{"start":140.38299,"duration":0.26658,"confidence":0.516,"loudness_start":-17.846,"loudness_max_time":0.07319,"loudness_max":-11.517,"pitches":[0.512,0.532,1.000,0.276,0.104,0.274,0.086,0.054,0.059,0.134,0.060,0.106],"timbre":[45.012,-137.843,-2.069,-22.249,53.583,-41.517,-11.052,9.356,10.720,-14.880,-15.183,-30.192]},{"start":140.64957,"duration":0.13778,"confidence":0.610,"loudness_start":-19.832,"loudness_max_time":0.03399,"loudness_max":-11.042,"pitches":[0.732,0.497,0.340,0.359,0.634,0.684,0.740,0.737,1.000,0.734,0.608,0.065],"timbre":[43.785,-140.007,-30.489,-1.093,35.777,-9.967,-23.218,-8.098,20.541,6.414,12.695,-18.469]},{"start":140.78735,"duration":0.17011,"confidence":0.360,"loudness_start":-19.042,"loudness_max_time":0.03510,"loudness_max":-15.431,"pitches":[0.632,1.000,0.163,0.273,0.034,0.054,0.039,0.238,0.388,0.041,0.031,0.042],"timbre":[42.741,-155.527,-12.824,-24.096,64.936,-25.469,-30.600,-2.526,26.140,-1.023,-6.612,-7.545]},{"start":140.95746,"duration":0.14431,"confidence":0.220,"loudness_start":-19.735,"loudness_max_time":0.01732,"loudness_max":-16.240,"pitches":[0.955,0.923,0.384,1.000,0.138,0.305,0.101,0.376,0.729,0.301,0.204,0.081],"timbre":[42.532,-135.635,-14.346,-33.752,58.755,-47.797,-37.791,-21.449,4.465,4.593,8.055,-2.027]},{"start":141.10177,"duration":0.11025,"confidence":0.955,"loudness_start":-18.934,"loudness_max_time":0.01120,"loudness_max":-6.160,"pitches":[1.000,0.943,0.223,0.483,0.093,0.161,0.085,0.299,0.134,0.104,0.146,0.050],"timbre":[51.784,-30.605,71.937,17.239,44.706,-49.730,35.975,11.611,-26.351,-6.804,1.594,39.314]},{"start":141.21202,"duration":0.59270,"confidence":0.166,"loudness_start":-10.097,"loudness_max_time":0.03501,"loudness_max":-5.379,"pitches":[0.216,0.046,0.047,0.103,0.082,1.000,0.120,0.161,0.117,0.061,0.036,0.059],"timbre":[50.011,-54.477,-7.440,41.138,37.000,-46.208,10.456,7.890,-28.867,15.769,-17.407,8.015]},{"start":141.80472,"duration":0.39102,"confidence":0.423,"loudness_start":-16.811,"loudness_max_time":0.01656,"loudness_max":-11.939,"pitches":[0.268,0.036,0.024,0.028,0.085,1.000,0.173,0.036,0.122,0.033,0.030,0.047],"timbre":[45.146,-105.598,-62.316,-9.570,31.652,-58.325,-23.175,-13.579,15.981,6.485,-18.252,-6.434]},{"start":142.19574,"duration":0.15483,"confidence":0.458,"loudness_start":-20.623,"loudness_max_time":0.06246,"loudness_max":-15.824,"pitches":[0.788,0.079,0.037,0.037,0.072,1.000,0.089,0.061,0.277,0.065,0.037,0.069],"timbre":[41.930,-142.584,-33.988,-54.608,45.485,-20.993,-27.666,-5.273,9.059,0.891,-8.798,-3.239]},{"start":142.35057,"duration":0.28499,"confidence":0.816,"loudness_start":-19.645,"loudness_max_time":0.02463,"loudness_max":-8.029,"pitches":[1.000,0.185,0.060,0.139,0.165,0.664,0.240,0.037,0.090,0.046,0.037,0.288],"timbre":[46.216,-120.154,4.739,26.186,19.275,2.592,-8.162,-11.096,-16.589,-3.587,27.001,-16.225]},{"start":142.63556,"duration":0.14494,"confidence":0.408,"loudness_start":-19.748,"loudness_max_time":0.08619,"loudness_max":-12.818,"pitches":[1.000,0.884,0.180,0.084,0.077,0.266,0.104,0.080,0.345,0.214,0.081,0.150],"timbre":[43.933,-112.991,-34.593,-38.700,62.314,-44.948,-16.252,59.970,-8.668,-8.519,-0.433,-26.662]},{"start":142.78050,"duration":0.13179,"confidence":0.539,"loudness_start":-20.932,"loudness_max_time":0.03278,"loudness_max":-13.182,"pitches":[0.847,1.000,0.222,0.068,0.055,0.092,0.083,0.036,0.093,0.053,0.060,0.248],"timbre":[43.706,-149.795,-17.643,-22.705,53.064,-10.441,-3.118,-4.596,10.441,24.325,8.046,-16.861]},{"start":142.91229,"duration":0.16367,"confidence":0.536,"loudness_start":-17.767,"loudness_max_time":0.03034,"loudness_max":-10.452,"pitches":[0.410,0.630,0.253,0.271,0.510,0.531,0.707,0.711,1.000,0.769,0.471,0.043],"timbre":[44.311,-144.391,-31.477,12.044,40.141,-25.234,-27.823,-4.700,27.509,2.790,9.032,-22.367]},{"start":143.07596,"duration":0.13211,"confidence":0.230,"loudness_start":-19.758,"loudness_max_time":0.05382,"loudness_max":-16.182,"pitches":[0.455,1.000,0.151,0.340,0.053,0.128,0.045,0.280,0.444,0.061,0.074,0.048],"timbre":[41.810,-163.799,-17.320,-28.641,46.424,-29.994,-42.438,-9.849,13.619,-0.957,-5.444,-5.195]},{"start":143.20807,"duration":0.08934,"confidence":0.141,"loudness_start":-20.738,"loudness_max_time":0.02985,"loudness_max":-16.890,"pitches":[0.534,0.659,0.579,1.000,0.363,0.395,0.069,0.194,0.251,0.067,0.321,0.366],"timbre":[41.795,-131.484,-34.143,-36.826,41.466,-36.979,-43.813,-12.083,1.543,-19.944,12.346,1.139]},{"start":143.29741,"duration":0.35420,"confidence":0.980,"loudness_start":-19.383,"loudness_max_time":0.08008,"loudness_max":-5.797,"pitches":[1.000,0.289,0.687,0.972,0.361,0.559,0.313,0.588,0.704,0.402,0.220,0.533],"timbre":[46.168,-81.683,56.228,-116.387,40.069,-8.127,6.905,8.590,-5.115,-6.814,1.928,18.161]},{"start":143.65161,"duration":0.41719,"confidence":0.046,"loudness_start":-12.444,"loudness_max_time":0.00670,"loudness_max":-8.119,"pitches":[0.262,0.048,0.049,0.056,0.094,1.000,0.121,0.096,0.105,0.051,0.033,0.049],"timbre":[48.307,-89.517,4.916,12.248,34.979,-68.027,-6.078,12.202,19.214,7.772,-13.800,-7.042]},{"start":144.06880,"duration":0.27941,"confidence":0.172,"loudness_start":-16.136,"loudness_max_time":0.00431,"loudness_max":-10.667,"pitches":[0.617,0.108,0.022,0.025,0.141,1.000,0.216,0.035,0.101,0.037,0.024,0.125],"timbre":[44.731,-130.064,-46.846,-1.709,23.385,-77.228,-32.997,-9.608,16.776,27.388,-24.791,-7.240]},{"start":144.34821,"duration":0.10227,"confidence":0.112,"loudness_start":-21.860,"loudness_max_time":0.03249,"loudness_max":-18.172,"pitches":[0.630,0.174,0.050,0.049,0.100,1.000,0.195,0.043,0.147,0.117,0.066,0.193],"timbre":[39.640,-155.948,-48.845,-29.383,20.478,-41.399,-32.484,-6.248,7.700,-1.603,2.838,-21.057]},{"start":144.45048,"duration":0.15678,"confidence":0.894,"loudness_start":-21.891,"loudness_max_time":0.05017,"loudness_max":-10.106,"pitches":[0.597,0.084,0.059,0.056,0.084,1.000,0.104,0.062,0.258,0.053,0.043,0.067],"timbre":[44.174,-127.288,17.154,-78.985,13.336,29.288,-11.978,10.235,-12.792,-24.424,-7.243,-9.811]},{"start":144.60726,"duration":0.30145,"confidence":0.495,"loudness_start":-15.548,"loudness_max_time":0.03159,"loudness_max":-8.773,"pitches":[1.000,0.205,0.192,0.152,0.215,0.807,0.309,0.064,0.092,0.095,0.048,0.247],"timbre":[46.941,-115.889,23.385,27.297,4.276,-18.805,-15.774,-7.771,-24.822,-9.168,6.518,-12.110]},{"start":144.90871,"duration":0.26404,"confidence":0.567,"loudness_start":-17.215,"loudness_max_time":0.07367,"loudness_max":-10.116,"pitches":[0.501,0.564,1.000,0.262,0.137,0.218,0.089,0.070,0.109,0.157,0.108,0.139],"timbre":[45.330,-137.525,-6.364,-24.426,45.304,-35.093,-16.430,5.161,9.093,-15.724,-14.928,-23.435]},{"start":145.17274,"duration":0.13152,"confidence":0.561,"loudness_start":-17.989,"loudness_max_time":0.03858,"loudness_max":-10.297,"pitches":[0.769,0.513,0.254,0.228,0.445,0.467,0.677,0.678,1.000,0.850,0.757,0.052],"timbre":[44.337,-135.765,-30.379,2.009,26.454,-7.355,-23.113,-7.829,24.835,-10.109,-1.819,-23.418]},{"start":145.30426,"duration":0.15810,"confidence":0.131,"loudness_start":-19.165,"loudness_max_time":0.04391,"loudness_max":-16.343,"pitches":[0.439,1.000,0.248,0.244,0.048,0.089,0.046,0.211,0.480,0.136,0.101,0.028],"timbre":[42.282,-143.675,-15.495,-40.448,52.147,-33.397,-33.660,-7.174,22.436,-4.166,-5.963,-8.769]},{"start":145.46236,"duration":0.16757,"confidence":0.025,"loudness_start":-19.662,"loudness_max_time":0.03935,"loudness_max":-16.857,"pitches":[0.437,0.972,1.000,0.844,0.102,0.122,0.079,0.343,0.597,0.222,0.205,0.040],"timbre":[41.785,-141.818,-27.663,-39.730,44.913,-32.392,-41.466,-1.927,3.893,-18.423,5.177,-0.899]},{"start":145.62993,"duration":0.70272,"confidence":1.000,"loudness_start":-19.601,"loudness_max_time":0.01246,"loudness_max":-4.949,"pitches":[0.266,0.106,0.168,0.176,0.117,1.000,0.164,0.263,0.227,0.140,0.122,0.126],"timbre":[50.608,-47.385,27.232,46.618,43.901,-49.399,5.270,-1.587,-15.787,15.451,-20.025,29.348]},{"start":146.33265,"duration":0.39515,"confidence":0.282,"loudness_start":-15.897,"loudness_max_time":0.01012,"loudness_max":-11.693,"pitches":[0.310,0.040,0.090,0.042,0.099,1.000,0.185,0.043,0.134,0.076,0.034,0.054],"timbre":[45.360,-106.965,-58.325,-13.268,38.011,-59.500,-31.150,-12.611,13.525,5.608,-19.772,-1.502]},{"start":146.72780,"duration":0.13959,"confidence":0.399,"loudness_start":-20.863,"loudness_max_time":0.05673,"loudness_max":-16.529,"pitches":[1.000,0.124,0.201,0.063,0.077,0.970,0.131,0.050,0.200,0.070,0.041,0.100],"timbre":[41.487,-158.784,-35.228,-55.874,48.689,-22.417,-22.047,-13.773,3.479,0.179,-3.960,-5.892]},{"start":146.86739,"duration":0.38771,"confidence":0.864,"loudness_start":-19.627,"loudness_max_time":0.03632,"loudness_max":-7.498,"pitches":[0.664,0.127,0.239,0.192,0.233,1.000,0.374,0.202,0.377,0.221,0.197,0.152],"timbre":[45.371,-132.082,-1.325,9.764,25.701,24.827,-6.538,0.650,-8.299,-20.195,1.917,-19.676]},{"start":147.25510,"duration":0.07075,"confidence":0.245,"loudness_start":-19.840,"loudness_max_time":0.01350,"loudness_max":-12.415,"pitches":[0.616,0.848,1.000,0.735,0.332,0.403,0.159,0.142,0.187,0.190,0.550,0.511],"timbre":[42.737,-70.604,-85.613,-25.148,63.429,-90.531,-13.658,-53.529,-32.922,10.386,9.681,-10.868]},{"start":147.32585,"duration":0.11474,"confidence":0.117,"loudness_start":-20.719,"loudness_max_time":0.01342,"loudness_max":-13.141,"pitches":[0.874,1.000,0.418,0.144,0.089,0.102,0.086,0.026,0.093,0.064,0.076,0.190],"timbre":[44.136,-162.470,-13.790,-11.091,54.857,-54.743,-14.922,-0.785,2.909,17.698,0.496,-12.655]},{"start":147.44059,"duration":0.16862,"confidence":0.486,"loudness_start":-17.995,"loudness_max_time":0.02912,"loudness_max":-10.997,"pitches":[1.000,0.772,0.195,0.135,0.094,0.135,0.307,0.307,0.869,0.705,0.767,0.023],"timbre":[43.955,-148.557,-32.373,7.170,34.492,-26.625,-24.895,-6.698,27.410,-6.304,13.321,-26.305]},{"start":147.60921,"duration":0.24898,"confidence":0.131,"loudness_start":-19.629,"loudness_max_time":0.05549,"loudness_max":-16.685,"pitches":[0.127,0.443,1.000,0.595,0.071,0.107,0.045,0.276,0.282,0.169,0.038,0.074],"timbre":[41.982,-155.390,-18.955,-41.708,39.248,-43.436,-47.336,3.223,9.984,-1.176,4.690,-2.022]},{"start":147.85819,"duration":0.32172,"confidence":0.982,"loudness_start":-18.756,"loudness_max_time":0.04942,"loudness_max":-4.990,"pitches":[1.000,0.395,0.689,0.917,0.358,0.391,0.331,0.649,0.817,0.460,0.219,0.508],"timbre":[49.096,-66.794,47.887,-53.496,47.973,42.060,27.859,11.751,-0.022,-33.106,-10.875,20.545]},{"start":148.17991,"duration":0.39388,"confidence":0.157,"loudness_start":-12.806,"loudness_max_time":0.00926,"loudness_max":-8.993,"pitches":[0.217,0.048,0.138,0.059,0.114,1.000,0.131,0.099,0.101,0.061,0.032,0.045],"timbre":[48.294,-87.349,5.696,11.073,34.099,-56.707,-1.131,17.783,21.966,4.879,-15.968,-8.235]},{"start":148.57379,"duration":0.13837,"confidence":0.321,"loudness_start":-16.831,"loudness_max_time":0.02732,"loudness_max":-10.885,"pitches":[0.713,0.677,0.373,0.335,0.676,0.834,0.969,0.960,0.993,1.000,0.539,0.054],"timbre":[44.769,-132.762,-49.692,-1.029,33.736,-34.891,-21.735,-15.963,21.253,19.873,2.858,-13.104]},{"start":148.71215,"duration":0.29533,"confidence":0.195,"loudness_start":-18.968,"loudness_max_time":0.05011,"loudness_max":-15.593,"pitches":[0.247,0.028,0.107,0.031,0.096,1.000,0.193,0.031,0.201,0.041,0.015,0.033],"timbre":[42.058,-155.209,-43.034,-18.162,55.903,-41.703,-16.348,5.599,22.876,-2.195,-7.972,-11.026]},{"start":149.00748,"duration":0.12803,"confidence":0.488,"loudness_start":-21.777,"loudness_max_time":0.04822,"loudness_max":-17.258,"pitches":[0.825,0.146,0.404,0.059,0.051,1.000,0.131,0.043,0.160,0.100,0.048,0.101],"timbre":[41.628,-156.904,-38.033,-46.099,47.825,-29.389,-23.193,-6.181,-5.668,10.561,8.348,-4.329]},{"start":149.13551,"duration":0.28680,"confidence":0.873,"loudness_start":-19.009,"loudness_max_time":0.03374,"loudness_max":-7.411,"pitches":[1.000,0.188,0.219,0.199,0.268,0.831,0.307,0.050,0.105,0.075,0.065,0.286],"timbre":[46.155,-129.770,0.773,17.067,24.758,23.875,-4.427,-7.320,-10.596,-14.603,20.223,-19.946]},{"start":149.42231,"duration":0.30694,"confidence":0.550,"loudness_start":-18.623,"loudness_max_time":0.09325,"loudness_max":-11.308,"pitches":[0.441,0.427,1.000,0.190,0.097,0.150,0.066,0.049,0.057,0.128,0.056,0.094],"timbre":[44.565,-145.213,-11.142,-25.093,56.568,-15.787,-10.672,9.592,5.925,-12.304,-5.753,-22.170]},{"start":149.72925,"duration":0.25896,"confidence":0.590,"loudness_start":-18.557,"loudness_max_time":0.01086,"loudness_max":-11.027,"pitches":[0.484,0.570,1.000,0.314,0.035,0.133,0.061,0.091,0.347,0.108,0.018,0.157],"timbre":[44.123,-141.226,-22.652,-0.301,30.226,-85.599,-39.467,-11.134,10.890,20.828,-8.847,-8.963]},{"start":149.98821,"duration":0.13474,"confidence":0.054,"loudness_start":-20.750,"loudness_max_time":0.03777,"loudness_max":-16.932,"pitches":[0.493,1.000,0.444,0.758,0.123,0.100,0.089,0.271,0.483,0.178,0.168,0.039],"timbre":[41.326,-141.044,-25.710,-39.820,44.881,-34.355,-40.435,-4.689,3.853,-15.502,9.118,-1.333]},{"start":150.12295,"duration":0.73805,"confidence":1.000,"loudness_start":-19.878,"loudness_max_time":0.04643,"loudness_max":-5.771,"pitches":[0.293,0.091,0.169,0.204,0.146,1.000,0.229,0.303,0.261,0.161,0.100,0.098],"timbre":[47.388,-85.801,22.356,-42.835,54.270,51.057,3.255,20.917,4.980,-20.513,-19.508,6.893]},{"start":150.86100,"duration":0.42948,"confidence":0.346,"loudness_start":-16.241,"loudness_max_time":0.00697,"loudness_max":-11.688,"pitches":[0.266,0.028,0.143,0.028,0.070,1.000,0.160,0.030,0.132,0.040,0.026,0.040],"timbre":[45.019,-112.703,-61.576,-7.880,27.361,-61.379,-32.609,-14.425,13.352,7.660,-21.819,-3.809]},{"start":151.29048,"duration":0.11043,"confidence":0.427,"loudness_start":-19.874,"loudness_max_time":0.02341,"loudness_max":-16.319,"pitches":[1.000,0.237,0.432,0.055,0.065,0.868,0.176,0.047,0.147,0.144,0.032,0.091],"timbre":[42.393,-159.842,-27.099,-33.674,52.709,-46.729,-26.042,-4.026,1.363,13.995,-0.302,-5.424]},{"start":151.40091,"duration":0.36503,"confidence":0.836,"loudness_start":-18.688,"loudness_max_time":0.03204,"loudness_max":-7.876,"pitches":[1.000,0.206,0.219,0.213,0.196,0.919,0.217,0.052,0.192,0.082,0.074,0.259],"timbre":[46.167,-136.166,-3.804,12.745,20.157,15.402,-9.605,2.252,-12.313,-14.615,15.695,-17.905]},{"start":151.76594,"duration":0.08689,"confidence":0.197,"loudness_start":-18.621,"loudness_max_time":0.01143,"loudness_max":-13.150,"pitches":[0.673,0.975,1.000,0.851,0.276,0.337,0.089,0.074,0.091,0.106,0.535,0.504],"timbre":[41.992,-80.102,-72.711,-10.296,64.268,-98.628,-4.833,-41.996,-35.067,33.328,-3.286,-21.380]},{"start":151.85283,"duration":0.11615,"confidence":0.556,"loudness_start":-21.006,"loudness_max_time":0.01646,"loudness_max":-13.373,"pitches":[0.923,1.000,0.259,0.067,0.054,0.109,0.087,0.025,0.100,0.099,0.086,0.249],"timbre":[44.144,-162.143,-14.013,-9.927,49.891,-52.118,-12.042,-4.098,8.380,25.410,-2.507,-16.316]},{"start":151.96898,"duration":0.14921,"confidence":0.481,"loudness_start":-17.819,"loudness_max_time":0.02935,"loudness_max":-10.573,"pitches":[1.000,0.544,0.315,0.273,0.432,0.488,0.514,0.517,0.938,0.672,0.823,0.050],"timbre":[43.977,-150.212,-31.399,11.803,37.487,-26.318,-29.432,-10.708,27.446,-2.362,10.198,-21.881]},{"start":152.11819,"duration":0.15374,"confidence":0.314,"loudness_start":-19.928,"loudness_max_time":0.03357,"loudness_max":-16.719,"pitches":[0.311,1.000,0.215,0.310,0.037,0.101,0.047,0.273,0.468,0.156,0.036,0.036],"timbre":[41.879,-159.996,-20.450,-31.949,46.514,-22.850,-39.060,-19.869,14.470,-1.305,-0.690,-5.574]},{"start":152.27193,"duration":0.14340,"confidence":0.076,"loudness_start":-20.800,"loudness_max_time":0.02313,"loudness_max":-16.955,"pitches":[0.499,0.929,0.528,1.000,0.131,0.169,0.076,0.412,0.666,0.377,0.231,0.037],"timbre":[42.030,-128.399,-21.431,-49.585,43.621,-40.084,-43.688,-6.167,11.242,-15.741,18.836,1.536]},{"start":152.41533,"duration":0.29202,"confidence":0.958,"loudness_start":-18.717,"loudness_max_time":0.01905,"loudness_max":-5.917,"pitches":[0.780,0.432,0.848,1.000,0.463,0.363,0.326,0.665,0.856,0.665,0.226,0.460],"timbre":[51.262,-50.767,58.705,21.062,33.503,-12.773,34.371,-4.494,-17.057,2.288,14.214,30.385]},{"start":152.70735,"duration":0.39442,"confidence":0.062,"loudness_start":-12.612,"loudness_max_time":0.00920,"loudness_max":-8.926,"pitches":[0.239,0.096,0.194,0.091,0.135,1.000,0.125,0.142,0.121,0.098,0.052,0.084],"timbre":[48.342,-81.961,7.842,12.269,35.073,-58.197,0.179,16.315,22.402,11.561,-17.320,-6.615]},{"start":153.10177,"duration":0.41057,"confidence":0.389,"loudness_start":-16.075,"loudness_max_time":0.02737,"loudness_max":-10.103,"pitches":[0.301,0.052,0.120,0.035,0.080,1.000,0.169,0.048,0.173,0.082,0.057,0.067],"timbre":[45.035,-116.058,-52.389,5.371,28.679,-27.899,-27.389,-20.401,24.744,17.969,-0.290,-12.362]},{"start":153.51234,"duration":0.14376,"confidence":0.503,"loudness_start":-22.162,"loudness_max_time":0.05141,"loudness_max":-17.249,"pitches":[0.837,0.111,0.184,0.056,0.067,1.000,0.128,0.064,0.221,0.102,0.066,0.109],"timbre":[40.932,-151.795,-36.000,-65.747,45.561,-20.684,-16.815,-10.750,0.563,-3.800,-6.265,0.867]},{"start":153.65610,"duration":0.30190,"confidence":0.887,"loudness_start":-19.180,"loudness_max_time":0.04172,"loudness_max":-7.447,"pitches":[1.000,0.240,0.099,0.180,0.196,0.639,0.244,0.047,0.166,0.065,0.039,0.367],"timbre":[45.761,-130.773,4.244,4.797,27.496,29.819,-8.386,0.152,-7.762,-13.111,4.011,-18.176]},{"start":153.95800,"duration":0.29950,"confidence":0.495,"loudness_start":-17.895,"loudness_max_time":0.08602,"loudness_max":-11.012,"pitches":[0.487,0.524,1.000,0.254,0.154,0.262,0.099,0.081,0.389,0.116,0.113,0.152],"timbre":[44.853,-149.115,-17.615,-20.033,49.952,-34.447,-13.385,6.227,8.153,-8.198,-8.801,-20.429]},{"start":154.25751,"duration":0.25900,"confidence":0.592,"loudness_start":-18.945,"loudness_max_time":0.01155,"loudness_max":-11.036,"pitches":[0.418,0.531,1.000,0.346,0.049,0.154,0.081,0.115,0.516,0.056,0.017,0.195],"timbre":[44.341,-136.865,-25.542,-1.248,30.324,-79.660,-42.399,-14.150,13.733,18.242,-3.681,-7.224]},{"start":154.51651,"duration":0.16834,"confidence":0.012,"loudness_start":-20.176,"loudness_max_time":0.04575,"loudness_max":-17.121,"pitches":[0.377,0.843,0.353,0.915,0.091,0.124,0.092,0.389,1.000,0.202,0.194,0.035],"timbre":[41.383,-143.874,-26.957,-40.447,42.940,-30.704,-34.533,-4.118,6.245,-20.924,9.221,-2.922]},{"start":154.68485,"duration":0.70426,"confidence":1.000,"loudness_start":-19.601,"loudness_max_time":0.01424,"loudness_max":-5.053,"pitches":[0.246,0.084,0.089,0.190,0.115,1.000,0.194,0.292,0.349,0.163,0.128,0.141],"timbre":[50.685,-54.179,30.579,47.129,43.317,-47.250,6.593,-5.225,-13.724,19.025,-12.769,27.786]},{"start":155.38912,"duration":0.39528,"confidence":0.261,"loudness_start":-16.345,"loudness_max_time":0.01215,"loudness_max":-12.429,"pitches":[0.234,0.042,0.025,0.046,0.090,1.000,0.178,0.043,0.105,0.032,0.034,0.048],"timbre":[44.581,-116.385,-50.088,-11.376,23.780,-60.663,-28.366,-6.087,17.252,11.102,-19.505,-4.781]},{"start":155.78440,"duration":0.14340,"confidence":0.374,"loudness_start":-20.193,"loudness_max_time":0.05659,"loudness_max":-16.186,"pitches":[1.000,0.125,0.088,0.077,0.077,0.973,0.123,0.150,0.671,0.101,0.045,0.095],"timbre":[41.873,-147.657,-32.203,-55.253,42.773,-26.675,-16.906,-9.372,8.205,-8.945,-6.774,4.997]},{"start":155.92780,"duration":0.29061,"confidence":0.826,"loudness_start":-18.945,"loudness_max_time":0.03155,"loudness_max":-7.543,"pitches":[1.000,0.220,0.103,0.147,0.216,0.774,0.319,0.069,0.312,0.073,0.061,0.335],"timbre":[46.050,-120.315,4.545,14.205,23.472,21.035,-3.613,-4.485,-10.984,-16.375,11.379,-17.985]},{"start":156.21841,"duration":0.09379,"confidence":0.122,"loudness_start":-19.641,"loudness_max_time":0.02368,"loudness_max":-14.524,"pitches":[1.000,0.615,0.335,0.259,0.111,0.220,0.122,0.284,0.648,0.302,0.213,0.368],"timbre":[42.324,-170.624,-22.633,-8.391,34.369,-51.106,-5.490,-5.037,-18.585,9.267,5.640,-23.961]},{"start":156.31220,"duration":0.18508,"confidence":0.289,"loudness_start":-19.675,"loudness_max_time":0.01187,"loudness_max":-13.050,"pitches":[0.508,1.000,0.268,0.129,0.101,0.131,0.083,0.112,0.228,0.059,0.080,0.171],"timbre":[44.477,-89.585,-52.449,-28.573,86.517,-60.885,12.779,-74.098,-22.759,19.448,-12.457,-22.495]},{"start":156.49728,"duration":0.16848,"confidence":0.503,"loudness_start":-18.395,"loudness_max_time":0.02838,"loudness_max":-11.054,"pitches":[0.439,0.635,0.188,0.200,0.370,0.422,0.582,0.596,1.000,0.726,0.484,0.031],"timbre":[43.791,-145.328,-34.884,8.525,35.873,-24.867,-24.932,-4.907,27.363,-4.116,9.105,-26.009]},{"start":156.66576,"duration":0.12721,"confidence":0.251,"loudness_start":-20.532,"loudness_max_time":0.04892,"loudness_max":-16.294,"pitches":[0.457,1.000,0.163,0.372,0.054,0.095,0.050,0.396,0.678,0.100,0.098,0.031],"timbre":[41.722,-166.031,-23.132,-28.746,41.935,-34.152,-38.511,-12.066,12.157,-2.910,-8.941,-1.756]},{"start":156.79297,"duration":0.12204,"confidence":0.163,"loudness_start":-20.948,"loudness_max_time":0.08873,"loudness_max":-17.101,"pitches":[0.652,1.000,0.307,0.880,0.131,0.152,0.064,0.367,0.669,0.169,0.195,0.041],"timbre":[41.974,-126.608,-17.365,-50.103,39.210,-39.391,-32.933,0.676,12.316,-12.270,14.301,2.182]},{"start":156.91501,"duration":0.17315,"confidence":0.957,"loudness_start":-18.242,"loudness_max_time":0.04832,"loudness_max":-4.583,"pitches":[0.943,1.000,0.267,0.380,0.054,0.155,0.075,0.258,0.650,0.148,0.065,0.045],"timbre":[49.518,-51.092,56.631,-58.006,53.072,33.717,36.021,17.733,3.090,-27.995,-7.840,16.537]},{"start":157.08816,"duration":0.14825,"confidence":0.088,"loudness_start":-10.507,"loudness_max_time":0.01254,"loudness_max":-5.653,"pitches":[1.000,0.489,0.197,0.302,0.119,0.374,0.461,0.576,0.884,0.797,0.872,0.065],"timbre":[51.022,-65.879,44.517,28.896,-5.964,-55.726,49.960,1.880,-17.524,-9.747,-9.295,30.943]},{"start":157.23642,"duration":0.38735,"confidence":0.105,"loudness_start":-12.573,"loudness_max_time":0.00855,"loudness_max":-8.255,"pitches":[0.217,0.047,0.045,0.063,0.120,1.000,0.138,0.111,0.193,0.046,0.030,0.044],"timbre":[48.532,-83.107,7.128,14.114,35.785,-61.320,5.589,12.579,19.168,11.826,-16.670,-5.836]},{"start":157.62376,"duration":0.44005,"confidence":0.338,"loudness_start":-16.555,"loudness_max_time":0.03277,"loudness_max":-11.075,"pitches":[0.305,0.047,0.034,0.071,0.090,1.000,0.171,0.063,0.401,0.051,0.049,0.081],"timbre":[44.605,-120.380,-50.559,-1.704,31.492,-23.972,-27.324,-21.454,24.021,13.854,-9.911,-6.620]},{"start":158.06381,"duration":0.13415,"confidence":0.434,"loudness_start":-21.533,"loudness_max_time":0.04569,"loudness_max":-17.385,"pitches":[0.809,0.098,0.054,0.188,0.053,1.000,0.128,0.104,0.562,0.104,0.034,0.089],"timbre":[41.521,-160.499,-33.077,-44.681,45.754,-30.013,-20.491,-6.580,-7.372,2.926,4.064,-6.224]},{"start":158.19796,"duration":0.28993,"confidence":0.853,"loudness_start":-18.940,"loudness_max_time":0.02550,"loudness_max":-7.531,"pitches":[1.000,0.163,0.095,0.181,0.216,0.839,0.321,0.083,0.553,0.051,0.054,0.219],"timbre":[46.242,-136.451,0.130,27.989,18.738,6.926,-9.548,-9.253,-17.718,-4.596,29.627,-19.157]},{"start":158.48789,"duration":0.27306,"confidence":0.549,"loudness_start":-18.343,"loudness_max_time":0.08175,"loudness_max":-11.140,"pitches":[0.497,0.510,1.000,0.296,0.101,0.175,0.077,0.062,0.253,0.128,0.054,0.095],"timbre":[44.917,-137.425,-9.070,-21.504,56.128,-34.067,-6.712,6.301,7.492,-5.313,-3.930,-24.393]},{"start":158.76095,"duration":0.28376,"confidence":0.632,"loudness_start":-18.698,"loudness_max_time":0.03661,"loudness_max":-10.562,"pitches":[0.461,0.558,1.000,0.382,0.061,0.194,0.109,0.093,0.437,0.059,0.031,0.178],"timbre":[44.253,-137.801,-32.499,-3.214,37.719,-13.508,-27.400,-9.396,27.080,-1.990,16.959,-20.097]},{"start":159.04472,"duration":0.14036,"confidence":0.188,"loudness_start":-20.267,"loudness_max_time":0.04625,"loudness_max":-16.702,"pitches":[0.532,1.000,0.319,0.845,0.127,0.126,0.103,0.328,0.708,0.171,0.165,0.060],"timbre":[41.748,-139.019,-23.054,-38.972,50.538,-29.052,-38.173,1.626,8.731,-22.196,7.009,-0.738]},{"start":159.18508,"duration":0.31234,"confidence":1.000,"loudness_start":-19.855,"loudness_max_time":0.04111,"loudness_max":-5.868,"pitches":[0.927,0.352,0.470,1.000,0.346,0.343,0.287,0.605,0.758,0.330,0.176,0.494],"timbre":[49.044,-71.850,44.200,-45.849,53.411,55.635,29.205,11.419,-2.387,-32.937,0.952,13.806]},{"start":159.49741,"duration":0.42395,"confidence":0.068,"loudness_start":-12.570,"loudness_max_time":0.01293,"loudness_max":-10.107,"pitches":[0.231,0.050,0.047,0.068,0.098,1.000,0.118,0.092,0.175,0.059,0.041,0.054],"timbre":[47.690,-82.728,-6.173,5.278,44.171,-51.918,-0.859,15.849,18.888,11.654,-19.307,-7.669]},{"start":159.92136,"duration":0.38762,"confidence":0.210,"loudness_start":-16.117,"loudness_max_time":0.00700,"loudness_max":-12.227,"pitches":[0.298,0.030,0.029,0.094,0.098,1.000,0.193,0.042,0.271,0.041,0.030,0.052],"timbre":[44.445,-128.156,-46.003,-13.002,23.510,-61.243,-30.531,-8.587,16.741,13.289,-24.391,-0.415]},{"start":160.30898,"duration":0.14522,"confidence":0.479,"loudness_start":-21.030,"loudness_max_time":0.06069,"loudness_max":-16.019,"pitches":[0.934,0.101,0.051,0.124,0.076,0.802,0.106,0.152,1.000,0.142,0.045,0.105],"timbre":[41.844,-148.668,-37.741,-62.296,43.008,-22.135,-22.765,-5.507,9.765,-0.003,-6.295,-2.897]},{"start":160.45420,"duration":0.28644,"confidence":0.837,"loudness_start":-18.686,"loudness_max_time":0.03338,"loudness_max":-7.403,"pitches":[1.000,0.212,0.126,0.254,0.314,0.979,0.381,0.087,0.249,0.087,0.071,0.283],"timbre":[46.307,-121.350,1.381,9.101,21.947,18.966,-7.155,-0.713,-6.905,-13.022,14.865,-20.233]},{"start":160.74063,"duration":0.15551,"confidence":0.075,"loudness_start":-17.658,"loudness_max_time":0.09649,"loudness_max":-12.929,"pitches":[0.834,1.000,0.261,0.097,0.096,0.371,0.112,0.123,0.852,0.262,0.117,0.180],"timbre":[43.671,-115.203,-37.284,-40.174,45.896,-48.595,-15.058,50.827,-9.464,-12.209,5.702,-19.211]},{"start":160.89615,"duration":0.12934,"confidence":0.458,"loudness_start":-20.416,"loudness_max_time":0.03139,"loudness_max":-13.947,"pitches":[0.811,1.000,0.261,0.119,0.057,0.086,0.093,0.082,0.120,0.059,0.058,0.255],"timbre":[43.673,-159.851,-15.251,-15.793,52.607,-22.776,-1.461,-10.846,6.943,24.302,3.218,-20.352]},{"start":161.02549,"duration":0.16839,"confidence":0.504,"loudness_start":-18.361,"loudness_max_time":0.03065,"loudness_max":-11.309,"pitches":[1.000,0.687,0.120,0.130,0.051,0.103,0.180,0.186,0.789,0.527,0.712,0.023],"timbre":[43.949,-144.726,-35.797,5.378,36.819,-24.254,-26.863,-0.065,28.727,-8.053,5.650,-24.035]},{"start":161.19388,"duration":0.13229,"confidence":0.259,"loudness_start":-20.050,"loudness_max_time":0.04671,"loudness_max":-16.550,"pitches":[0.398,1.000,0.167,0.352,0.043,0.065,0.038,0.322,0.566,0.060,0.060,0.026],"timbre":[41.835,-160.553,-22.053,-25.493,43.880,-36.308,-40.764,-15.399,17.668,-0.829,-7.093,-1.875]},{"start":161.32617,"duration":0.14567,"confidence":0.132,"loudness_start":-20.880,"loudness_max_time":0.08724,"loudness_max":-17.329,"pitches":[0.560,1.000,0.400,0.962,0.125,0.154,0.091,0.492,0.978,0.253,0.270,0.038],"timbre":[41.563,-123.163,-21.118,-52.114,44.054,-37.536,-33.830,-9.285,13.462,-5.102,14.082,-3.034]},{"start":161.47184,"duration":0.28980,"confidence":0.968,"loudness_start":-18.883,"loudness_max_time":0.15602,"loudness_max":-5.957,"pitches":[0.693,0.315,0.426,0.776,0.321,0.312,0.253,0.540,1.000,0.374,0.182,0.339],"timbre":[51.209,-42.762,60.635,16.543,35.093,-3.991,36.695,-3.171,-18.545,10.563,21.658,29.803]},{"start":161.76163,"duration":0.39982,"confidence":0.157,"loudness_start":-12.161,"loudness_max_time":0.00902,"loudness_max":-7.776,"pitches":[0.212,0.047,0.050,0.082,0.112,1.000,0.132,0.132,0.298,0.044,0.032,0.045],"timbre":[48.921,-89.189,1.484,15.197,33.976,-61.834,-0.519,13.974,21.479,6.217,-16.547,-0.772]},{"start":162.16145,"duration":0.43687,"confidence":0.515,"loudness_start":-15.799,"loudness_max_time":0.02664,"loudness_max":-9.486,"pitches":[0.273,0.025,0.028,0.035,0.073,1.000,0.173,0.055,0.117,0.053,0.041,0.048],"timbre":[45.205,-105.875,-65.769,19.561,40.987,-28.124,-18.103,-32.961,10.384,2.131,0.576,-24.162]},{"start":162.59832,"duration":0.23637,"confidence":0.458,"loudness_start":-21.975,"loudness_max_time":0.15747,"loudness_max":-16.308,"pitches":[0.448,0.061,0.032,0.087,0.143,1.000,0.307,0.048,0.102,0.033,0.041,0.057],"timbre":[41.511,-153.795,-24.616,-44.829,42.659,-34.074,-19.030,-9.195,-4.508,12.395,11.107,-6.819]},{"start":162.83469,"duration":0.61746,"confidence":0.680,"loudness_start":-19.474,"loudness_max_time":0.06573,"loudness_max":-11.860,"pitches":[0.411,0.200,1.000,0.251,0.130,0.217,0.086,0.056,0.298,0.122,0.101,0.115],"timbre":[41.502,-161.026,1.236,-13.303,52.890,-15.187,-10.313,11.210,-2.896,-6.515,-38.864,-18.313]},{"start":163.45215,"duration":0.28943,"confidence":0.367,"loudness_start":-23.194,"loudness_max_time":0.05848,"loudness_max":-20.136,"pitches":[0.191,0.394,1.000,0.224,0.090,0.164,0.044,0.091,0.856,0.099,0.067,0.119],"timbre":[38.355,-154.290,-52.514,-20.942,21.349,-48.832,-4.295,13.192,-31.528,-1.120,-9.487,4.804]},{"start":163.74159,"duration":0.12245,"confidence":0.397,"loudness_start":-24.840,"loudness_max_time":0.08161,"loudness_max":-20.520,"pitches":[0.480,1.000,0.214,0.107,0.054,0.156,0.072,0.230,0.994,0.371,0.095,0.070],"timbre":[38.423,-103.788,-57.371,-58.927,23.336,-46.949,-17.419,-3.125,1.571,0.485,-2.664,16.319]},{"start":163.86404,"duration":0.16639,"confidence":0.688,"loudness_start":-22.418,"loudness_max_time":0.02930,"loudness_max":-14.100,"pitches":[0.951,0.328,0.082,0.110,0.174,1.000,0.331,0.243,0.648,0.177,0.471,0.174],"timbre":[41.190,-147.727,-26.141,11.232,13.623,-20.041,7.184,30.456,-4.863,15.830,18.929,0.673]},{"start":164.03043,"duration":0.28812,"confidence":0.178,"loudness_start":-22.131,"loudness_max_time":0.04438,"loudness_max":-19.131,"pitches":[0.138,0.024,0.032,0.025,0.135,1.000,0.123,0.036,0.092,0.024,0.010,0.027],"timbre":[39.400,-112.613,-49.836,-36.591,10.910,-36.270,-18.911,5.862,17.532,11.276,-3.547,-10.970]},{"start":164.31855,"duration":0.41465,"confidence":0.620,"loudness_start":-23.471,"loudness_max_time":0.00858,"loudness_max":-15.834,"pitches":[0.069,0.019,0.014,0.017,0.059,1.000,0.108,0.014,0.013,0.024,0.166,0.032],"timbre":[40.439,-206.845,-63.701,-10.884,47.311,-66.013,-34.026,-2.790,-9.889,-10.884,-14.469,-5.850]},{"start":164.73320,"duration":0.27959,"confidence":1.000,"loudness_start":-25.109,"loudness_max_time":0.01995,"loudness_max":-7.823,"pitches":[0.205,0.058,0.021,0.046,0.099,1.000,0.256,0.203,0.049,0.017,0.191,0.053],"timbre":[47.693,-123.840,33.746,27.155,34.726,-54.677,39.065,-9.199,18.747,11.429,5.790,-9.005]},{"start":165.01279,"duration":0.26077,"confidence":0.762,"loudness_start":-16.356,"loudness_max_time":0.01035,"loudness_max":-6.240,"pitches":[1.000,0.208,0.093,0.166,0.143,0.773,0.260,0.079,0.157,0.067,0.141,0.247],"timbre":[48.692,-84.146,9.295,55.069,-4.029,-56.616,-22.514,-16.631,-17.907,1.757,-32.559,-3.176]},{"start":165.27356,"duration":0.12812,"confidence":0.807,"loudness_start":-21.528,"loudness_max_time":0.03412,"loudness_max":-9.111,"pitches":[1.000,0.848,0.250,0.167,0.136,0.656,0.156,0.137,0.362,0.259,0.491,0.227],"timbre":[44.567,-89.280,-63.160,22.490,62.140,-1.022,3.996,-33.489,-31.305,-32.830,19.704,-26.562]},{"start":165.40168,"duration":0.12975,"confidence":0.562,"loudness_start":-20.577,"loudness_max_time":0.04304,"loudness_max":-12.700,"pitches":[0.627,1.000,0.218,0.073,0.053,0.144,0.122,0.276,0.336,0.093,0.060,0.208],"timbre":[42.079,-128.051,-53.407,-0.640,25.906,-0.577,-7.125,-22.299,-3.673,-13.994,-28.803,-11.916]},{"start":165.53143,"duration":0.32317,"confidence":0.990,"loudness_start":-22.517,"loudness_max_time":0.05595,"loudness_max":-8.179,"pitches":[0.343,0.504,1.000,0.260,0.069,0.237,0.212,0.305,0.334,0.116,0.107,0.296],"timbre":[43.481,-148.046,1.343,-54.554,41.561,31.176,28.492,15.889,21.437,-20.285,-28.597,-5.524]},{"start":165.85460,"duration":0.10390,"confidence":0.691,"loudness_start":-21.373,"loudness_max_time":0.01757,"loudness_max":-11.350,"pitches":[0.801,1.000,0.227,0.129,0.069,0.246,0.200,0.245,0.413,0.153,0.216,0.155],"timbre":[42.022,-63.997,-77.520,36.882,73.198,-83.758,3.927,-60.124,-38.896,6.075,0.280,2.062]},{"start":165.95850,"duration":0.17406,"confidence":0.839,"loudness_start":-22.701,"loudness_max_time":0.05405,"loudness_max":-11.586,"pitches":[0.264,0.844,0.352,0.130,0.077,0.132,0.116,0.548,1.000,0.205,0.057,0.085],"timbre":[43.130,-67.840,-16.156,-14.904,12.723,21.081,-16.198,-26.828,-5.775,-4.577,-24.844,10.094]},{"start":166.13256,"duration":0.11819,"confidence":0.801,"loudness_start":-21.609,"loudness_max_time":0.01924,"loudness_max":-7.362,"pitches":[0.497,0.393,0.262,0.273,0.542,0.655,0.759,0.806,1.000,0.866,0.754,0.055],"timbre":[44.206,-112.445,-50.683,64.451,-11.924,-57.889,-4.619,-17.521,-3.701,31.668,24.302,5.804]},{"start":166.25075,"duration":0.16063,"confidence":0.553,"loudness_start":-20.992,"loudness_max_time":0.04441,"loudness_max":-14.332,"pitches":[1.000,0.215,0.052,0.083,0.054,0.359,0.165,0.172,0.279,0.110,0.158,0.139],"timbre":[41.443,-116.126,-42.168,-31.245,19.832,-11.054,-3.188,-7.694,20.095,-4.142,-6.809,-9.176]},{"start":166.41138,"duration":0.14912,"confidence":0.788,"loudness_start":-20.860,"loudness_max_time":0.02494,"loudness_max":-10.234,"pitches":[1.000,0.222,0.177,0.342,0.112,0.595,0.178,0.545,0.499,0.110,0.372,0.197],"timbre":[44.405,-72.582,-59.112,16.552,75.448,-45.184,18.093,-33.717,8.836,-1.748,20.625,-30.061]},{"start":166.56050,"duration":0.13651,"confidence":0.667,"loudness_start":-18.965,"loudness_max_time":0.02317,"loudness_max":-11.000,"pitches":[0.083,0.184,0.167,0.085,0.075,1.000,0.152,0.179,0.220,0.045,0.036,0.094],"timbre":[44.149,-154.583,-38.699,12.204,18.920,-64.922,-39.735,-22.513,-13.590,23.870,13.052,-3.643]},{"start":166.69701,"duration":0.28259,"confidence":1.000,"loudness_start":-18.735,"loudness_max_time":0.05958,"loudness_max":-5.231,"pitches":[0.114,0.064,0.054,0.053,0.111,1.000,0.178,0.046,0.065,0.031,0.262,0.045],"timbre":[49.365,-52.375,-28.006,36.301,10.930,29.623,-29.572,-12.182,-3.689,-39.945,-1.101,11.456]},{"start":166.97959,"duration":0.14590,"confidence":0.919,"loudness_start":-18.937,"loudness_max_time":0.03596,"loudness_max":-5.498,"pitches":[0.362,0.067,0.054,0.116,0.060,0.589,0.109,1.000,0.956,0.155,0.777,0.124],"timbre":[48.822,-89.749,-4.831,19.127,57.405,-2.932,51.439,-41.619,-2.238,14.331,30.750,-23.445]},{"start":167.12549,"duration":0.15202,"confidence":0.119,"loudness_start":-13.738,"loudness_max_time":0.01334,"loudness_max":-10.305,"pitches":[0.793,0.179,0.135,0.082,0.063,0.394,0.158,1.000,0.862,0.132,0.550,0.273],"timbre":[46.868,-124.248,22.059,14.258,30.526,-67.673,33.472,-20.324,10.831,23.941,-5.204,0.935]},{"start":167.27751,"duration":0.26014,"confidence":0.754,"loudness_start":-15.882,"loudness_max_time":0.00144,"loudness_max":-6.316,"pitches":[1.000,0.207,0.128,0.186,0.142,0.683,0.339,0.177,0.339,0.093,0.148,0.282],"timbre":[47.677,-93.693,13.565,62.254,-3.040,-59.557,-19.878,-23.101,-23.807,2.334,-34.087,-3.067]},{"start":167.53764,"duration":0.12621,"confidence":0.753,"loudness_start":-20.748,"loudness_max_time":0.02930,"loudness_max":-10.519,"pitches":[1.000,0.731,0.262,0.126,0.070,0.222,0.083,0.239,0.584,0.187,0.159,0.175],"timbre":[44.479,-88.196,-63.023,5.286,59.451,-13.880,2.896,-39.331,-15.874,-32.510,7.518,-23.075]},{"start":167.66385,"duration":0.13501,"confidence":0.519,"loudness_start":-20.809,"loudness_max_time":0.05231,"loudness_max":-13.719,"pitches":[0.575,1.000,0.263,0.212,0.075,0.117,0.080,0.190,0.426,0.074,0.047,0.227],"timbre":[42.119,-123.137,-59.442,14.452,33.570,-4.718,-9.008,-23.107,7.798,-11.515,-21.826,-6.122]},{"start":167.79887,"duration":0.32594,"confidence":1.000,"loudness_start":-24.082,"loudness_max_time":0.05705,"loudness_max":-9.453,"pitches":[0.233,0.489,1.000,0.251,0.066,0.204,0.167,0.282,0.633,0.093,0.105,0.202],"timbre":[43.098,-152.943,-1.177,-52.768,47.576,43.441,36.318,14.482,23.032,-15.898,-32.963,-5.353]},{"start":168.12481,"duration":0.09293,"confidence":0.682,"loudness_start":-21.221,"loudness_max_time":0.00965,"loudness_max":-10.902,"pitches":[0.591,1.000,0.220,0.195,0.078,0.485,0.169,0.385,0.621,0.270,0.372,0.081],"timbre":[40.917,-68.944,-104.659,30.128,61.640,-111.849,-28.926,-40.050,-42.928,6.803,-4.201,-10.923]},{"start":168.21773,"duration":0.18277,"confidence":0.929,"loudness_start":-24.526,"loudness_max_time":0.06125,"loudness_max":-11.667,"pitches":[0.197,0.662,0.391,0.076,0.027,0.086,0.107,0.537,1.000,0.131,0.052,0.063],"timbre":[41.748,-86.350,-16.059,-45.698,32.176,34.930,-0.115,-10.018,4.137,-16.416,-24.305,6.232]},{"start":168.40050,"duration":0.11184,"confidence":0.758,"loudness_start":-20.740,"loudness_max_time":0.01550,"loudness_max":-8.174,"pitches":[0.724,0.498,0.149,0.135,0.252,0.352,0.498,0.554,1.000,0.796,0.840,0.048],"timbre":[43.513,-96.587,-58.122,50.734,-18.392,-100.449,-11.346,-0.429,5.962,24.707,1.785,17.829]},{"start":168.51234,"duration":0.14540,"confidence":0.543,"loudness_start":-22.428,"loudness_max_time":0.04676,"loudness_max":-15.355,"pitches":[1.000,0.232,0.557,0.279,0.136,0.826,0.398,0.598,0.613,0.317,0.513,0.101],"timbre":[41.362,-107.330,-48.176,-16.895,15.411,-26.118,-9.373,-20.730,9.855,5.675,-26.219,-5.334]},{"start":168.65773,"duration":0.17596,"confidence":0.914,"loudness_start":-22.011,"loudness_max_time":0.04465,"loudness_max":-9.389,"pitches":[0.421,0.120,0.090,0.215,0.070,0.766,0.093,0.370,1.000,0.130,0.300,0.053],"timbre":[43.860,-81.128,-56.909,-4.359,61.148,20.123,24.812,-7.585,6.328,-35.048,-5.539,-26.379]},{"start":168.83370,"duration":0.10916,"confidence":0.673,"loudness_start":-19.576,"loudness_max_time":0.01228,"loudness_max":-10.804,"pitches":[0.279,0.204,0.121,0.087,0.088,1.000,0.171,0.214,0.273,0.054,0.041,0.196],"timbre":[43.205,-163.561,-47.571,16.789,22.553,-87.434,-42.144,-23.929,-16.675,30.741,-9.603,1.748]},{"start":168.94286,"duration":0.30671,"confidence":1.000,"loudness_start":-20.840,"loudness_max_time":0.03804,"loudness_max":-5.077,"pitches":[0.118,0.048,0.057,0.059,0.076,1.000,0.150,0.059,0.184,0.038,0.244,0.045],"timbre":[48.137,-84.623,-20.948,-9.490,16.679,63.880,-28.140,15.458,6.937,-51.399,-14.225,5.047]},{"start":169.24957,"duration":0.27796,"confidence":0.909,"loudness_start":-20.339,"loudness_max_time":0.02963,"loudness_max":-6.055,"pitches":[0.210,0.058,0.076,0.099,0.132,1.000,0.328,0.235,0.228,0.048,0.320,0.054],"timbre":[48.492,-84.153,-15.934,28.248,57.738,-14.776,37.066,-36.124,-11.268,26.727,15.241,-14.625]},{"start":169.52753,"duration":0.27937,"confidence":0.839,"loudness_start":-16.657,"loudness_max_time":0.01859,"loudness_max":-6.187,"pitches":[1.000,0.178,0.109,0.144,0.156,0.679,0.301,0.114,0.491,0.075,0.212,0.302],"timbre":[48.033,-98.097,-1.799,64.016,1.014,-18.030,-15.145,-22.576,-23.541,-3.109,0.805,-5.124]},{"start":169.80689,"duration":0.15261,"confidence":0.761,"loudness_start":-20.507,"loudness_max_time":0.02485,"loudness_max":-9.361,"pitches":[0.872,1.000,0.285,0.121,0.049,0.322,0.088,0.093,0.507,0.214,0.210,0.119],"timbre":[44.367,-87.531,-70.569,27.810,58.360,-43.152,0.164,-37.819,-27.475,-16.296,22.738,-28.677]},{"start":169.95950,"duration":0.11660,"confidence":0.350,"loudness_start":-20.210,"loudness_max_time":0.00756,"loudness_max":-14.190,"pitches":[0.552,1.000,0.224,0.074,0.043,0.101,0.042,0.277,0.738,0.181,0.086,0.117],"timbre":[40.307,-156.441,-65.605,13.650,15.878,-79.619,-15.400,-27.831,-17.922,19.224,-11.786,-5.951]},{"start":170.07610,"duration":0.31175,"confidence":1.000,"loudness_start":-23.883,"loudness_max_time":0.04241,"loudness_max":-9.222,"pitches":[0.215,0.469,1.000,0.286,0.088,0.212,0.169,0.260,0.348,0.095,0.078,0.159],"timbre":[44.802,-132.623,-14.162,-7.587,29.828,40.826,30.445,3.338,17.560,0.604,4.156,-5.191]},{"start":170.38785,"duration":0.10553,"confidence":0.728,"loudness_start":-20.440,"loudness_max_time":0.01780,"loudness_max":-10.571,"pitches":[0.418,0.632,0.169,0.145,0.044,0.389,0.135,0.400,1.000,0.349,0.224,0.081],"timbre":[42.901,-84.010,-100.284,28.464,53.694,-77.273,-15.931,-48.253,-39.155,26.206,-4.700,-1.304]},{"start":170.49338,"duration":0.17755,"confidence":0.809,"loudness_start":-22.266,"loudness_max_time":0.04798,"loudness_max":-11.518,"pitches":[0.344,0.659,0.208,0.084,0.032,0.085,0.059,0.343,1.000,0.208,0.037,0.075],"timbre":[43.129,-97.736,-41.904,-14.926,10.500,21.061,-14.795,-18.058,-4.373,-6.884,-3.962,5.985]},{"start":170.67093,"duration":0.14023,"confidence":0.741,"loudness_start":-21.440,"loudness_max_time":0.00909,"loudness_max":-8.326,"pitches":[1.000,0.723,0.195,0.252,0.256,0.616,0.497,0.461,0.975,0.781,0.922,0.060],"timbre":[43.488,-109.012,-39.836,38.261,-15.722,-111.304,-25.081,-1.456,2.418,17.600,-11.431,11.693]},{"start":170.81116,"duration":0.09923,"confidence":0.316,"loudness_start":-22.003,"loudness_max_time":0.01145,"loudness_max":-16.562,"pitches":[0.688,0.584,0.321,0.334,0.127,0.478,0.428,0.597,1.000,0.438,0.266,0.118],"timbre":[40.693,-117.686,-45.009,-29.650,4.659,-66.601,-23.210,-9.696,15.384,17.351,-9.398,-7.209]},{"start":170.91039,"duration":0.15098,"confidence":0.805,"loudness_start":-20.668,"loudness_max_time":0.05693,"loudness_max":-10.688,"pitches":[0.629,0.184,0.107,0.150,0.123,0.450,0.197,0.431,1.000,0.123,0.063,0.161],"timbre":[43.005,-87.173,-47.167,-32.720,60.042,4.320,25.842,16.337,6.955,-42.380,-35.024,-15.925]},{"start":171.06136,"duration":0.14599,"confidence":0.751,"loudness_start":-20.319,"loudness_max_time":0.05109,"loudness_max":-10.545,"pitches":[0.220,0.296,0.209,0.243,0.159,1.000,0.212,0.233,0.236,0.126,0.095,0.225],"timbre":[43.509,-129.889,-37.685,-10.256,20.453,10.867,-14.427,-35.061,-4.287,9.316,-39.229,0.733]},{"start":171.20735,"duration":0.25016,"confidence":0.992,"loudness_start":-20.226,"loudness_max_time":0.03711,"loudness_max":-5.483,"pitches":[0.055,0.040,0.017,0.024,0.109,1.000,0.169,0.044,0.157,0.045,0.252,0.036],"timbre":[48.281,-87.529,-16.096,-28.655,24.807,58.500,-26.299,16.598,4.961,-40.933,-5.192,7.052]},{"start":171.45751,"duration":0.34771,"confidence":0.953,"loudness_start":-20.435,"loudness_max_time":0.08535,"loudness_max":-5.604,"pitches":[0.134,0.035,0.050,0.107,0.076,1.000,0.193,0.247,0.316,0.026,0.298,0.036],"timbre":[44.227,-126.480,2.042,-90.541,12.791,-17.709,-3.867,-11.864,4.744,-5.797,-23.730,-5.618]},{"start":171.80522,"duration":0.26639,"confidence":0.813,"loudness_start":-18.488,"loudness_max_time":0.01194,"loudness_max":-7.195,"pitches":[1.000,0.145,0.231,0.255,0.203,0.830,0.371,0.189,0.358,0.086,0.140,0.237],"timbre":[47.613,-96.768,9.869,58.184,-3.317,-56.138,-14.376,-21.870,-17.100,-2.512,-34.146,-8.398]},{"start":172.07161,"duration":0.12286,"confidence":0.787,"loudness_start":-20.454,"loudness_max_time":0.02749,"loudness_max":-9.225,"pitches":[1.000,0.865,0.224,0.123,0.078,0.386,0.152,0.261,0.960,0.209,0.229,0.192],"timbre":[44.863,-90.516,-70.165,25.073,47.272,-39.041,-1.626,-40.824,-31.297,-26.007,18.111,-26.800]},{"start":172.19447,"duration":0.16122,"confidence":0.463,"loudness_start":-19.880,"loudness_max_time":0.04494,"loudness_max":-13.778,"pitches":[0.459,1.000,0.277,0.145,0.061,0.082,0.074,0.136,0.520,0.139,0.061,0.193],"timbre":[41.545,-135.550,-62.718,-0.742,23.685,-18.435,-10.756,-15.758,-4.412,-6.165,-13.586,-5.102]},{"start":172.35569,"duration":0.27224,"confidence":0.964,"loudness_start":-22.078,"loudness_max_time":0.02519,"loudness_max":-8.949,"pitches":[0.328,0.600,1.000,0.319,0.066,0.145,0.128,0.328,0.327,0.098,0.085,0.190],"timbre":[45.974,-129.979,-2.877,34.696,25.700,-18.841,29.923,-3.274,14.018,29.352,10.071,-3.976]},{"start":172.62794,"duration":0.12277,"confidence":0.745,"loudness_start":-21.747,"loudness_max_time":0.03340,"loudness_max":-12.067,"pitches":[0.543,1.000,0.201,0.102,0.086,0.179,0.136,0.250,0.572,0.161,0.234,0.045],"timbre":[42.957,-55.985,-54.161,2.024,57.651,-11.982,23.930,-25.672,6.538,-51.066,11.465,-11.237]},{"start":172.75070,"duration":0.18426,"confidence":0.822,"loudness_start":-21.503,"loudness_max_time":0.05438,"loudness_max":-10.811,"pitches":[0.181,0.557,0.300,0.054,0.029,0.081,0.056,0.236,1.000,0.139,0.038,0.067],"timbre":[43.383,-85.767,-34.350,-5.130,13.806,28.904,0.324,-3.380,2.040,-21.404,-19.967,6.575]},{"start":172.93497,"duration":0.11088,"confidence":0.753,"loudness_start":-23.112,"loudness_max_time":0.00925,"loudness_max":-8.423,"pitches":[1.000,0.873,0.263,0.284,0.473,0.599,0.639,0.669,0.964,0.779,0.900,0.069],"timbre":[43.057,-106.345,-50.363,45.840,-16.123,-112.974,-17.697,2.792,7.318,16.915,-14.017,15.464]},{"start":173.04585,"duration":0.14009,"confidence":0.563,"loudness_start":-22.500,"loudness_max_time":0.04384,"loudness_max":-15.385,"pitches":[0.886,0.284,0.082,0.257,0.090,0.526,0.207,0.381,1.000,0.289,0.161,0.151],"timbre":[40.952,-124.037,-60.654,-22.927,16.582,-20.732,-10.269,-18.894,5.720,0.699,-11.906,-5.356]},{"start":173.18594,"duration":0.16771,"confidence":0.862,"loudness_start":-21.669,"loudness_max_time":0.04350,"loudness_max":-10.644,"pitches":[0.405,0.108,0.046,0.236,0.070,0.594,0.097,0.411,1.000,0.089,0.231,0.062],"timbre":[43.620,-97.740,-58.668,-17.598,73.097,7.917,22.766,-13.274,7.510,-45.576,-14.946,-23.730]},{"start":173.35365,"duration":0.11043,"confidence":0.628,"loudness_start":-20.351,"loudness_max_time":0.02080,"loudness_max":-11.144,"pitches":[0.112,0.217,0.256,0.105,0.113,1.000,0.185,0.161,0.271,0.087,0.047,0.125],"timbre":[43.276,-178.971,-43.806,22.861,24.711,-57.356,-32.734,-17.129,-11.466,29.095,10.439,0.244]},{"start":173.46408,"duration":0.30848,"confidence":1.000,"loudness_start":-20.389,"loudness_max_time":0.09404,"loudness_max":-5.469,"pitches":[0.114,0.051,0.050,0.036,0.080,1.000,0.136,0.047,0.108,0.028,0.228,0.046],"timbre":[47.371,-84.159,-18.454,-31.142,21.470,66.058,-25.281,24.168,7.959,-50.239,-38.992,13.098]},{"start":173.77256,"duration":0.28943,"confidence":0.953,"loudness_start":-20.724,"loudness_max_time":0.03449,"loudness_max":-5.997,"pitches":[0.331,0.054,0.033,0.062,0.098,1.000,0.280,0.264,0.161,0.037,0.322,0.068],"timbre":[48.363,-94.753,-24.381,23.332,53.292,3.403,30.383,-32.865,-9.778,6.490,20.305,-11.801]},{"start":174.06200,"duration":0.27274,"confidence":0.820,"loudness_start":-18.092,"loudness_max_time":0.01647,"loudness_max":-6.807,"pitches":[1.000,0.183,0.128,0.191,0.191,0.843,0.321,0.147,0.144,0.084,0.197,0.269],"timbre":[48.421,-97.434,20.739,44.520,-1.759,-48.842,-11.865,-26.803,-17.565,3.476,-4.273,-11.422]},{"start":174.33474,"duration":0.09315,"confidence":0.584,"loudness_start":-17.523,"loudness_max_time":0.02817,"loudness_max":-9.404,"pitches":[1.000,0.560,0.201,0.048,0.109,0.472,0.219,0.220,0.385,0.197,0.237,0.285],"timbre":[45.577,-89.542,-51.394,19.173,67.337,-40.524,10.091,-35.931,-26.228,-18.397,12.546,-20.447]},{"start":174.42789,"duration":0.19410,"confidence":0.308,"loudness_start":-18.365,"loudness_max_time":0.06701,"loudness_max":-14.113,"pitches":[0.554,0.715,1.000,0.447,0.161,0.291,0.126,0.213,0.308,0.171,0.124,0.263],"timbre":[41.995,-149.250,-13.675,-8.004,24.367,-24.670,10.248,4.662,-12.569,-11.022,-30.161,0.563]},{"start":174.62200,"duration":0.27696,"confidence":0.942,"loudness_start":-21.604,"loudness_max_time":0.02005,"loudness_max":-8.638,"pitches":[0.521,0.684,1.000,0.262,0.070,0.172,0.136,0.294,0.230,0.123,0.096,0.292],"timbre":[46.490,-132.269,1.808,32.085,33.893,-18.218,22.378,-10.986,11.458,29.158,9.425,-2.894]},{"start":174.89896,"duration":0.12816,"confidence":0.691,"loudness_start":-20.758,"loudness_max_time":0.02829,"loudness_max":-10.768,"pitches":[0.627,1.000,0.270,0.085,0.063,0.719,0.176,0.398,0.873,0.191,0.368,0.184],"timbre":[43.313,-87.218,-80.015,15.507,76.308,-16.627,19.076,-48.718,-16.030,-36.129,19.341,-10.266]},{"start":175.02712,"duration":0.16204,"confidence":0.723,"loudness_start":-21.396,"loudness_max_time":0.04206,"loudness_max":-12.603,"pitches":[0.281,0.835,0.404,0.083,0.039,0.235,0.082,0.608,1.000,0.245,0.056,0.105],"timbre":[43.227,-88.531,-31.090,-5.845,14.209,12.870,-11.761,-14.475,1.584,-2.481,-0.346,5.452]},{"start":175.18916,"duration":0.12059,"confidence":0.761,"loudness_start":-21.440,"loudness_max_time":0.01867,"loudness_max":-8.806,"pitches":[0.452,0.564,0.315,0.322,0.659,0.754,0.844,0.872,1.000,0.843,0.623,0.053],"timbre":[43.884,-88.170,-52.907,51.157,-12.075,-50.970,-5.291,6.220,7.444,17.262,14.519,9.600]},{"start":175.30975,"duration":0.15819,"confidence":0.692,"loudness_start":-21.987,"loudness_max_time":0.04613,"loudness_max":-13.747,"pitches":[1.000,0.145,0.248,0.107,0.076,0.536,0.188,0.088,0.185,0.091,0.051,0.123],"timbre":[42.687,-113.213,-35.200,-13.532,28.289,-8.663,-11.981,-15.099,16.958,20.020,-7.788,-10.861]},{"start":175.46794,"duration":0.13905,"confidence":0.835,"loudness_start":-21.111,"loudness_max_time":0.03527,"loudness_max":-9.153,"pitches":[0.841,0.122,0.062,0.071,0.100,1.000,0.142,0.268,0.179,0.066,0.277,0.078],"timbre":[45.191,-78.582,-64.915,12.865,80.725,-13.466,7.514,-37.301,-2.304,-7.134,16.339,-30.765]},{"start":175.60698,"duration":0.12621,"confidence":0.636,"loudness_start":-18.416,"loudness_max_time":0.03261,"loudness_max":-10.492,"pitches":[0.269,0.256,0.223,0.134,0.124,1.000,0.173,0.159,0.086,0.069,0.054,0.177],"timbre":[43.957,-148.338,-47.615,21.354,24.851,-16.933,-30.193,-29.493,-6.077,12.254,10.376,-13.148]},{"start":175.73320,"duration":0.31243,"confidence":1.000,"loudness_start":-20.357,"loudness_max_time":0.08454,"loudness_max":-5.107,"pitches":[0.115,0.052,0.036,0.036,0.092,1.000,0.136,0.051,0.062,0.028,0.205,0.035],"timbre":[47.866,-83.710,-23.254,-15.194,18.224,69.818,-31.980,20.680,8.189,-50.859,-24.242,3.005]},{"start":176.04562,"duration":0.28091,"confidence":0.903,"loudness_start":-19.595,"loudness_max_time":0.02499,"loudness_max":-5.703,"pitches":[0.208,0.085,0.088,0.058,0.102,1.000,0.285,0.250,0.061,0.033,0.288,0.057],"timbre":[49.185,-86.876,-1.348,31.296,52.883,-55.973,32.616,-34.698,-13.202,33.547,1.782,-8.215]},{"start":176.32653,"duration":0.27333,"confidence":0.741,"loudness_start":-15.453,"loudness_max_time":0.01634,"loudness_max":-6.087,"pitches":[1.000,0.183,0.051,0.109,0.119,0.630,0.225,0.098,0.078,0.058,0.155,0.258],"timbre":[47.954,-96.403,-1.971,64.718,-4.417,-47.564,-17.006,-26.541,-19.770,-0.251,-19.556,-5.913]},{"start":176.59986,"duration":0.15002,"confidence":0.822,"loudness_start":-21.873,"loudness_max_time":0.02501,"loudness_max":-9.246,"pitches":[1.000,0.965,0.255,0.072,0.044,0.157,0.085,0.100,0.368,0.186,0.251,0.193],"timbre":[44.301,-85.932,-73.162,38.658,58.880,-39.061,1.166,-33.681,-28.850,-24.754,14.221,-29.326]},{"start":176.74989,"duration":0.14086,"confidence":0.166,"loudness_start":-22.271,"loudness_max_time":0.01689,"loudness_max":-16.420,"pitches":[0.466,1.000,0.293,0.097,0.059,0.140,0.112,0.179,0.321,0.127,0.058,0.216],"timbre":[40.020,-149.634,-50.158,-10.203,18.294,-73.173,-19.093,-6.623,-13.588,18.098,8.759,-12.938]},{"start":176.89075,"duration":0.15007,"confidence":0.941,"loudness_start":-23.221,"loudness_max_time":0.01814,"loudness_max":-9.493,"pitches":[1.000,0.921,0.305,0.273,0.489,0.606,0.620,0.817,0.712,0.667,0.776,0.034],"timbre":[46.595,-132.904,26.469,20.331,32.373,-54.350,35.350,-4.548,16.325,33.025,19.601,-9.679]},{"start":177.04082,"duration":0.12336,"confidence":0.152,"loudness_start":-15.811,"loudness_max_time":0.00740,"loudness_max":-11.416,"pitches":[0.518,1.000,0.171,0.069,0.038,0.166,0.061,0.416,0.971,0.227,0.097,0.062],"timbre":[43.369,-169.659,-4.797,26.476,33.056,-92.336,8.309,-1.703,-0.136,25.601,-14.357,11.325]},{"start":177.16417,"duration":0.12127,"confidence":0.800,"loudness_start":-20.949,"loudness_max_time":0.02964,"loudness_max":-9.048,"pitches":[0.756,1.000,0.257,0.130,0.076,0.186,0.075,0.322,0.817,0.219,0.376,0.125],"timbre":[43.264,-74.085,-89.901,45.517,61.081,-9.682,-6.032,-17.551,-9.516,-27.856,3.007,-17.235]},{"start":177.28544,"duration":0.17737,"confidence":0.833,"loudness_start":-23.796,"loudness_max_time":0.04697,"loudness_max":-12.674,"pitches":[0.556,0.920,0.289,0.044,0.033,0.132,0.066,0.329,1.000,0.180,0.058,0.182],"timbre":[42.686,-81.530,-31.326,-9.774,9.624,18.227,-12.600,-20.088,-0.586,-8.027,-7.328,4.267]},{"start":177.46281,"duration":0.11088,"confidence":0.736,"loudness_start":-21.646,"loudness_max_time":0.00938,"loudness_max":-8.572,"pitches":[0.426,0.351,0.308,0.309,0.590,0.678,0.823,0.856,1.000,0.897,0.674,0.054],"timbre":[43.140,-108.140,-38.667,47.797,-11.887,-110.884,-5.458,0.556,-0.382,17.947,-12.430,12.503]},{"start":177.57370,"duration":0.14063,"confidence":0.348,"loudness_start":-22.622,"loudness_max_time":0.04330,"loudness_max":-17.688,"pitches":[1.000,0.278,0.496,0.193,0.143,0.805,0.327,0.646,0.452,0.254,0.280,0.179],"timbre":[40.269,-117.370,-35.101,-37.687,13.069,-27.471,-10.020,-17.781,6.126,16.798,-13.876,-6.744]},{"start":177.71433,"duration":0.14449,"confidence":0.825,"loudness_start":-21.230,"loudness_max_time":0.04235,"loudness_max":-11.139,"pitches":[1.000,0.154,0.169,0.122,0.157,0.465,0.221,0.433,0.258,0.051,0.061,0.232],"timbre":[43.659,-71.922,-58.154,-15.454,67.307,9.017,19.059,6.207,17.311,-43.122,-11.616,-23.477]},{"start":177.85882,"duration":0.13859,"confidence":0.737,"loudness_start":-20.541,"loudness_max_time":0.04508,"loudness_max":-11.105,"pitches":[0.204,0.273,0.230,0.137,0.170,1.000,0.232,0.122,0.173,0.107,0.084,0.218],"timbre":[43.613,-136.287,-46.112,14.159,22.714,0.756,-17.690,-39.412,-8.800,14.663,-16.669,-2.802]},{"start":177.99741,"duration":0.31442,"confidence":1.000,"loudness_start":-20.569,"loudness_max_time":0.04197,"loudness_max":-5.273,"pitches":[0.138,0.041,0.038,0.035,0.085,1.000,0.134,0.055,0.072,0.038,0.192,0.074],"timbre":[47.614,-82.077,-20.699,-11.765,17.543,67.677,-27.061,18.717,10.044,-48.169,-24.162,5.882]},{"start":178.31184,"duration":0.28644,"confidence":0.947,"loudness_start":-19.644,"loudness_max_time":0.02498,"loudness_max":-6.021,"pitches":[0.383,0.043,0.068,0.096,0.132,1.000,0.294,0.259,0.056,0.029,0.078,0.069],"timbre":[48.581,-91.833,-10.476,43.786,58.638,-43.576,17.897,-25.686,-14.827,36.700,-6.936,-8.497]},{"start":178.59828,"duration":0.25986,"confidence":0.880,"loudness_start":-18.003,"loudness_max_time":0.00847,"loudness_max":-7.068,"pitches":[1.000,0.201,0.104,0.147,0.149,0.680,0.274,0.091,0.070,0.071,0.058,0.227],"timbre":[48.009,-88.383,10.365,63.386,-2.081,-53.955,-20.073,-20.030,-21.003,-0.645,-31.053,-2.697]},{"start":178.85814,"duration":0.14404,"confidence":0.857,"loudness_start":-21.507,"loudness_max_time":0.03012,"loudness_max":-8.551,"pitches":[1.000,0.816,0.232,0.070,0.041,0.159,0.086,0.093,0.374,0.186,0.236,0.192],"timbre":[44.300,-87.359,-68.846,35.483,59.467,-7.417,5.630,-27.664,-23.200,-39.195,15.540,-34.389]},{"start":179.00218,"duration":0.12730,"confidence":0.444,"loudness_start":-21.582,"loudness_max_time":0.02427,"loudness_max":-14.732,"pitches":[0.690,1.000,0.190,0.049,0.047,0.172,0.075,0.073,0.289,0.119,0.042,0.173],"timbre":[40.236,-140.596,-69.465,13.332,15.428,-35.054,-13.455,-25.512,-10.662,7.299,4.874,-22.837]},{"start":179.12948,"duration":0.31533,"confidence":1.000,"loudness_start":-23.924,"loudness_max_time":0.03840,"loudness_max":-8.697,"pitches":[0.250,0.474,1.000,0.231,0.074,0.164,0.175,0.315,0.302,0.077,0.076,0.217],"timbre":[44.464,-129.906,-6.281,-12.790,40.456,47.008,31.715,-5.676,19.221,7.475,3.500,-9.721]},{"start":179.44481,"duration":0.11007,"confidence":0.547,"loudness_start":-21.374,"loudness_max_time":0.01235,"loudness_max":-12.380,"pitches":[0.925,1.000,0.262,0.110,0.048,0.252,0.148,0.394,0.856,0.288,0.131,0.150],"timbre":[42.043,-84.292,-89.229,10.229,89.578,-89.234,-9.526,-52.041,-23.728,33.122,-8.567,-8.011]},{"start":179.55488,"duration":0.16163,"confidence":0.771,"loudness_start":-22.609,"loudness_max_time":0.04142,"loudness_max":-12.818,"pitches":[0.291,0.757,0.359,0.072,0.041,0.156,0.063,0.335,1.000,0.228,0.045,0.088],"timbre":[43.138,-82.788,-31.578,0.202,2.406,5.742,-16.249,-15.669,-10.263,-5.540,-8.968,2.838]},{"start":179.71651,"duration":0.12141,"confidence":0.832,"loudness_start":-21.853,"loudness_max_time":0.02138,"loudness_max":-7.900,"pitches":[0.648,0.468,0.206,0.199,0.401,0.613,0.633,0.665,1.000,0.862,0.856,0.053],"timbre":[44.163,-100.224,-60.977,55.481,-6.901,-40.420,-17.472,-16.344,-2.467,25.087,29.460,10.097]},{"start":179.83791,"duration":0.14662,"confidence":0.464,"loudness_start":-21.308,"loudness_max_time":0.04071,"loudness_max":-15.188,"pitches":[1.000,0.314,0.154,0.146,0.065,0.606,0.265,0.230,0.610,0.278,0.327,0.219],"timbre":[41.140,-96.047,-45.754,-27.966,10.847,-20.748,-11.755,-9.408,17.658,4.584,-1.235,-8.453]},{"start":179.98454,"duration":0.16132,"confidence":0.824,"loudness_start":-20.699,"loudness_max_time":0.04049,"loudness_max":-9.975,"pitches":[0.573,0.097,0.066,0.085,0.079,1.000,0.163,0.272,0.291,0.047,0.186,0.139],"timbre":[43.771,-76.644,-74.497,-5.728,67.838,0.968,8.861,-7.883,6.758,-37.541,0.411,-22.843]},{"start":180.14585,"duration":0.11569,"confidence":0.748,"loudness_start":-20.141,"loudness_max_time":0.02062,"loudness_max":-10.226,"pitches":[0.125,0.203,0.184,0.067,0.109,1.000,0.175,0.215,0.108,0.043,0.042,0.152],"timbre":[43.725,-156.077,-48.214,31.581,20.304,-53.630,-34.528,-29.572,-17.184,28.962,11.085,-6.001]},{"start":180.26154,"duration":0.31732,"confidence":0.996,"loudness_start":-20.392,"loudness_max_time":0.04186,"loudness_max":-5.502,"pitches":[0.172,0.044,0.046,0.040,0.076,1.000,0.149,0.033,0.054,0.020,0.227,0.037],"timbre":[47.564,-85.923,-27.070,-0.541,18.749,58.014,-28.206,19.143,6.134,-50.289,-23.222,10.624]},{"start":180.57887,"duration":0.09565,"confidence":0.976,"loudness_start":-21.605,"loudness_max_time":0.02057,"loudness_max":-5.681,"pitches":[0.426,0.244,0.060,0.058,0.159,1.000,0.322,0.870,0.210,0.216,0.776,0.336],"timbre":[49.178,-102.018,15.592,37.619,55.877,-74.102,38.645,-33.473,-13.536,45.509,-4.939,-9.658]},{"start":180.67451,"duration":0.18730,"confidence":0.147,"loudness_start":-13.856,"loudness_max_time":0.05325,"loudness_max":-10.230,"pitches":[0.559,0.095,0.064,0.085,0.261,1.000,0.478,0.427,0.104,0.045,0.151,0.114],"timbre":[46.707,-129.582,20.308,17.435,40.436,-31.363,33.277,-18.158,25.605,-15.549,-26.023,-2.906]},{"start":180.86181,"duration":0.26630,"confidence":0.775,"loudness_start":-17.596,"loudness_max_time":0.00132,"loudness_max":-5.850,"pitches":[1.000,0.137,0.119,0.149,0.133,0.592,0.265,0.156,0.084,0.068,0.103,0.238],"timbre":[48.052,-98.288,20.021,55.822,9.159,-59.822,-22.649,-22.738,-15.647,-0.093,-35.562,-7.526]},{"start":181.12812,"duration":0.15873,"confidence":0.780,"loudness_start":-21.158,"loudness_max_time":0.02390,"loudness_max":-9.317,"pitches":[0.726,1.000,0.238,0.083,0.047,0.309,0.098,0.113,0.356,0.174,0.133,0.101],"timbre":[44.343,-72.342,-68.199,33.777,49.561,-41.016,4.156,-28.633,-33.267,-22.540,30.714,-25.869]},{"start":181.28685,"duration":0.12458,"confidence":0.433,"loudness_start":-20.157,"loudness_max_time":0.00902,"loudness_max":-14.671,"pitches":[0.644,1.000,0.243,0.093,0.051,0.105,0.109,0.185,0.390,0.165,0.058,0.198],"timbre":[39.739,-154.038,-72.045,14.312,19.495,-90.788,-25.790,-22.256,-13.804,20.676,-8.825,-3.855]},{"start":181.41143,"duration":0.15202,"confidence":1.000,"loudness_start":-24.425,"loudness_max_time":0.02474,"loudness_max":-8.836,"pitches":[0.604,0.816,0.237,0.225,0.442,0.668,0.731,0.885,1.000,0.894,0.672,0.033],"timbre":[46.471,-139.189,14.687,17.371,29.156,-27.573,36.269,-5.971,12.816,30.144,32.838,-9.245]},{"start":181.56345,"duration":0.13887,"confidence":0.115,"loudness_start":-16.748,"loudness_max_time":0.01649,"loudness_max":-11.185,"pitches":[0.533,1.000,0.123,0.047,0.032,0.129,0.061,0.343,0.979,0.210,0.121,0.126],"timbre":[44.165,-164.000,-5.757,34.717,39.720,-74.370,19.449,-5.808,4.458,23.439,-1.800,10.577]},{"start":181.70231,"duration":0.14032,"confidence":0.698,"loudness_start":-20.168,"loudness_max_time":0.01803,"loudness_max":-9.713,"pitches":[0.525,1.000,0.337,0.105,0.086,0.838,0.094,0.317,0.984,0.297,0.352,0.126],"timbre":[43.058,-84.289,-85.725,34.277,80.989,-88.086,-8.424,-30.841,-24.378,9.328,15.991,-0.154]},{"start":181.84263,"duration":0.14467,"confidence":0.804,"loudness_start":-22.644,"loudness_max_time":0.01709,"loudness_max":-12.365,"pitches":[0.389,0.785,0.250,0.057,0.028,0.232,0.139,0.514,1.000,0.220,0.060,0.096],"timbre":[43.610,-93.575,-32.605,11.479,-4.868,-54.295,-35.740,-7.867,-14.471,25.508,-15.332,7.861]},{"start":181.98730,"duration":0.11492,"confidence":0.736,"loudness_start":-21.505,"loudness_max_time":0.01357,"loudness_max":-8.522,"pitches":[1.000,0.576,0.104,0.099,0.096,0.194,0.328,0.330,0.816,0.691,0.867,0.079],"timbre":[43.450,-105.662,-54.092,50.380,-7.219,-84.160,-14.808,1.439,4.609,23.803,6.678,9.104]},{"start":182.10222,"duration":0.15401,"confidence":0.593,"loudness_start":-22.056,"loudness_max_time":0.03988,"loudness_max":-15.267,"pitches":[1.000,0.172,0.263,0.094,0.072,0.557,0.240,0.208,0.555,0.205,0.234,0.120],"timbre":[41.537,-130.502,-32.742,-25.294,20.487,-9.008,-6.566,-22.894,3.473,7.357,-8.366,-18.149]},{"start":182.25624,"duration":0.16531,"confidence":0.760,"loudness_start":-20.640,"loudness_max_time":0.03155,"loudness_max":-10.712,"pitches":[1.000,0.191,0.104,0.168,0.123,0.688,0.232,0.620,0.332,0.136,0.586,0.145],"timbre":[44.019,-65.983,-54.939,3.024,58.010,-15.121,16.585,-26.576,3.991,-21.135,13.050,-32.625]},{"start":182.42154,"duration":0.10454,"confidence":0.632,"loudness_start":-19.148,"loudness_max_time":0.01144,"loudness_max":-11.144,"pitches":[0.192,0.102,0.102,0.046,0.115,1.000,0.177,0.088,0.057,0.032,0.030,0.176],"timbre":[42.776,-173.404,-47.888,14.597,21.664,-89.867,-45.706,-15.444,-12.101,20.096,-13.004,1.376]},{"start":182.52608,"duration":0.30290,"confidence":1.000,"loudness_start":-22.019,"loudness_max_time":0.04125,"loudness_max":-5.459,"pitches":[0.091,0.044,0.028,0.051,0.093,1.000,0.151,0.051,0.063,0.029,0.244,0.044],"timbre":[47.609,-74.030,-20.518,-17.260,19.478,71.542,-22.311,18.169,10.048,-48.989,-26.059,10.223]},{"start":182.82898,"duration":0.10980,"confidence":0.944,"loudness_start":-20.590,"loudness_max_time":0.03447,"loudness_max":-6.390,"pitches":[1.000,0.217,0.087,0.054,0.090,0.346,0.188,0.804,0.148,0.116,0.562,0.305],"timbre":[48.466,-95.273,-7.473,11.181,58.141,5.391,48.834,-45.715,-11.597,8.224,20.679,-16.665]},{"start":182.93878,"duration":0.17202,"confidence":0.406,"loudness_start":-13.668,"loudness_max_time":0.05726,"loudness_max":-8.279,"pitches":[1.000,0.138,0.220,0.134,0.092,0.510,0.178,0.575,0.188,0.079,0.390,0.151],"timbre":[48.616,-102.423,46.587,-2.780,17.152,-23.304,26.637,1.741,17.836,-14.965,-15.020,-5.465]},{"start":183.11079,"duration":0.27474,"confidence":0.533,"loudness_start":-13.977,"loudness_max_time":0.02438,"loudness_max":-7.061,"pitches":[1.000,0.135,0.121,0.098,0.137,0.591,0.230,0.145,0.069,0.078,0.133,0.205],"timbre":[48.547,-95.357,10.032,44.000,7.898,-24.574,-7.998,-21.026,-15.463,-0.047,4.927,-12.559]},{"start":183.38553,"duration":0.15642,"confidence":0.591,"loudness_start":-18.084,"loudness_max_time":0.02985,"loudness_max":-9.263,"pitches":[1.000,0.717,0.391,0.053,0.037,0.170,0.070,0.061,0.070,0.214,0.221,0.145],"timbre":[45.110,-96.379,-62.297,13.965,57.573,-26.002,-7.836,-34.111,-25.051,-28.253,11.698,-32.032]},{"start":183.54195,"duration":0.11079,"confidence":0.302,"loudness_start":-19.596,"loudness_max_time":0.01364,"loudness_max":-14.600,"pitches":[0.765,1.000,0.180,0.059,0.044,0.078,0.057,0.116,0.063,0.092,0.099,0.159],"timbre":[41.641,-121.901,-44.968,7.444,4.343,-50.019,-29.041,-25.255,-9.802,0.239,-7.346,-18.613]},{"start":183.65274,"duration":0.30635,"confidence":0.985,"loudness_start":-22.528,"loudness_max_time":0.05043,"loudness_max":-7.761,"pitches":[0.293,0.501,1.000,0.276,0.072,0.137,0.154,0.257,0.102,0.083,0.031,0.204],"timbre":[45.548,-112.471,7.203,-33.769,47.481,33.322,38.992,7.175,8.417,5.052,-16.525,-9.469]},{"start":183.95909,"duration":0.14617,"confidence":0.622,"loudness_start":-17.121,"loudness_max_time":0.02639,"loudness_max":-9.319,"pitches":[0.225,0.912,1.000,0.067,0.037,0.609,0.096,0.189,0.060,0.245,0.392,0.040],"timbre":[44.337,-76.178,-53.043,37.803,81.381,-47.521,5.627,-36.548,-25.410,-7.994,19.688,-7.622]},{"start":184.10526,"duration":0.12816,"confidence":0.703,"loudness_start":-21.010,"loudness_max_time":0.02151,"loudness_max":-12.146,"pitches":[0.645,1.000,0.364,0.092,0.020,0.046,0.064,0.248,0.080,0.103,0.097,0.106],"timbre":[43.169,-50.912,-13.874,37.827,17.236,-45.504,-18.091,-10.778,-12.173,17.418,-9.470,-4.788]},{"start":184.23342,"duration":0.14454,"confidence":0.863,"loudness_start":-22.602,"loudness_max_time":0.03105,"loudness_max":-8.581,"pitches":[1.000,0.828,0.361,0.211,0.298,0.501,0.370,0.351,0.649,0.656,0.906,0.096],"timbre":[42.547,-107.226,-73.584,52.203,26.218,14.716,-0.300,5.781,-14.046,13.012,12.152,-0.769]},{"start":184.37796,"duration":0.10744,"confidence":0.631,"loudness_start":-24.052,"loudness_max_time":0.02974,"loudness_max":-16.290,"pitches":[1.000,0.329,0.964,0.273,0.215,0.773,0.448,0.501,0.334,0.400,0.399,0.106],"timbre":[39.222,-107.370,-82.508,-5.606,48.538,-28.920,8.583,-8.174,-11.440,5.849,-0.677,-24.070]},{"start":184.48540,"duration":0.16649,"confidence":0.895,"loudness_start":-24.316,"loudness_max_time":0.06834,"loudness_max":-11.252,"pitches":[0.530,0.321,1.000,0.095,0.170,0.933,0.202,0.323,0.064,0.182,0.060,0.055],"timbre":[41.382,-95.233,-42.493,-69.961,60.236,-10.534,24.085,12.343,5.449,-21.409,-54.536,-6.504]},{"start":184.65188,"duration":0.13787,"confidence":0.772,"loudness_start":-21.276,"loudness_max_time":0.03619,"loudness_max":-10.695,"pitches":[0.398,0.460,1.000,0.185,0.118,0.189,0.191,0.492,0.333,0.453,0.185,0.504],"timbre":[42.788,-91.148,-53.895,17.851,20.238,5.835,8.349,4.376,-9.456,-14.425,-22.058,-11.264]},{"start":184.78975,"duration":0.30862,"confidence":1.000,"loudness_start":-23.407,"loudness_max_time":0.04313,"loudness_max":-6.333,"pitches":[0.113,0.052,0.135,0.028,0.091,1.000,0.179,0.049,0.086,0.067,0.067,0.045],"timbre":[46.481,-17.538,-17.901,-12.342,3.128,67.847,9.498,22.319,-7.433,-25.773,-28.820,5.676]},{"start":185.09837,"duration":0.08980,"confidence":0.695,"loudness_start":-20.818,"loudness_max_time":0.01833,"loudness_max":-10.674,"pitches":[0.069,0.356,0.502,0.296,0.887,1.000,0.501,0.488,0.016,0.025,0.043,0.013],"timbre":[41.477,-58.110,-122.252,41.311,53.303,-72.183,-11.318,-34.849,-39.813,6.066,6.213,-3.856]},{"start":185.18816,"duration":0.17107,"confidence":0.796,"loudness_start":-24.505,"loudness_max_time":0.06115,"loudness_max":-13.729,"pitches":[0.118,0.124,0.581,0.363,0.232,0.330,0.288,1.000,0.308,0.235,0.066,0.081],"timbre":[39.269,-86.678,-67.276,-27.114,17.691,28.223,-9.717,-2.823,0.036,-15.395,-37.710,-8.992]},{"start":185.35923,"duration":0.30222,"confidence":1.000,"loudness_start":-25.529,"loudness_max_time":0.03942,"loudness_max":-7.477,"pitches":[0.320,0.227,0.435,0.266,0.292,1.000,0.386,0.093,0.115,0.111,0.057,0.315],"timbre":[44.771,-54.281,-7.467,22.361,-7.645,62.796,15.473,11.080,-23.396,-16.282,9.882,-9.996]},{"start":185.66145,"duration":0.11655,"confidence":0.885,"loudness_start":-23.972,"loudness_max_time":0.02251,"loudness_max":-9.531,"pitches":[0.454,1.000,0.881,0.146,0.100,0.372,0.136,0.085,0.133,0.276,0.417,0.104],"timbre":[44.877,-73.133,-61.344,22.423,45.788,-47.293,4.295,-48.141,-44.188,-17.247,21.217,-11.777]},{"start":185.77800,"duration":0.17864,"confidence":0.402,"loudness_start":-18.903,"loudness_max_time":0.04891,"loudness_max":-13.935,"pitches":[0.243,1.000,0.509,0.089,0.065,0.065,0.081,0.112,0.092,0.061,0.073,0.175],"timbre":[41.555,-114.069,-71.467,6.830,43.526,-29.482,-19.815,-0.171,-3.979,-14.690,-23.367,-12.261]},{"start":185.95664,"duration":0.12336,"confidence":0.864,"loudness_start":-23.597,"loudness_max_time":0.00471,"loudness_max":-11.004,"pitches":[1.000,0.831,0.221,0.126,0.101,0.212,0.282,0.264,0.541,0.572,0.824,0.025],"timbre":[40.174,-101.932,-96.862,32.857,-5.994,-118.679,-49.508,-14.553,-11.376,15.884,-14.652,-5.951]},{"start":186.08000,"duration":0.12018,"confidence":0.780,"loudness_start":-25.593,"loudness_max_time":0.02368,"loudness_max":-15.418,"pitches":[0.375,1.000,0.406,0.063,0.019,0.019,0.058,0.124,0.187,0.063,0.043,0.015],"timbre":[38.446,-82.615,-98.759,20.134,28.376,-36.344,-34.798,9.020,-23.432,-6.016,14.910,-16.788]},{"start":186.20018,"duration":0.12744,"confidence":0.976,"loudness_start":-27.348,"loudness_max_time":0.04910,"loudness_max":-11.763,"pitches":[0.645,1.000,0.311,0.070,0.063,0.148,0.076,0.041,0.080,0.265,0.173,0.058],"timbre":[40.424,-32.316,-81.046,-14.434,65.127,36.559,9.160,-4.075,-37.862,-32.183,-56.890,1.660]},{"start":186.32762,"duration":0.18023,"confidence":0.925,"loudness_start":-25.992,"loudness_max_time":0.06332,"loudness_max":-12.294,"pitches":[0.262,1.000,0.703,0.110,0.088,0.088,0.159,0.488,0.136,0.172,0.068,0.057],"timbre":[41.282,-46.594,-22.556,-33.984,22.888,40.997,-24.837,-18.380,-13.125,-10.789,-21.808,5.134]},{"start":186.50785,"duration":0.11129,"confidence":0.868,"loudness_start":-23.886,"loudness_max_time":0.02042,"loudness_max":-8.049,"pitches":[0.706,0.794,0.377,0.386,0.740,1.000,0.863,0.839,0.853,0.863,0.809,0.108],"timbre":[42.929,-104.273,-78.401,80.982,15.418,-44.285,-7.551,2.675,-12.181,33.883,1.310,5.088]},{"start":186.61914,"duration":0.15800,"confidence":0.684,"loudness_start":-25.531,"loudness_max_time":0.04820,"loudness_max":-16.388,"pitches":[1.000,0.475,0.673,0.093,0.127,0.830,0.300,0.360,0.148,0.296,0.155,0.187],"timbre":[37.843,-87.979,-96.429,-24.757,21.014,5.795,-11.353,9.096,-6.529,-17.179,-36.972,-1.481]},{"start":186.77714,"duration":0.11587,"confidence":1.000,"loudness_start":-27.446,"loudness_max_time":0.03531,"loudness_max":-11.634,"pitches":[0.953,0.413,0.368,0.191,0.195,1.000,0.316,0.097,0.275,0.681,0.880,0.196],"timbre":[40.736,-26.547,-108.568,7.443,48.169,32.294,15.469,-7.081,-17.532,-25.268,-16.459,-24.364]},{"start":186.89302,"duration":0.13732,"confidence":0.923,"loudness_start":-25.650,"loudness_max_time":0.05901,"loudness_max":-11.305,"pitches":[0.382,0.411,1.000,0.287,0.206,0.225,0.257,0.401,0.215,0.156,0.145,0.288],"timbre":[40.824,-94.692,-45.731,-80.211,10.287,26.112,-9.807,-7.056,-15.329,-2.755,-47.251,3.854]},{"start":187.03034,"duration":0.31456,"confidence":1.000,"loudness_start":-22.442,"loudness_max_time":0.06596,"loudness_max":-6.188,"pitches":[0.086,0.050,0.130,0.050,0.117,1.000,0.170,0.042,0.057,0.079,0.019,0.021],"timbre":[43.296,-28.226,-0.829,-90.757,-6.243,33.448,19.314,17.289,-17.886,-27.322,-50.208,7.361]},{"start":187.34490,"duration":0.12689,"confidence":0.852,"loudness_start":-21.944,"loudness_max_time":0.03689,"loudness_max":-8.938,"pitches":[0.310,0.203,0.269,0.105,0.183,1.000,0.179,0.108,0.116,0.275,0.393,0.130],"timbre":[42.493,-36.687,-93.555,25.195,39.720,28.794,9.912,-17.612,-32.626,-16.704,-27.963,-15.274]},{"start":187.47179,"duration":0.15265,"confidence":0.801,"loudness_start":-24.338,"loudness_max_time":0.04502,"loudness_max":-13.377,"pitches":[0.859,0.341,1.000,0.085,0.069,0.226,0.139,0.446,0.218,0.273,0.083,0.279],"timbre":[40.689,-81.638,-71.182,13.930,2.912,17.752,-15.344,-13.957,-9.917,8.896,-17.181,-5.731]},{"start":187.62444,"duration":0.29887,"confidence":1.000,"loudness_start":-24.613,"loudness_max_time":0.04079,"loudness_max":-7.779,"pitches":[0.613,0.375,0.324,0.347,0.329,1.000,0.423,0.153,0.092,0.112,0.114,0.491],"timbre":[44.238,-61.298,-12.050,14.711,-2.132,67.678,21.592,7.975,-24.869,-22.892,4.885,-11.163]},{"start":187.92331,"duration":0.13488,"confidence":0.793,"loudness_start":-23.236,"loudness_max_time":0.02057,"loudness_max":-10.341,"pitches":[0.502,1.000,0.449,0.093,0.095,0.299,0.101,0.095,0.132,0.191,0.082,0.122],"timbre":[44.460,-66.193,-59.975,14.948,53.217,-53.289,3.885,-45.620,-25.496,-20.194,4.026,-22.422]},{"start":188.05819,"duration":0.14975,"confidence":0.569,"loudness_start":-20.230,"loudness_max_time":0.03000,"loudness_max":-13.183,"pitches":[0.214,1.000,0.368,0.052,0.044,0.037,0.063,0.107,0.050,0.043,0.041,0.103],"timbre":[42.341,-105.192,-59.853,30.707,43.941,-56.311,-10.742,-15.773,11.065,1.599,-22.715,-9.921]},{"start":188.20794,"duration":0.11374,"confidence":0.797,"loudness_start":-23.260,"loudness_max_time":0.02362,"loudness_max":-12.291,"pitches":[0.827,0.435,0.332,0.309,0.383,0.479,0.527,0.494,0.821,0.839,1.000,0.038],"timbre":[40.793,-106.089,-80.467,49.476,13.167,-51.003,-10.594,-11.587,-17.267,21.743,2.357,-0.218]},{"start":188.32168,"duration":0.12966,"confidence":0.753,"loudness_start":-25.111,"loudness_max_time":0.05130,"loudness_max":-15.283,"pitches":[0.515,1.000,0.281,0.056,0.040,0.056,0.055,0.082,0.127,0.072,0.066,0.098],"timbre":[39.222,-71.601,-69.902,-26.869,19.357,16.167,-15.839,-0.442,-9.181,-21.703,-41.891,-8.060]},{"start":188.45134,"duration":0.17678,"confidence":0.944,"loudness_start":-25.952,"loudness_max_time":0.06144,"loudness_max":-12.192,"pitches":[0.329,1.000,0.451,0.052,0.071,0.565,0.125,0.042,0.043,0.166,0.253,0.022],"timbre":[38.023,-55.758,-92.973,-63.784,67.302,26.384,-17.788,8.631,-16.526,-36.765,-58.520,-9.507]},{"start":188.62812,"duration":0.14898,"confidence":0.973,"loudness_start":-26.469,"loudness_max_time":0.02797,"loudness_max":-12.379,"pitches":[0.313,1.000,0.518,0.058,0.017,0.031,0.083,0.453,0.143,0.278,0.072,0.046],"timbre":[42.435,-55.645,-22.867,30.640,2.529,-18.389,-27.020,-12.153,-22.698,33.834,2.998,7.639]},{"start":188.77710,"duration":0.11311,"confidence":0.838,"loudness_start":-23.206,"loudness_max_time":0.01532,"loudness_max":-8.253,"pitches":[0.421,0.451,0.386,0.363,0.716,0.793,0.935,0.938,0.973,1.000,0.693,0.066],"timbre":[42.243,-95.838,-71.943,83.759,-1.314,-87.133,-2.028,2.826,-6.176,24.580,-6.656,6.037]},{"start":188.89020,"duration":0.13596,"confidence":0.635,"loudness_start":-26.112,"loudness_max_time":0.04134,"loudness_max":-16.251,"pitches":[0.487,0.280,0.322,0.257,0.244,1.000,0.564,0.512,0.242,0.236,0.256,0.095],"timbre":[38.726,-57.262,-87.702,5.958,0.842,-21.211,-16.333,-4.584,-5.176,-15.340,-48.270,3.893]},{"start":189.02617,"duration":0.13166,"confidence":1.000,"loudness_start":-27.255,"loudness_max_time":0.05448,"loudness_max":-10.404,"pitches":[0.487,0.378,0.898,0.141,0.238,1.000,0.196,0.114,0.168,0.340,0.495,0.142],"timbre":[41.338,-49.425,-86.764,-39.312,49.600,60.534,8.406,11.660,-10.681,-44.568,-47.692,-16.563]},{"start":189.15782,"duration":0.16009,"confidence":0.920,"loudness_start":-25.587,"loudness_max_time":0.05834,"loudness_max":-11.873,"pitches":[1.000,0.774,0.934,0.324,0.302,0.339,0.286,0.562,0.337,0.384,0.226,0.538],"timbre":[39.632,-94.533,-56.280,-70.739,19.533,29.965,7.087,-1.703,-10.880,-7.316,-51.287,-3.544]},{"start":189.31791,"duration":0.30880,"confidence":1.000,"loudness_start":-23.433,"loudness_max_time":0.04211,"loudness_max":-5.106,"pitches":[0.044,0.042,0.106,0.055,0.103,1.000,0.174,0.085,0.098,0.051,0.035,0.024],"timbre":[46.485,-21.651,-24.774,-9.832,6.521,76.543,2.444,20.660,-10.484,-35.316,-31.105,9.289]},{"start":189.62671,"duration":0.11315,"confidence":0.611,"loudness_start":-21.321,"loudness_max_time":0.01853,"loudness_max":-11.844,"pitches":[0.662,0.243,1.000,0.133,0.106,0.388,0.138,0.098,0.064,0.110,0.037,0.110],"timbre":[40.918,-39.603,-121.586,36.756,41.137,-71.326,-19.691,-33.365,-31.142,3.427,4.075,-17.345]},{"start":189.73986,"duration":0.11683,"confidence":0.809,"loudness_start":-25.529,"loudness_max_time":0.03791,"loudness_max":-13.588,"pitches":[0.152,0.353,1.000,0.468,0.238,0.346,0.336,0.496,0.235,0.321,0.104,0.145],"timbre":[40.557,-86.394,-56.672,24.783,-8.409,-1.912,-14.501,-25.181,-20.647,10.629,-3.720,1.012]},{"start":189.85669,"duration":0.33156,"confidence":1.000,"loudness_start":-23.893,"loudness_max_time":0.06990,"loudness_max":-6.064,"pitches":[1.000,0.556,0.511,0.440,0.355,0.971,0.414,0.150,0.176,0.197,0.247,0.815],"timbre":[41.538,-103.594,-8.352,-90.804,16.753,30.089,-2.776,18.477,-11.658,-26.636,-30.594,0.277]},{"start":190.18825,"duration":0.15143,"confidence":0.830,"loudness_start":-22.117,"loudness_max_time":0.01968,"loudness_max":-9.214,"pitches":[0.246,1.000,0.654,0.087,0.035,0.152,0.070,0.050,0.077,0.163,0.171,0.071],"timbre":[44.555,-65.388,-64.090,26.788,56.579,-61.780,9.911,-49.976,-31.309,-11.992,18.804,-26.939]},{"start":190.33968,"duration":0.13084,"confidence":0.362,"loudness_start":-19.293,"loudness_max_time":0.00844,"loudness_max":-15.330,"pitches":[0.360,1.000,0.276,0.080,0.059,0.064,0.094,0.067,0.043,0.103,0.061,0.189],"timbre":[40.810,-120.205,-56.259,2.768,43.524,-88.119,-7.925,5.442,-12.327,12.706,-2.700,-18.055]},{"start":190.47052,"duration":0.13669,"confidence":0.841,"loudness_start":-23.142,"loudness_max_time":0.01701,"loudness_max":-11.258,"pitches":[0.359,0.726,0.440,0.391,0.757,0.803,0.976,0.961,0.964,1.000,0.674,0.035],"timbre":[41.098,-57.595,-95.211,49.782,-7.215,-55.745,-39.414,3.600,0.466,-2.104,-11.223,0.517]},{"start":190.60721,"duration":0.12168,"confidence":0.826,"loudness_start":-27.837,"loudness_max_time":0.03317,"loudness_max":-15.384,"pitches":[0.450,1.000,0.212,0.079,0.033,0.035,0.047,0.068,0.154,0.139,0.094,0.013],"timbre":[39.195,-52.733,-87.751,34.419,17.132,-44.901,-36.031,0.160,-4.897,-2.951,-25.206,-2.242]},{"start":190.72889,"duration":0.13841,"confidence":1.000,"loudness_start":-27.244,"loudness_max_time":0.05397,"loudness_max":-10.134,"pitches":[0.486,1.000,0.540,0.101,0.060,0.232,0.138,0.066,0.071,0.173,0.299,0.060],"timbre":[40.364,-44.270,-80.826,-50.720,77.672,59.306,-0.993,2.236,-27.440,-36.174,-53.373,-7.394]},{"start":190.86730,"duration":0.16753,"confidence":0.931,"loudness_start":-25.812,"loudness_max_time":0.05442,"loudness_max":-12.012,"pitches":[0.673,1.000,0.389,0.083,0.066,0.086,0.133,0.588,0.185,0.270,0.084,0.151],"timbre":[41.383,-50.212,-25.818,-21.957,23.544,50.189,-23.010,-24.619,-20.877,8.240,-19.000,-0.859]},{"start":191.03483,"duration":0.11247,"confidence":0.874,"loudness_start":-22.805,"loudness_max_time":0.02333,"loudness_max":-8.253,"pitches":[0.680,0.637,0.384,0.324,0.632,0.745,0.847,0.826,0.970,1.000,0.847,0.038],"timbre":[42.857,-105.704,-90.701,78.557,16.884,-24.730,-5.498,-0.171,-9.028,21.767,10.565,7.664]},{"start":191.14730,"duration":0.13546,"confidence":0.711,"loudness_start":-25.481,"loudness_max_time":0.05524,"loudness_max":-16.054,"pitches":[0.605,0.330,0.884,0.338,0.230,1.000,0.422,0.308,0.357,0.561,0.442,0.080],"timbre":[37.950,-92.614,-88.577,-52.314,32.927,9.286,-9.738,17.420,-6.438,-25.057,-44.189,-7.559]},{"start":191.28277,"duration":0.13896,"confidence":0.983,"loudness_start":-27.383,"loudness_max_time":0.06168,"loudness_max":-11.212,"pitches":[0.619,0.338,1.000,0.186,0.203,0.596,0.256,0.125,0.077,0.201,0.057,0.162],"timbre":[40.102,-55.258,-83.716,-62.398,47.811,34.976,15.917,20.172,-27.408,-39.998,-55.970,3.106]},{"start":191.42172,"duration":0.15986,"confidence":0.923,"loudness_start":-25.871,"loudness_max_time":0.06091,"loudness_max":-11.863,"pitches":[0.805,0.698,0.539,0.384,0.311,0.376,0.296,1.000,0.477,0.444,0.289,0.761],"timbre":[40.197,-63.674,-63.399,-54.537,14.543,31.508,9.104,0.096,-20.583,-6.665,-39.326,1.551]},{"start":191.58159,"duration":0.31429,"confidence":1.000,"loudness_start":-24.360,"loudness_max_time":0.04322,"loudness_max":-5.033,"pitches":[0.119,0.072,0.160,0.029,0.085,1.000,0.169,0.064,0.100,0.048,0.052,0.048],"timbre":[46.313,-3.393,-21.139,-21.200,2.408,88.061,12.488,17.655,-19.669,-11.621,-36.180,5.183]},{"start":191.89587,"duration":0.13052,"confidence":0.737,"loudness_start":-20.061,"loudness_max_time":0.01306,"loudness_max":-10.002,"pitches":[0.183,0.156,1.000,0.085,0.069,0.823,0.137,0.037,0.083,0.305,0.256,0.071],"timbre":[42.384,-56.085,-95.105,24.825,39.829,-112.538,-24.396,-27.383,-38.173,15.008,12.130,-5.355]},{"start":192.02639,"duration":0.10236,"confidence":0.729,"loudness_start":-23.415,"loudness_max_time":0.01646,"loudness_max":-13.561,"pitches":[0.122,0.268,0.674,0.220,0.126,0.189,0.376,1.000,0.243,0.092,0.051,0.071],"timbre":[39.365,-81.109,-57.093,36.316,-16.911,-94.593,-29.970,16.410,-22.773,20.569,-8.056,-1.828]},{"start":192.12875,"duration":0.31175,"confidence":1.000,"loudness_start":-26.851,"loudness_max_time":0.05964,"loudness_max":-6.554,"pitches":[0.951,0.606,0.418,0.472,0.402,1.000,0.570,0.198,0.412,0.160,0.141,0.702],"timbre":[41.699,-68.031,9.595,-75.691,5.574,35.864,22.944,5.527,-22.791,-8.178,-46.617,-3.438]},{"start":192.44050,"duration":0.09814,"confidence":0.869,"loudness_start":-20.980,"loudness_max_time":0.03408,"loudness_max":-8.656,"pitches":[0.585,0.578,0.457,0.391,0.226,0.688,0.318,0.432,1.000,0.335,0.349,0.489],"timbre":[45.501,-72.549,-60.568,13.811,63.435,-7.767,7.568,-16.677,-22.580,-37.738,12.262,-21.274]},{"start":192.53864,"duration":0.16399,"confidence":0.518,"loudness_start":-19.095,"loudness_max_time":0.07293,"loudness_max":-13.207,"pitches":[0.331,1.000,0.242,0.063,0.057,0.066,0.063,0.168,0.382,0.067,0.065,0.201],"timbre":[42.268,-131.619,-32.639,-35.741,53.038,-20.534,4.665,10.435,1.836,-9.796,-37.354,-16.399]},{"start":192.70263,"duration":0.14054,"confidence":0.792,"loudness_start":-22.145,"loudness_max_time":0.04937,"loudness_max":-11.252,"pitches":[0.637,0.695,0.385,0.398,0.636,0.713,0.887,0.848,1.000,0.993,0.819,0.086],"timbre":[41.540,-97.591,-64.451,-9.713,33.780,20.604,-7.886,23.459,6.520,-34.866,-57.235,-18.630]},{"start":192.84317,"duration":0.14971,"confidence":0.743,"loudness_start":-26.601,"loudness_max_time":0.06138,"loudness_max":-17.034,"pitches":[0.210,1.000,0.270,0.085,0.031,0.024,0.065,0.066,0.400,0.081,0.082,0.026],"timbre":[37.586,-79.774,-76.246,-54.420,32.408,5.302,-2.331,5.787,-16.182,-9.655,-38.368,-5.630]},{"start":192.99288,"duration":0.14458,"confidence":0.916,"loudness_start":-25.128,"loudness_max_time":0.04812,"loudness_max":-12.381,"pitches":[0.500,1.000,0.219,0.067,0.075,0.181,0.081,0.134,0.401,0.150,0.153,0.048],"timbre":[41.022,-27.922,-72.640,-25.004,60.826,23.689,21.163,2.338,-15.213,-43.558,-22.708,-6.120]},{"start":193.13746,"duration":0.16893,"confidence":0.891,"loudness_start":-23.565,"loudness_max_time":0.04898,"loudness_max":-11.829,"pitches":[0.295,1.000,0.571,0.174,0.051,0.069,0.071,0.292,0.187,0.133,0.055,0.071],"timbre":[43.012,-49.726,-15.717,10.811,31.957,29.697,0.515,-19.671,-8.013,0.892,-8.853,-9.323]},{"start":193.30639,"duration":0.09918,"confidence":0.831,"loudness_start":-21.551,"loudness_max_time":0.01599,"loudness_max":-8.304,"pitches":[1.000,0.757,0.205,0.193,0.352,0.393,0.573,0.627,0.955,0.855,0.998,0.065],"timbre":[43.021,-117.144,-74.654,77.804,19.100,-81.271,3.853,-1.362,-11.718,21.108,-3.730,5.041]},{"start":193.40558,"duration":0.13048,"confidence":0.632,"loudness_start":-24.448,"loudness_max_time":0.05932,"loudness_max":-16.165,"pitches":[0.929,0.711,0.342,0.243,0.173,0.926,0.372,0.508,1.000,0.311,0.503,0.286],"timbre":[39.816,-84.039,-76.950,-44.788,27.265,-6.662,2.568,19.092,-4.088,-28.509,-24.923,-10.502]},{"start":193.53605,"duration":0.13710,"confidence":0.927,"loudness_start":-24.667,"loudness_max_time":0.07302,"loudness_max":-11.683,"pitches":[0.802,0.520,0.152,0.608,0.282,1.000,0.369,0.167,0.747,0.304,0.460,0.235],"timbre":[40.793,-70.645,-55.184,-99.759,65.677,7.421,20.293,42.504,0.901,-34.432,-44.299,-14.700]},{"start":193.67315,"duration":0.16712,"confidence":0.827,"loudness_start":-23.972,"loudness_max_time":0.07095,"loudness_max":-12.236,"pitches":[0.765,0.701,0.989,0.555,0.314,0.447,0.505,1.000,0.934,0.194,0.240,0.639],"timbre":[40.079,-108.990,-43.869,-70.738,47.875,-5.652,27.618,16.071,-7.945,-0.592,-39.242,-9.877]},{"start":193.84027,"duration":0.30363,"confidence":1.000,"loudness_start":-23.530,"loudness_max_time":0.06646,"loudness_max":-2.982,"pitches":[0.084,0.055,0.069,0.063,0.114,1.000,0.185,0.081,0.128,0.026,0.019,0.024],"timbre":[46.706,1.784,3.893,-39.246,4.584,69.120,26.341,32.959,-2.923,-43.915,-47.570,-10.058]},{"start":194.14390,"duration":0.12531,"confidence":0.714,"loudness_start":-19.789,"loudness_max_time":0.02966,"loudness_max":-9.608,"pitches":[0.201,0.065,0.028,0.096,0.103,0.985,0.182,0.361,1.000,0.246,0.300,0.066],"timbre":[42.546,-48.027,-107.223,41.913,47.076,-17.522,-0.050,-19.636,-29.356,-12.022,-1.291,-14.435]},{"start":194.26921,"duration":0.13451,"confidence":0.805,"loudness_start":-24.230,"loudness_max_time":0.04236,"loudness_max":-13.188,"pitches":[0.636,0.261,0.116,0.083,0.051,0.132,0.074,0.713,1.000,0.118,0.046,0.194],"timbre":[40.277,-78.773,-78.909,25.381,1.384,13.229,-10.959,-12.264,-6.936,6.366,-11.912,-1.504]},{"start":194.40372,"duration":0.31896,"confidence":1.000,"loudness_start":-26.012,"loudness_max_time":0.04857,"loudness_max":-6.640,"pitches":[0.424,0.320,0.301,0.373,0.299,1.000,0.454,0.219,0.676,0.094,0.137,0.328],"timbre":[43.413,-77.665,-9.786,-29.994,13.063,77.467,17.832,13.656,-21.350,-26.739,-23.143,-11.829]},{"start":194.72268,"duration":0.10980,"confidence":0.718,"loudness_start":-21.380,"loudness_max_time":0.01451,"loudness_max":-10.697,"pitches":[0.609,1.000,0.332,0.193,0.113,0.283,0.164,0.347,0.695,0.272,0.174,0.108],"timbre":[43.865,-73.919,-61.486,12.433,50.238,-78.824,11.514,-53.421,-44.156,1.121,2.574,-26.810]},{"start":194.83247,"duration":0.13941,"confidence":0.517,"loudness_start":-19.798,"loudness_max_time":0.04041,"loudness_max":-13.781,"pitches":[0.401,1.000,0.273,0.182,0.070,0.087,0.122,0.222,0.230,0.070,0.099,0.175],"timbre":[42.253,-115.144,-55.815,4.325,61.997,-24.776,3.520,-2.040,-2.076,-20.324,-33.903,-24.482]},{"start":194.97188,"duration":0.13678,"confidence":0.897,"loudness_start":-23.317,"loudness_max_time":0.05045,"loudness_max":-10.396,"pitches":[0.685,0.444,0.200,0.214,0.398,0.513,0.636,0.640,1.000,0.918,0.952,0.050],"timbre":[41.488,-92.223,-75.725,-5.496,22.412,42.144,-0.474,15.208,-3.656,-22.067,-57.131,-1.343]},{"start":195.10866,"duration":0.15401,"confidence":0.828,"loudness_start":-27.256,"loudness_max_time":0.05156,"loudness_max":-14.482,"pitches":[0.370,1.000,0.140,0.063,0.021,0.030,0.029,0.188,0.576,0.098,0.105,0.070],"timbre":[39.394,-72.942,-82.720,-24.245,26.700,11.530,-11.450,9.431,-15.377,-6.685,-21.936,-2.400]},{"start":195.26268,"duration":0.13293,"confidence":0.958,"loudness_start":-25.100,"loudness_max_time":0.04243,"loudness_max":-10.373,"pitches":[0.499,1.000,0.208,0.120,0.048,0.435,0.133,0.080,0.188,0.108,0.225,0.056],"timbre":[41.333,-45.035,-86.560,2.889,78.016,31.860,8.997,-5.244,-19.387,-28.886,-21.332,-7.796]},{"start":195.39560,"duration":0.16862,"confidence":0.882,"loudness_start":-24.018,"loudness_max_time":0.05277,"loudness_max":-12.308,"pitches":[0.296,1.000,0.621,0.153,0.036,0.059,0.123,0.655,0.735,0.189,0.073,0.067],"timbre":[41.918,-67.254,-23.103,-13.124,27.552,27.398,0.345,-12.167,-0.856,-1.499,-22.553,-2.768]},{"start":195.56422,"duration":0.11791,"confidence":0.869,"loudness_start":-23.769,"loudness_max_time":0.02315,"loudness_max":-8.285,"pitches":[1.000,0.782,0.153,0.125,0.120,0.229,0.245,0.233,0.684,0.622,0.914,0.092],"timbre":[43.083,-95.537,-80.281,83.708,8.587,-39.776,-2.828,-2.114,-6.655,17.622,1.859,3.926]},{"start":195.68213,"duration":0.14649,"confidence":0.762,"loudness_start":-25.315,"loudness_max_time":0.04755,"loudness_max":-15.617,"pitches":[0.510,0.240,0.478,0.274,0.204,1.000,0.417,0.392,0.404,0.217,0.362,0.109],"timbre":[39.730,-80.499,-72.050,5.252,13.255,3.125,14.020,2.064,1.190,-14.821,-7.161,5.756]},{"start":195.82862,"duration":0.13197,"confidence":1.000,"loudness_start":-25.144,"loudness_max_time":0.05009,"loudness_max":-9.927,"pitches":[0.201,0.077,0.096,0.127,0.113,0.822,0.198,0.297,1.000,0.184,0.246,0.055],"timbre":[41.934,-56.814,-98.272,-14.557,59.065,47.075,25.382,-4.896,-20.397,-42.148,-35.021,-1.597]},{"start":195.96059,"duration":0.14889,"confidence":0.862,"loudness_start":-25.059,"loudness_max_time":0.05195,"loudness_max":-11.888,"pitches":[0.685,0.601,0.570,0.289,0.274,0.316,0.292,0.784,1.000,0.221,0.136,0.514],"timbre":[40.810,-88.430,-61.188,-39.962,10.664,29.845,1.119,-9.980,-20.950,4.797,-41.460,-0.249]},{"start":196.10948,"duration":0.31501,"confidence":1.000,"loudness_start":-23.051,"loudness_max_time":0.04322,"loudness_max":-5.484,"pitches":[0.050,0.046,0.064,0.092,0.121,1.000,0.176,0.087,0.325,0.022,0.052,0.018],"timbre":[46.548,-30.617,-19.879,-19.486,15.397,66.713,9.259,14.915,-11.944,-18.594,-35.232,3.485]},{"start":196.42449,"duration":0.10721,"confidence":0.614,"loudness_start":-19.772,"loudness_max_time":0.01234,"loudness_max":-10.284,"pitches":[0.560,0.149,0.076,0.241,0.064,0.328,0.115,0.466,1.000,0.182,0.023,0.137],"timbre":[41.969,-54.051,-94.166,34.105,46.261,-113.450,3.269,-35.658,-35.558,19.649,-0.189,-6.926]},{"start":196.53170,"duration":0.13624,"confidence":0.760,"loudness_start":-23.498,"loudness_max_time":0.03889,"loudness_max":-13.584,"pitches":[0.091,0.180,0.572,0.346,0.042,0.206,0.215,1.000,0.806,0.149,0.051,0.074],"timbre":[40.921,-81.430,-55.856,33.860,9.490,-13.836,-12.461,-8.566,-14.377,20.833,-22.544,-7.126]},{"start":196.66794,"duration":0.31116,"confidence":1.000,"loudness_start":-25.627,"loudness_max_time":0.05050,"loudness_max":-6.415,"pitches":[0.393,0.319,0.213,0.287,0.313,1.000,0.429,0.200,0.606,0.107,0.184,0.354],"timbre":[43.238,-71.630,-12.309,-36.282,7.245,80.265,22.557,18.751,-22.475,-23.020,-24.857,-3.984]},{"start":196.97909,"duration":0.15302,"confidence":0.831,"loudness_start":-23.014,"loudness_max_time":0.02134,"loudness_max":-9.664,"pitches":[0.267,1.000,0.325,0.175,0.044,0.247,0.083,0.089,0.328,0.185,0.192,0.089],"timbre":[44.349,-70.083,-59.894,24.901,63.813,-63.514,16.916,-50.757,-31.825,-10.523,14.285,-25.738]},{"start":197.13211,"duration":0.13256,"confidence":0.400,"loudness_start":-19.676,"loudness_max_time":0.00748,"loudness_max":-14.130,"pitches":[0.339,1.000,0.214,0.111,0.032,0.039,0.077,0.198,0.287,0.048,0.044,0.087],"timbre":[41.576,-132.934,-42.488,-6.389,46.617,-85.821,1.310,-0.936,-3.709,5.619,-5.764,-21.052]},{"start":197.26467,"duration":0.10698,"confidence":0.664,"loudness_start":-22.220,"loudness_max_time":0.01937,"loudness_max":-12.387,"pitches":[0.935,0.440,0.100,0.125,0.153,0.185,0.401,0.405,0.827,0.792,1.000,0.026],"timbre":[40.452,-88.898,-99.874,44.731,1.977,-55.039,-14.117,-19.540,-6.092,17.292,-0.287,-13.027]},{"start":197.37166,"duration":0.16195,"confidence":0.785,"loudness_start":-25.819,"loudness_max_time":0.05218,"loudness_max":-15.345,"pitches":[0.164,1.000,0.260,0.105,0.020,0.036,0.050,0.064,0.336,0.072,0.065,0.014],"timbre":[38.883,-95.717,-55.845,-32.736,38.168,8.800,0.540,-2.213,-12.621,-8.191,-33.174,-16.990]},{"start":197.53361,"duration":0.12449,"confidence":0.961,"loudness_start":-24.345,"loudness_max_time":0.03798,"loudness_max":-10.004,"pitches":[0.495,1.000,0.256,0.206,0.087,0.441,0.099,0.095,0.488,0.167,0.296,0.057],"timbre":[42.258,-52.917,-74.653,18.791,68.182,28.910,14.645,-24.816,-19.881,-31.291,-18.390,-14.693]},{"start":197.65810,"duration":0.16363,"confidence":0.829,"loudness_start":-23.873,"loudness_max_time":0.05349,"loudness_max":-12.911,"pitches":[0.698,1.000,0.381,0.150,0.050,0.052,0.069,0.236,0.475,0.136,0.054,0.184],"timbre":[41.842,-59.479,-20.250,-18.729,12.559,29.401,-1.432,-23.414,-3.086,-3.536,-18.179,-8.650]},{"start":197.82172,"duration":0.12390,"confidence":0.859,"loudness_start":-22.878,"loudness_max_time":0.02857,"loudness_max":-8.301,"pitches":[1.000,0.970,0.384,0.387,0.582,0.704,0.639,0.624,0.782,0.769,0.938,0.142],"timbre":[43.142,-98.494,-62.890,68.073,18.226,4.786,23.088,0.236,-4.645,17.573,7.712,-1.232]},{"start":197.94562,"duration":0.15007,"confidence":0.547,"loudness_start":-23.703,"loudness_max_time":0.04603,"loudness_max":-16.930,"pitches":[0.342,0.182,0.279,0.233,0.103,0.666,0.215,0.343,1.000,0.189,0.170,0.066],"timbre":[38.251,-98.792,-81.836,-12.771,17.247,-11.695,6.829,8.850,-5.414,-15.921,-31.949,12.099]},{"start":198.09569,"duration":0.14054,"confidence":0.971,"loudness_start":-27.771,"loudness_max_time":0.03961,"loudness_max":-12.570,"pitches":[0.398,0.135,0.105,0.119,0.128,0.513,0.193,0.355,1.000,0.146,0.036,0.100],"timbre":[40.958,-26.014,-100.622,-1.933,33.737,18.692,11.498,0.361,-14.320,-34.751,-12.867,-13.937]},{"start":198.23624,"duration":0.13692,"confidence":0.895,"loudness_start":-26.040,"loudness_max_time":0.03757,"loudness_max":-12.623,"pitches":[0.541,0.577,1.000,0.391,0.280,0.267,0.351,0.621,0.692,0.286,0.166,0.621],"timbre":[41.881,-75.733,-62.116,7.003,7.440,18.322,2.678,-5.022,-20.550,8.320,-16.244,1.158]},{"start":198.37315,"duration":0.30499,"confidence":1.000,"loudness_start":-23.524,"loudness_max_time":0.04383,"loudness_max":-5.393,"pitches":[0.120,0.069,0.040,0.072,0.120,1.000,0.179,0.092,0.381,0.044,0.079,0.048],"timbre":[46.815,-13.664,-18.790,-34.235,15.758,79.573,13.532,12.568,-5.543,-17.711,-38.521,2.487]},{"start":198.67814,"duration":0.13701,"confidence":0.615,"loudness_start":-20.345,"loudness_max_time":0.02265,"loudness_max":-10.254,"pitches":[0.211,0.057,0.069,0.305,0.060,0.917,0.138,0.274,1.000,0.152,0.272,0.090],"timbre":[42.043,-52.238,-117.018,35.117,54.367,-46.137,-10.023,-28.036,-31.357,-5.587,17.348,-22.899]},{"start":198.81515,"duration":0.10553,"confidence":0.734,"loudness_start":-24.353,"loudness_max_time":0.01921,"loudness_max":-13.751,"pitches":[0.084,0.167,0.450,0.188,0.117,0.156,0.225,0.818,1.000,0.208,0.032,0.051],"timbre":[39.906,-95.548,-66.542,37.616,-11.013,-65.322,-26.058,0.054,-26.659,26.958,-15.165,2.506]},{"start":198.92068,"duration":0.32408,"confidence":1.000,"loudness_start":-26.658,"loudness_max_time":0.06320,"loudness_max":-7.121,"pitches":[0.817,0.497,0.334,0.503,0.445,1.000,0.491,0.210,0.342,0.163,0.106,0.717],"timbre":[41.432,-71.359,-0.997,-68.993,4.656,49.492,27.457,13.979,-23.426,-16.440,-30.310,-0.180]},{"start":199.24476,"duration":0.15134,"confidence":0.874,"loudness_start":-23.121,"loudness_max_time":0.02098,"loudness_max":-8.670,"pitches":[0.233,1.000,0.295,0.128,0.029,0.240,0.078,0.068,0.498,0.225,0.262,0.072],"timbre":[44.696,-72.697,-65.597,36.641,55.562,-56.596,11.563,-45.237,-28.527,-14.736,19.107,-31.995]},{"start":199.39610,"duration":0.11927,"confidence":0.536,"loudness_start":-20.201,"loudness_max_time":0.00655,"loudness_max":-14.317,"pitches":[0.584,1.000,0.328,0.163,0.082,0.090,0.089,0.118,0.232,0.095,0.062,0.239],"timbre":[41.630,-137.140,-50.119,20.181,50.702,-84.514,1.152,-9.220,-2.887,22.562,-9.997,-18.259]},{"start":199.51537,"duration":0.16154,"confidence":0.804,"loudness_start":-22.597,"loudness_max_time":0.02927,"loudness_max":-11.361,"pitches":[1.000,0.686,0.200,0.211,0.210,0.364,0.294,0.290,0.671,0.552,0.885,0.034],"timbre":[41.251,-91.739,-76.227,44.086,12.804,-13.746,-10.308,1.110,-4.449,-0.355,11.248,-10.651]},{"start":199.67692,"duration":0.08735,"confidence":0.655,"loudness_start":-25.897,"loudness_max_time":0.01175,"loudness_max":-16.072,"pitches":[0.561,1.000,0.954,0.877,0.267,0.268,0.037,0.057,0.137,0.042,0.530,0.531],"timbre":[37.810,-83.841,-80.483,24.511,17.782,-83.256,-14.709,11.599,-24.303,-2.405,9.897,-7.675]},{"start":199.76426,"duration":0.16385,"confidence":0.838,"loudness_start":-28.210,"loudness_max_time":0.06959,"loudness_max":-13.853,"pitches":[0.398,1.000,0.230,0.142,0.051,0.174,0.050,0.103,0.486,0.134,0.101,0.019],"timbre":[38.153,-43.432,-84.699,-57.696,52.307,-14.208,-7.349,13.116,-18.716,-26.640,-61.688,4.235]},{"start":199.92812,"duration":0.17079,"confidence":1.000,"loudness_start":-26.834,"loudness_max_time":0.05215,"loudness_max":-12.603,"pitches":[0.296,1.000,0.359,0.215,0.036,0.052,0.077,0.549,0.739,0.202,0.054,0.066],"timbre":[41.341,-56.960,-27.181,-16.203,31.575,61.165,-13.346,-26.746,-11.066,14.591,-11.831,-2.595]},{"start":200.09891,"duration":0.10630,"confidence":0.662,"loudness_start":-23.697,"loudness_max_time":0.01313,"loudness_max":-10.917,"pitches":[0.287,0.679,0.415,0.418,0.698,0.753,0.905,0.953,1.000,0.846,0.448,0.018],"timbre":[40.188,-108.920,-104.239,75.257,-9.649,-60.830,-37.061,-48.836,-8.453,10.392,-19.072,-10.135]},{"start":200.20522,"duration":0.39025,"confidence":0.545,"loudness_start":-28.667,"loudness_max_time":0.05961,"loudness_max":-21.520,"pitches":[0.027,0.121,1.000,0.304,0.036,0.018,0.010,0.041,0.371,0.034,0.009,0.021],"timbre":[33.926,-144.825,-89.820,-11.193,55.757,-33.412,11.206,14.166,-2.711,-15.923,-34.871,-6.123]},{"start":200.59546,"duration":0.18757,"confidence":0.260,"loudness_start":-32.145,"loudness_max_time":0.03778,"loudness_max":-28.640,"pitches":[0.050,0.595,1.000,0.651,0.149,0.014,0.007,0.067,0.539,0.072,0.011,0.019],"timbre":[28.656,-157.625,-72.991,-8.329,46.991,-48.726,46.177,21.843,-35.865,-14.352,-8.424,3.090]},{"start":200.78304,"duration":0.42943,"confidence":0.598,"loudness_start":-36.590,"loudness_max_time":0.13449,"loudness_max":-28.805,"pitches":[0.030,0.061,0.541,0.319,0.030,0.020,0.016,0.095,1.000,0.033,0.010,0.014],"timbre":[26.213,-116.388,-49.455,-28.197,86.384,-43.838,32.008,59.359,-26.116,20.681,-32.624,-10.740]},{"start":201.21247,"duration":0.16349,"confidence":1.000,"loudness_start":-41.983,"loudness_max_time":0.03372,"loudness_max":-6.628,"pitches":[1.000,0.579,0.138,0.149,0.107,0.280,0.232,0.212,0.622,0.603,0.915,0.056],"timbre":[41.635,-46.005,-4.183,17.127,19.332,159.080,35.631,11.844,-43.055,47.401,64.998,-18.454]},{"start":201.37596,"duration":0.10286,"confidence":0.968,"loudness_start":-21.809,"loudness_max_time":0.01966,"loudness_max":-6.986,"pitches":[0.509,0.098,0.061,1.000,0.127,0.125,0.110,0.220,0.370,0.114,0.151,0.154],"timbre":[48.378,-96.303,71.159,43.871,50.573,-39.469,-2.087,-10.247,-2.169,17.957,17.943,-26.619]},{"start":201.47882,"duration":0.19338,"confidence":0.482,"loudness_start":-14.023,"loudness_max_time":0.05372,"loudness_max":-8.231,"pitches":[1.000,0.334,0.268,0.214,0.181,0.183,0.144,0.177,0.434,0.192,0.272,0.559],"timbre":[47.298,-101.987,10.856,2.186,78.340,-25.892,5.675,-20.291,2.634,-20.353,-21.451,-22.740]},{"start":201.67220,"duration":0.10934,"confidence":0.460,"loudness_start":-15.170,"loudness_max_time":0.01143,"loudness_max":-9.800,"pitches":[1.000,0.395,0.066,0.034,0.018,0.062,0.037,0.143,0.072,0.031,0.099,0.248],"timbre":[46.646,-142.644,-8.374,4.263,39.395,-71.356,-25.052,-15.627,-6.791,17.167,-16.349,-22.364]},{"start":201.78154,"duration":0.30154,"confidence":0.476,"loudness_start":-15.967,"loudness_max_time":0.02585,"loudness_max":-11.089,"pitches":[1.000,0.169,0.045,0.024,0.053,0.095,0.075,0.076,0.134,0.061,0.035,0.389],"timbre":[46.333,-137.009,-11.763,-15.813,51.631,-24.160,-11.886,-0.648,4.972,-3.915,0.537,-28.468]},{"start":202.08308,"duration":0.13374,"confidence":0.777,"loudness_start":-16.381,"loudness_max_time":0.03590,"loudness_max":-7.687,"pitches":[1.000,0.406,0.017,0.014,0.018,0.099,0.038,0.068,0.139,0.135,0.526,0.072],"timbre":[47.954,-89.957,-23.482,23.989,83.419,-28.487,-18.018,-47.237,-15.011,25.457,-8.132,-39.088]},{"start":202.21683,"duration":0.12204,"confidence":0.365,"loudness_start":-15.595,"loudness_max_time":0.02488,"loudness_max":-10.662,"pitches":[1.000,0.484,0.019,0.011,0.017,0.056,0.023,0.096,0.094,0.095,0.462,0.080],"timbre":[46.168,-122.488,4.483,17.579,61.432,-53.341,-31.255,-24.206,12.593,8.318,-11.380,-25.474]},{"start":202.33887,"duration":0.14562,"confidence":0.749,"loudness_start":-17.273,"loudness_max_time":0.03939,"loudness_max":-7.113,"pitches":[0.605,0.581,0.190,0.199,0.407,0.429,0.682,0.763,1.000,0.894,0.714,0.039],"timbre":[46.731,-135.428,-21.126,4.702,39.100,9.263,-1.428,-18.333,22.235,-7.241,-8.632,-22.894]},{"start":202.48449,"duration":0.13968,"confidence":0.211,"loudness_start":-16.788,"loudness_max_time":0.05630,"loudness_max":-13.313,"pitches":[1.000,0.177,0.032,0.064,0.044,0.093,0.032,0.137,0.765,0.140,0.131,0.155],"timbre":[44.917,-169.624,-11.912,-34.434,55.909,-37.337,-9.113,-1.414,19.735,-6.386,-16.147,-20.726]},{"start":202.62417,"duration":0.25519,"confidence":0.677,"loudness_start":-16.706,"loudness_max_time":0.05324,"loudness_max":-9.073,"pitches":[0.863,0.141,0.083,0.085,0.198,1.000,0.229,0.077,0.071,0.135,0.078,0.194],"timbre":[47.127,-94.867,-17.911,-45.627,75.452,-11.382,13.565,-10.663,6.474,-42.668,-0.660,-32.222]},{"start":202.87937,"duration":0.34218,"confidence":0.980,"loudness_start":-15.082,"loudness_max_time":0.08413,"loudness_max":-1.301,"pitches":[1.000,0.174,0.117,0.211,0.158,0.890,0.133,0.065,0.685,0.112,0.435,0.075],"timbre":[48.057,-84.809,5.525,-44.924,49.426,8.982,-18.131,31.325,1.788,-27.135,-56.581,-14.220]},{"start":203.22154,"duration":0.09900,"confidence":0.702,"loudness_start":-18.059,"loudness_max_time":0.02000,"loudness_max":-8.790,"pitches":[1.000,0.323,0.161,0.554,0.186,0.212,0.100,0.100,0.402,0.063,0.087,0.392],"timbre":[44.994,-97.566,-69.572,37.507,32.310,-57.071,-45.281,-56.499,-46.796,31.270,-7.780,-10.075]},{"start":203.32054,"duration":0.18512,"confidence":1.000,"loudness_start":-20.381,"loudness_max_time":0.05488,"loudness_max":-3.933,"pitches":[1.000,0.082,0.045,0.433,0.087,0.187,0.038,0.132,0.140,0.044,0.027,0.083],"timbre":[48.430,-82.889,51.384,-86.464,30.475,50.539,20.307,4.444,0.021,-34.151,0.912,26.186]},{"start":203.50567,"duration":0.15120,"confidence":0.300,"loudness_start":-10.164,"loudness_max_time":0.00580,"loudness_max":-5.008,"pitches":[1.000,0.506,0.244,0.402,0.407,0.632,0.466,0.418,0.513,0.498,0.647,0.113],"timbre":[51.362,-72.668,49.975,27.606,-2.708,-61.236,32.364,-7.322,-24.736,-7.771,-5.704,41.371]},{"start":203.65687,"duration":0.12150,"confidence":0.153,"loudness_start":-12.905,"loudness_max_time":0.00317,"loudness_max":-8.137,"pitches":[0.617,0.165,0.109,1.000,0.384,0.934,0.406,0.158,0.099,0.070,0.057,0.141],"timbre":[49.367,-96.644,61.336,27.346,45.908,-52.410,8.851,-15.380,3.919,8.429,-11.998,2.232]},{"start":203.77837,"duration":0.15741,"confidence":0.109,"loudness_start":-13.846,"loudness_max_time":0.01463,"loudness_max":-7.619,"pitches":[1.000,0.438,0.056,0.101,0.106,0.319,0.097,0.055,0.077,0.072,0.179,0.275],"timbre":[47.357,-80.345,-24.960,18.470,55.671,-66.012,5.156,-37.758,-12.690,2.710,0.633,-12.426]},{"start":203.93578,"duration":0.26630,"confidence":0.646,"loudness_start":-15.528,"loudness_max_time":0.07544,"loudness_max":-7.873,"pitches":[1.000,0.352,0.257,0.224,0.214,0.300,0.287,0.230,0.091,0.101,0.113,0.377],"timbre":[47.365,-104.482,14.050,-42.906,36.242,-20.909,1.535,-3.921,2.854,12.313,-20.541,-8.622]},{"start":204.20209,"duration":0.10531,"confidence":0.003,"loudness_start":-14.911,"loudness_max_time":0.00850,"loudness_max":-12.303,"pitches":[1.000,0.432,0.021,0.013,0.021,0.040,0.045,0.106,0.217,0.143,0.317,0.183],"timbre":[45.448,-123.416,-7.143,-0.818,62.412,-57.391,-11.664,-4.432,9.514,2.432,-7.744,-20.320]},{"start":204.30739,"duration":0.16268,"confidence":0.804,"loudness_start":-17.112,"loudness_max_time":0.05939,"loudness_max":-6.716,"pitches":[1.000,0.359,0.023,0.028,0.031,0.115,0.064,0.035,0.077,0.100,0.465,0.061],"timbre":[46.638,-101.977,-6.478,-23.485,80.919,11.327,-10.733,-2.451,9.969,-28.752,-37.498,-36.460]},{"start":204.47007,"duration":0.13782,"confidence":0.383,"loudness_start":-16.686,"loudness_max_time":0.03442,"loudness_max":-12.343,"pitches":[1.000,0.533,0.062,0.025,0.028,0.045,0.041,0.132,0.073,0.073,0.497,0.097],"timbre":[45.172,-129.866,-2.627,4.054,54.348,-33.660,-19.746,-18.234,5.954,5.596,-6.039,-21.388]},{"start":204.60789,"duration":0.13927,"confidence":0.704,"loudness_start":-17.793,"loudness_max_time":0.03542,"loudness_max":-8.841,"pitches":[1.000,0.641,0.154,0.140,0.254,0.348,0.461,0.436,0.679,0.691,0.829,0.050],"timbre":[46.224,-142.469,-17.698,11.474,49.964,-10.171,-1.086,-6.782,13.413,6.536,4.919,-24.207]},{"start":204.74717,"duration":0.13370,"confidence":0.399,"loudness_start":-17.645,"loudness_max_time":0.05363,"loudness_max":-12.628,"pitches":[1.000,0.183,0.121,0.040,0.078,0.487,0.247,0.123,0.108,0.124,0.158,0.110],"timbre":[44.413,-158.787,-12.480,-6.508,67.820,-26.400,-6.485,-5.405,15.649,-1.394,-14.484,-29.431]},{"start":204.88086,"duration":0.14540,"confidence":0.785,"loudness_start":-18.316,"loudness_max_time":0.04878,"loudness_max":-8.455,"pitches":[1.000,0.104,0.074,0.101,0.130,0.635,0.147,0.091,0.071,0.080,0.143,0.174],"timbre":[46.035,-123.657,-32.650,-10.790,85.209,2.449,0.847,-13.082,10.389,-37.905,-29.348,-32.877]},{"start":205.02626,"duration":0.11673,"confidence":0.525,"loudness_start":-18.271,"loudness_max_time":0.04705,"loudness_max":-12.660,"pitches":[1.000,0.498,0.439,0.227,0.337,0.931,0.370,0.227,0.259,0.256,0.269,0.600],"timbre":[44.658,-134.098,-12.446,-33.650,36.358,-10.192,-7.740,-2.293,14.717,-3.818,-9.575,-28.256]},{"start":205.14299,"duration":0.33193,"confidence":0.942,"loudness_start":-16.750,"loudness_max_time":0.06553,"loudness_max":-4.445,"pitches":[0.243,0.051,0.063,0.407,0.104,1.000,0.140,0.054,0.358,0.031,0.049,0.030],"timbre":[46.738,-110.250,6.347,-57.948,54.542,9.718,-13.866,31.171,11.734,-22.315,-49.305,-15.712]},{"start":205.47492,"duration":0.11365,"confidence":0.499,"loudness_start":-19.161,"loudness_max_time":0.02070,"loudness_max":-12.953,"pitches":[0.427,0.265,0.214,1.000,0.249,0.328,0.089,0.119,0.431,0.092,0.099,0.182],"timbre":[43.237,-86.164,-98.921,3.375,56.149,-29.243,-25.658,-59.983,-35.695,-5.957,-15.287,-16.264]},{"start":205.58857,"duration":0.18063,"confidence":1.000,"loudness_start":-22.607,"loudness_max_time":0.05317,"loudness_max":-3.982,"pitches":[1.000,0.052,0.114,0.494,0.069,0.350,0.058,0.071,0.094,0.023,0.030,0.130],"timbre":[48.814,-75.001,38.909,-70.178,20.351,68.212,43.285,4.698,-0.981,-22.531,12.001,23.365]},{"start":205.76921,"duration":0.27868,"confidence":0.201,"loudness_start":-9.863,"loudness_max_time":0.00501,"loudness_max":-6.220,"pitches":[0.646,0.242,0.126,0.746,0.274,1.000,0.388,0.217,0.641,0.095,0.102,0.371],"timbre":[51.149,-64.375,51.701,28.201,8.933,-46.148,21.965,-17.034,-17.319,-2.968,-16.764,30.544]},{"start":206.04789,"duration":0.13991,"confidence":0.201,"loudness_start":-14.047,"loudness_max_time":0.01304,"loudness_max":-7.960,"pitches":[1.000,0.450,0.043,0.092,0.051,0.095,0.037,0.096,0.087,0.080,0.247,0.286],"timbre":[46.587,-88.581,-24.154,10.859,67.380,-88.004,0.125,-33.549,-14.932,18.098,2.028,-16.228]},{"start":206.18780,"duration":0.07361,"confidence":0.711,"loudness_start":-17.206,"loudness_max_time":0.00769,"loudness_max":-7.741,"pitches":[1.000,0.699,0.398,0.308,0.146,0.160,0.205,0.277,0.325,0.298,0.567,0.372],"timbre":[48.330,-83.911,15.908,1.566,-1.117,-73.204,-24.915,-22.262,-11.866,20.801,1.772,-11.631]},{"start":206.26141,"duration":0.32639,"confidence":0.112,"loudness_start":-14.284,"loudness_max_time":0.07798,"loudness_max":-8.446,"pitches":[1.000,0.151,0.089,0.102,0.112,0.107,0.131,0.099,0.059,0.056,0.041,0.173],"timbre":[47.836,-112.015,14.844,21.377,35.902,-53.808,-3.213,-4.566,5.466,24.683,-18.147,3.893]},{"start":206.58780,"duration":0.14612,"confidence":0.699,"loudness_start":-17.811,"loudness_max_time":0.03642,"loudness_max":-9.844,"pitches":[1.000,0.397,0.008,0.013,0.025,0.163,0.027,0.016,0.057,0.053,0.363,0.066],"timbre":[45.837,-99.348,-23.409,-2.619,95.039,-10.649,-0.852,-23.996,4.785,-37.802,-8.111,-43.059]},{"start":206.73392,"duration":0.14336,"confidence":0.531,"loudness_start":-18.223,"loudness_max_time":0.03175,"loudness_max":-11.501,"pitches":[1.000,0.516,0.025,0.019,0.023,0.083,0.024,0.071,0.055,0.037,0.289,0.092],"timbre":[45.546,-119.367,4.078,17.988,65.462,-35.351,-15.459,-11.121,4.739,0.444,-5.906,-32.242]},{"start":206.87728,"duration":0.13401,"confidence":0.745,"loudness_start":-18.180,"loudness_max_time":0.03061,"loudness_max":-8.226,"pitches":[1.000,0.610,0.071,0.077,0.056,0.168,0.134,0.162,0.456,0.394,0.688,0.050],"timbre":[46.618,-137.301,-26.169,21.893,40.355,-20.247,-11.570,-24.521,12.213,8.509,12.882,-28.608]},{"start":207.01129,"duration":0.13374,"confidence":0.328,"loudness_start":-17.378,"loudness_max_time":0.03272,"loudness_max":-13.042,"pitches":[1.000,0.189,0.095,0.066,0.048,0.102,0.055,0.171,0.553,0.113,0.091,0.176],"timbre":[44.784,-170.791,-18.138,-11.187,65.581,-41.952,-4.685,4.481,6.688,-1.599,-9.319,-28.203]},{"start":207.14503,"duration":0.13197,"confidence":0.828,"loudness_start":-18.127,"loudness_max_time":0.05698,"loudness_max":-7.116,"pitches":[1.000,0.196,0.047,0.055,0.071,0.267,0.123,0.123,0.205,0.176,0.325,0.216],"timbre":[46.579,-108.088,-30.218,-33.094,80.632,18.307,6.496,-15.101,10.010,-43.252,-42.041,-40.809]},{"start":207.27701,"duration":0.15111,"confidence":0.543,"loudness_start":-17.261,"loudness_max_time":0.05068,"loudness_max":-11.141,"pitches":[1.000,0.260,0.238,0.077,0.076,0.080,0.060,0.137,0.118,0.081,0.308,0.263],"timbre":[45.074,-153.804,-14.533,-34.573,72.250,-13.879,-5.872,4.164,11.015,-7.976,-24.664,-26.147]},{"start":207.42812,"duration":0.32073,"confidence":0.996,"loudness_start":-17.618,"loudness_max_time":0.08397,"loudness_max":-3.972,"pitches":[1.000,0.119,0.036,0.121,0.111,0.609,0.095,0.043,0.489,0.079,0.051,0.076],"timbre":[48.739,-78.667,-9.195,-13.581,51.872,49.739,-14.414,10.764,8.852,-39.020,-37.829,-21.072]},{"start":207.74884,"duration":0.10544,"confidence":0.379,"loudness_start":-17.794,"loudness_max_time":0.00998,"loudness_max":-11.808,"pitches":[0.754,0.292,0.177,1.000,0.360,0.689,0.328,0.177,0.599,0.114,0.116,0.393],"timbre":[43.758,-101.756,-83.527,14.260,50.414,-64.429,-34.324,-56.893,-48.645,28.466,-23.219,-8.539]},{"start":207.85429,"duration":0.17905,"confidence":1.000,"loudness_start":-21.257,"loudness_max_time":0.05020,"loudness_max":-3.979,"pitches":[1.000,0.084,0.142,0.470,0.110,0.224,0.084,0.368,0.585,0.133,0.039,0.119],"timbre":[49.038,-83.633,46.592,-70.042,33.327,59.582,28.595,7.797,6.663,-27.804,12.276,24.229]},{"start":208.03333,"duration":0.15129,"confidence":0.294,"loudness_start":-10.024,"loudness_max_time":0.00701,"loudness_max":-4.953,"pitches":[1.000,0.467,0.253,0.498,0.482,0.622,0.749,0.734,0.941,0.918,0.683,0.089],"timbre":[51.265,-56.854,60.395,38.149,2.584,-52.939,43.600,-2.688,-18.637,-12.197,-12.902,42.399]},{"start":208.18463,"duration":0.11633,"confidence":0.427,"loudness_start":-13.522,"loudness_max_time":0.01134,"loudness_max":-6.671,"pitches":[1.000,0.238,0.172,0.804,0.142,0.258,0.155,0.180,0.106,0.106,0.076,0.286],"timbre":[49.727,-82.386,71.050,44.023,39.688,-54.649,1.920,-17.340,-0.077,11.127,-14.638,-2.699]},{"start":208.30095,"duration":0.10422,"confidence":0.068,"loudness_start":-14.024,"loudness_max_time":0.02365,"loudness_max":-8.073,"pitches":[1.000,0.487,0.113,0.144,0.125,0.268,0.192,0.170,0.090,0.072,0.203,0.502],"timbre":[47.040,-76.950,-20.883,23.145,62.922,-55.402,12.158,-42.054,-5.623,-6.025,8.980,-21.964]},{"start":208.40517,"duration":0.12222,"confidence":0.295,"loudness_start":-16.321,"loudness_max_time":0.05823,"loudness_max":-13.132,"pitches":[1.000,0.369,0.121,0.113,0.098,0.186,0.222,0.350,0.223,0.187,0.323,0.432],"timbre":[45.708,-122.899,9.831,-46.960,55.446,-39.130,-6.050,-3.442,9.993,2.989,-11.242,-14.526]},{"start":208.52739,"duration":0.34195,"confidence":0.445,"loudness_start":-14.771,"loudness_max_time":0.07444,"loudness_max":-6.404,"pitches":[1.000,0.114,0.060,0.079,0.086,0.166,0.104,0.072,0.068,0.064,0.213,0.282],"timbre":[47.730,-124.787,7.464,18.672,36.358,-56.357,0.825,-10.219,3.406,12.768,-23.082,0.775]},{"start":208.86934,"duration":0.09188,"confidence":0.612,"loudness_start":-17.176,"loudness_max_time":0.02875,"loudness_max":-9.779,"pitches":[1.000,0.287,0.184,0.185,0.013,0.083,0.177,0.186,0.217,0.182,0.471,0.496],"timbre":[45.693,-110.722,-70.060,18.871,111.235,-55.940,3.231,-57.645,-17.864,-3.607,4.045,-25.671]},{"start":208.96122,"duration":0.17506,"confidence":0.653,"loudness_start":-18.311,"loudness_max_time":0.07646,"loudness_max":-11.386,"pitches":[1.000,0.496,0.066,0.047,0.039,0.078,0.043,0.168,0.173,0.059,0.234,0.098],"timbre":[45.903,-130.658,7.150,-62.074,73.072,-15.986,-9.649,17.032,10.591,-14.060,-10.503,-22.286]},{"start":209.13628,"duration":0.13397,"confidence":0.594,"loudness_start":-14.677,"loudness_max_time":0.03508,"loudness_max":-7.061,"pitches":[1.000,0.851,0.140,0.152,0.195,0.276,0.229,0.276,0.436,0.295,0.407,0.088],"timbre":[48.021,-118.973,-16.921,13.525,43.542,-11.736,-11.015,-19.080,16.005,-0.196,-6.978,-21.238]},{"start":209.27025,"duration":0.14490,"confidence":0.370,"loudness_start":-16.059,"loudness_max_time":0.06787,"loudness_max":-11.970,"pitches":[1.000,0.206,0.065,0.064,0.124,0.461,0.209,0.436,0.636,0.296,0.199,0.085],"timbre":[45.541,-136.620,-11.462,-24.822,49.948,-20.384,-9.344,-2.576,15.874,-11.629,-22.965,-23.348]},{"start":209.41515,"duration":0.15120,"confidence":0.669,"loudness_start":-17.734,"loudness_max_time":0.05673,"loudness_max":-9.840,"pitches":[1.000,0.101,0.055,0.053,0.077,0.314,0.128,0.356,0.714,0.238,0.119,0.100],"timbre":[46.006,-112.033,-40.109,-4.660,84.218,-12.897,6.383,-27.872,10.772,-34.994,-23.633,-32.457]},{"start":209.56635,"duration":0.13356,"confidence":0.567,"loudness_start":-17.701,"loudness_max_time":0.02533,"loudness_max":-11.917,"pitches":[1.000,0.247,0.213,0.129,0.108,0.252,0.099,0.550,0.604,0.230,0.108,0.177],"timbre":[45.134,-158.938,-24.990,-6.228,58.048,-23.515,-9.235,-1.625,4.097,-3.533,-9.398,-27.655]},{"start":209.69991,"duration":0.30762,"confidence":0.973,"loudness_start":-17.879,"loudness_max_time":0.03687,"loudness_max":-4.543,"pitches":[0.170,0.053,0.089,0.409,0.116,1.000,0.179,0.041,0.366,0.024,0.024,0.022],"timbre":[48.736,-81.688,-14.252,5.519,50.614,45.832,-12.678,4.174,11.283,-35.312,-22.837,-18.758]},{"start":210.00753,"duration":0.10875,"confidence":0.537,"loudness_start":-17.264,"loudness_max_time":0.02009,"loudness_max":-10.446,"pitches":[0.658,0.234,0.214,1.000,0.237,0.527,0.099,0.127,0.884,0.094,0.121,0.212],"timbre":[44.100,-94.690,-92.042,21.763,62.316,-58.580,-28.320,-59.727,-40.309,12.774,-6.958,-19.530]},{"start":210.11628,"duration":0.18127,"confidence":1.000,"loudness_start":-21.415,"loudness_max_time":0.05234,"loudness_max":-4.004,"pitches":[1.000,0.067,0.044,0.200,0.051,0.182,0.051,0.116,0.108,0.029,0.033,0.105],"timbre":[48.781,-70.604,43.998,-67.966,21.737,65.970,44.464,8.242,4.481,-20.619,7.829,16.081]},{"start":210.29755,"duration":0.14580,"confidence":0.307,"loudness_start":-10.275,"loudness_max_time":0.00789,"loudness_max":-6.056,"pitches":[1.000,0.287,0.266,0.381,0.351,0.800,0.707,0.614,0.974,0.939,0.884,0.046],"timbre":[51.438,-53.520,60.062,32.531,-1.984,-45.580,43.005,0.705,-18.887,-6.509,-9.744,39.393]},{"start":210.44336,"duration":0.13959,"confidence":0.242,"loudness_start":-12.253,"loudness_max_time":0.00796,"loudness_max":-8.637,"pitches":[0.397,0.148,0.498,0.832,0.114,0.288,0.154,0.312,1.000,0.161,0.064,0.029],"timbre":[49.667,-96.036,50.448,16.444,41.997,-41.811,10.784,-17.806,7.319,4.010,-13.651,-1.566]},{"start":210.58295,"duration":0.27800,"confidence":0.522,"loudness_start":-12.645,"loudness_max_time":0.01345,"loudness_max":-5.373,"pitches":[0.369,0.616,1.000,0.236,0.088,0.202,0.120,0.349,0.226,0.207,0.164,0.228],"timbre":[49.738,-77.703,11.457,24.774,41.178,-73.105,6.217,-24.744,-7.011,32.222,-11.796,-12.216]},{"start":210.86095,"duration":0.08544,"confidence":0.204,"loudness_start":-15.259,"loudness_max_time":0.00401,"loudness_max":-9.645,"pitches":[1.000,0.228,0.257,0.155,0.556,0.795,0.914,0.881,0.708,0.704,0.686,0.729],"timbre":[45.240,-154.646,-37.356,22.098,25.498,-85.256,-19.063,-17.910,-4.819,13.966,-11.518,12.910]},{"start":210.94639,"duration":0.18213,"confidence":0.451,"loudness_start":-18.841,"loudness_max_time":0.06814,"loudness_max":-13.229,"pitches":[0.401,1.000,0.228,0.044,0.073,0.643,0.152,0.193,0.359,0.088,0.027,0.065],"timbre":[42.634,-144.469,-30.994,-30.169,48.266,-20.699,-18.843,20.272,-9.372,-15.385,-22.875,12.281]},{"start":211.12853,"duration":0.12694,"confidence":0.872,"loudness_start":-20.303,"loudness_max_time":0.04528,"loudness_max":-9.240,"pitches":[0.369,0.800,0.625,0.148,0.084,1.000,0.378,0.295,0.446,0.517,0.409,0.098],"timbre":[45.599,-65.500,-57.045,8.572,47.547,14.537,-47.255,-29.692,-21.494,-32.853,2.236,-27.337]},{"start":211.25546,"duration":0.16113,"confidence":0.568,"loudness_start":-20.765,"loudness_max_time":0.03800,"loudness_max":-13.243,"pitches":[0.275,0.918,0.428,0.082,0.101,1.000,0.296,0.239,0.081,0.131,0.425,0.057],"timbre":[43.060,-122.787,-44.248,1.100,55.760,-3.557,-48.657,-19.045,-6.347,-15.561,3.906,-8.829]},{"start":211.41660,"duration":0.11565,"confidence":0.880,"loudness_start":-20.932,"loudness_max_time":0.01884,"loudness_max":-8.330,"pitches":[0.523,0.658,0.373,0.329,0.638,0.986,0.862,0.878,1.000,0.870,0.607,0.087],"timbre":[45.237,-155.223,-40.623,46.783,17.352,-56.471,-12.216,-25.483,-12.430,4.856,6.289,3.630]},{"start":211.53224,"duration":0.13565,"confidence":0.396,"loudness_start":-20.517,"loudness_max_time":0.04776,"loudness_max":-14.926,"pitches":[0.120,0.081,0.225,0.084,0.171,1.000,0.479,0.345,0.980,0.188,0.048,0.046],"timbre":[41.612,-168.214,-84.176,-11.212,59.272,-28.448,-19.363,-12.601,-5.901,-21.685,-30.386,0.149]},{"start":211.66789,"duration":0.15079,"confidence":0.990,"loudness_start":-23.749,"loudness_max_time":0.06435,"loudness_max":-9.565,"pitches":[0.131,0.176,0.597,0.119,0.187,1.000,0.457,0.085,0.082,0.097,0.089,0.075],"timbre":[42.643,-131.022,-73.589,-51.633,66.658,45.649,-12.413,19.879,-5.199,-77.506,-30.257,-20.792]},{"start":211.81868,"duration":0.12118,"confidence":0.744,"loudness_start":-22.966,"loudness_max_time":0.03676,"loudness_max":-12.985,"pitches":[0.294,0.370,0.327,0.141,0.189,1.000,0.534,0.213,0.190,0.155,0.140,0.264],"timbre":[42.425,-145.470,-73.522,-22.144,54.671,3.500,-19.231,-6.822,-20.025,-18.072,-21.106,-16.147]},{"start":211.93986,"duration":0.31283,"confidence":1.000,"loudness_start":-21.913,"loudness_max_time":0.06063,"loudness_max":-4.878,"pitches":[0.039,0.030,0.090,0.035,0.094,1.000,0.126,0.034,0.041,0.040,0.156,0.019],"timbre":[45.830,-93.845,-19.821,-85.634,45.320,50.786,-11.490,17.991,-10.819,-41.459,-27.804,-7.928]},{"start":212.25270,"duration":0.26299,"confidence":0.748,"loudness_start":-18.235,"loudness_max_time":0.04660,"loudness_max":-8.064,"pitches":[0.448,0.042,0.203,0.054,0.102,1.000,0.332,0.537,0.050,0.048,0.032,0.028],"timbre":[45.029,-101.346,-75.404,5.856,63.826,12.083,-20.054,-52.606,-16.941,-31.610,-10.335,-26.068]},{"start":212.51569,"duration":0.30009,"confidence":1.000,"loudness_start":-23.077,"loudness_max_time":0.04980,"loudness_max":-6.977,"pitches":[0.768,0.398,0.341,0.311,0.328,1.000,0.427,0.723,0.377,0.147,0.145,0.719],"timbre":[44.278,-101.176,-23.892,-30.760,-0.876,50.252,-1.037,11.343,-25.706,-40.722,-10.585,-9.213]},{"start":212.81578,"duration":0.29624,"confidence":1.000,"loudness_start":-21.939,"loudness_max_time":0.04181,"loudness_max":-5.265,"pitches":[0.159,0.394,1.000,0.220,0.101,0.202,0.086,0.340,0.089,0.100,0.074,0.139],"timbre":[48.155,-97.418,-5.680,-8.087,59.730,43.002,42.293,-18.373,-10.105,-9.674,7.887,-21.105]},{"start":213.11202,"duration":0.12141,"confidence":0.245,"loudness_start":-15.605,"loudness_max_time":0.01490,"loudness_max":-11.200,"pitches":[0.829,0.558,0.420,0.362,0.528,0.987,0.736,0.724,0.886,0.851,1.000,0.146],"timbre":[44.595,-151.352,-29.235,20.993,33.515,-45.170,-2.291,-40.079,12.682,-8.771,-10.684,4.389]},{"start":213.23342,"duration":0.13574,"confidence":0.489,"loudness_start":-20.336,"loudness_max_time":0.04603,"loudness_max":-13.912,"pitches":[0.362,1.000,0.395,0.071,0.094,0.651,0.320,0.233,0.234,0.086,0.065,0.038],"timbre":[43.018,-141.918,-51.908,-2.443,65.666,-27.015,-26.756,-6.897,-5.881,-24.462,-7.057,-1.513]},{"start":213.36916,"duration":0.16209,"confidence":0.948,"loudness_start":-20.941,"loudness_max_time":0.05565,"loudness_max":-6.953,"pitches":[0.149,0.495,0.212,0.093,0.157,1.000,0.215,0.119,0.151,0.356,0.405,0.058],"timbre":[44.983,-102.092,-52.784,-12.713,67.470,31.759,-35.251,-10.784,-21.650,-48.720,-39.170,-17.717]},{"start":213.53125,"duration":0.13288,"confidence":0.653,"loudness_start":-20.761,"loudness_max_time":0.02884,"loudness_max":-13.183,"pitches":[0.454,0.729,0.497,0.107,0.097,1.000,0.174,0.162,0.072,0.135,0.406,0.089],"timbre":[42.944,-132.069,-46.589,15.585,39.424,-25.445,-52.222,-29.567,-12.537,-0.902,-0.755,-5.558]},{"start":213.66413,"duration":0.11556,"confidence":0.952,"loudness_start":-22.716,"loudness_max_time":0.03646,"loudness_max":-7.161,"pitches":[0.597,0.635,0.349,0.366,0.674,0.855,1.000,0.895,0.889,0.851,0.646,0.083],"timbre":[45.001,-137.509,-67.090,28.017,56.086,32.796,-5.444,-1.712,0.499,-15.806,-0.286,-7.055]},{"start":213.77968,"duration":0.15805,"confidence":0.690,"loudness_start":-21.619,"loudness_max_time":0.06653,"loudness_max":-13.771,"pitches":[0.165,0.082,0.245,0.095,0.230,1.000,0.422,0.112,0.123,0.116,0.095,0.035],"timbre":[41.013,-179.804,-47.870,-48.207,53.193,0.980,-22.879,5.118,4.595,-33.515,-28.655,-2.696]},{"start":213.93773,"duration":0.13882,"confidence":0.940,"loudness_start":-23.398,"loudness_max_time":0.04621,"loudness_max":-9.217,"pitches":[0.122,0.064,0.074,0.085,0.239,1.000,0.292,0.098,0.091,0.098,0.025,0.056],"timbre":[44.291,-119.674,-82.194,-24.800,77.219,26.680,-17.237,-20.600,-8.265,-59.019,-28.228,-15.437]},{"start":214.07655,"duration":0.12190,"confidence":0.612,"loudness_start":-20.955,"loudness_max_time":0.04306,"loudness_max":-11.987,"pitches":[0.410,0.530,0.712,0.224,0.286,1.000,0.621,0.258,0.187,0.120,0.205,0.376],"timbre":[42.598,-152.481,-69.918,-12.612,48.455,-5.066,-34.263,-5.190,-4.444,-23.967,-36.564,-3.542]},{"start":214.19846,"duration":0.33773,"confidence":1.000,"loudness_start":-23.615,"loudness_max_time":0.06592,"loudness_max":-4.606,"pitches":[0.054,0.043,0.093,0.273,0.089,1.000,0.126,0.033,0.040,0.051,0.026,0.022],"timbre":[45.105,-106.947,-21.958,-110.987,53.827,47.562,-9.611,17.925,-12.718,-36.678,-23.216,-8.727]},{"start":214.53619,"duration":0.10889,"confidence":0.484,"loudness_start":-18.772,"loudness_max_time":0.02125,"loudness_max":-11.017,"pitches":[0.479,0.239,0.122,0.061,0.053,0.337,0.138,1.000,0.194,0.121,0.144,0.269],"timbre":[44.911,-101.026,-82.255,6.937,75.871,-51.997,-23.277,-62.568,-36.617,14.233,-10.551,-19.019]},{"start":214.64508,"duration":0.17587,"confidence":0.277,"loudness_start":-19.673,"loudness_max_time":0.03884,"loudness_max":-13.565,"pitches":[0.726,0.061,0.461,0.058,0.032,0.179,0.132,1.000,0.459,0.086,0.062,0.172],"timbre":[41.797,-160.101,-69.148,9.791,36.339,-24.640,-37.007,-16.188,5.156,-1.165,1.308,-8.979]},{"start":214.82095,"duration":0.26476,"confidence":0.976,"loudness_start":-24.275,"loudness_max_time":0.00707,"loudness_max":-6.847,"pitches":[0.506,0.307,0.200,0.273,0.286,0.990,0.482,1.000,0.967,0.231,0.115,0.430],"timbre":[46.416,-76.943,-17.261,51.437,-32.390,-68.039,-9.822,-18.218,-51.175,-12.919,-17.994,11.328]},{"start":215.08571,"duration":0.16349,"confidence":0.995,"loudness_start":-20.665,"loudness_max_time":0.03447,"loudness_max":-4.503,"pitches":[0.227,1.000,0.319,0.072,0.060,0.285,0.107,0.987,0.274,0.218,0.178,0.125],"timbre":[49.248,-81.744,16.436,3.596,59.011,21.898,54.206,-17.668,3.274,-6.673,42.098,-33.872]},{"start":215.24921,"duration":0.13882,"confidence":0.387,"loudness_start":-13.268,"loudness_max_time":0.00256,"loudness_max":-6.615,"pitches":[0.558,1.000,0.299,0.054,0.047,0.519,0.089,0.312,0.168,0.055,0.025,0.100],"timbre":[48.290,-126.979,20.554,36.868,26.960,-74.838,-0.448,-33.347,1.738,18.575,-22.236,1.868]},{"start":215.38803,"duration":0.10989,"confidence":0.059,"loudness_start":-15.667,"loudness_max_time":0.00283,"loudness_max":-9.588,"pitches":[0.248,0.525,0.391,0.353,0.620,1.000,0.865,0.844,0.805,0.813,0.495,0.035],"timbre":[43.417,-154.224,-47.575,20.166,32.040,-94.971,-24.475,-40.152,-0.762,7.170,-16.420,4.308]},{"start":215.49791,"duration":0.10989,"confidence":0.281,"loudness_start":-21.398,"loudness_max_time":0.03739,"loudness_max":-16.602,"pitches":[0.437,1.000,0.274,0.114,0.237,0.432,0.309,0.161,0.203,0.126,0.108,0.096],"timbre":[40.812,-162.697,-61.699,-17.976,60.550,-31.849,-31.049,-13.370,-8.605,-30.515,-19.597,-9.967]},{"start":215.60780,"duration":0.17569,"confidence":0.823,"loudness_start":-23.064,"loudness_max_time":0.07186,"loudness_max":-12.465,"pitches":[0.346,1.000,0.346,0.055,0.173,0.597,0.229,0.076,0.135,0.113,0.080,0.151],"timbre":[40.886,-126.392,-58.314,-83.453,89.033,-6.545,-28.600,39.148,-13.553,-46.126,-26.648,-9.417]},{"start":215.78349,"duration":0.14395,"confidence":0.754,"loudness_start":-21.993,"loudness_max_time":0.04195,"loudness_max":-12.970,"pitches":[0.407,0.979,0.664,0.094,0.124,1.000,0.277,0.193,0.163,0.303,0.113,0.148],"timbre":[43.115,-109.611,-30.376,11.222,36.737,-1.110,-54.842,-32.825,-3.498,-11.793,4.441,-2.512]},{"start":215.92744,"duration":0.15306,"confidence":0.878,"loudness_start":-21.916,"loudness_max_time":0.03499,"loudness_max":-8.170,"pitches":[0.512,0.439,0.212,0.188,0.397,0.639,0.617,0.679,1.000,0.877,0.747,0.060],"timbre":[43.712,-152.344,-62.247,31.812,34.346,22.566,-2.780,-22.475,2.489,-17.844,7.218,1.471]},{"start":216.08050,"duration":0.12145,"confidence":0.585,"loudness_start":-21.571,"loudness_max_time":0.02460,"loudness_max":-15.558,"pitches":[0.268,0.192,0.194,0.054,0.120,1.000,0.248,0.243,0.636,0.157,0.135,0.065],"timbre":[40.997,-170.519,-76.008,3.279,44.204,-54.203,-18.336,-50.033,-16.434,-16.855,-16.166,-4.169]},{"start":216.20195,"duration":0.14313,"confidence":0.968,"loudness_start":-23.203,"loudness_max_time":0.05660,"loudness_max":-9.128,"pitches":[0.170,0.095,0.286,0.083,0.173,1.000,0.304,0.119,0.240,0.229,0.437,0.069],"timbre":[44.405,-105.141,-63.984,-39.829,51.722,34.855,-24.818,-18.447,-5.667,-61.606,-35.818,-24.588]},{"start":216.34508,"duration":0.13202,"confidence":0.521,"loudness_start":-20.926,"loudness_max_time":0.03902,"loudness_max":-13.581,"pitches":[0.416,0.416,0.858,0.326,0.355,1.000,0.492,0.284,0.174,0.200,0.631,0.509],"timbre":[41.717,-152.219,-75.471,-26.783,50.579,-2.437,-19.011,-8.549,-20.016,-20.872,-17.091,-17.820]},{"start":216.47710,"duration":0.31578,"confidence":1.000,"loudness_start":-21.900,"loudness_max_time":0.09138,"loudness_max":-5.129,"pitches":[0.229,0.043,0.086,0.031,0.091,1.000,0.123,0.032,0.036,0.036,0.017,0.019],"timbre":[47.346,-77.740,-22.925,-54.271,41.906,62.441,-15.821,7.945,-6.465,-45.639,-32.622,1.488]},{"start":216.79288,"duration":0.11651,"confidence":0.494,"loudness_start":-17.825,"loudness_max_time":0.02902,"loudness_max":-10.509,"pitches":[0.131,0.083,0.345,0.156,0.230,0.564,0.277,1.000,0.186,0.136,0.152,0.091],"timbre":[45.203,-105.307,-76.392,13.494,71.426,-25.049,-15.231,-68.318,-35.926,-5.039,-2.515,-20.436]},{"start":216.90939,"duration":0.16190,"confidence":0.276,"loudness_start":-19.853,"loudness_max_time":0.04116,"loudness_max":-13.888,"pitches":[0.261,0.099,0.342,0.041,0.038,0.229,0.159,1.000,0.787,0.128,0.048,0.058],"timbre":[42.597,-160.978,-43.062,-9.628,32.158,-20.042,-32.296,-23.474,-0.820,-10.384,5.955,-15.010]},{"start":217.07129,"duration":0.15769,"confidence":0.876,"loudness_start":-20.789,"loudness_max_time":0.02068,"loudness_max":-7.732,"pitches":[0.827,0.742,0.420,0.299,0.573,0.649,0.755,1.000,0.875,0.715,0.702,0.072],"timbre":[46.045,-92.258,-8.687,37.270,-20.792,6.283,-0.657,-5.994,-36.591,-20.725,24.356,6.607]},{"start":217.22898,"duration":0.13361,"confidence":0.679,"loudness_start":-19.754,"loudness_max_time":0.02397,"loudness_max":-9.517,"pitches":[0.526,0.178,0.246,0.053,0.044,0.221,0.197,1.000,0.737,0.157,0.121,0.190],"timbre":[45.467,-46.201,-11.584,17.689,-36.542,-11.197,-29.185,-18.269,-26.662,-16.146,21.279,-15.286]},{"start":217.36259,"duration":0.27211,"confidence":0.895,"loudness_start":-18.374,"loudness_max_time":0.02429,"loudness_max":-5.252,"pitches":[0.091,0.470,1.000,0.288,0.102,0.190,0.101,0.380,0.099,0.153,0.065,0.113],"timbre":[49.135,-80.682,-1.270,41.965,55.781,-22.142,39.515,-30.530,-3.193,16.222,9.664,-20.622]},{"start":217.63469,"duration":0.12753,"confidence":0.513,"loudness_start":-15.588,"loudness_max_time":0.02492,"loudness_max":-9.635,"pitches":[0.699,0.737,0.371,0.321,0.625,0.843,0.982,0.986,1.000,0.995,0.855,0.030],"timbre":[45.198,-137.981,-36.117,42.859,20.958,-34.620,-9.574,-40.405,-4.886,-4.343,-0.897,-7.287]},{"start":217.76222,"duration":0.10426,"confidence":0.268,"loudness_start":-20.882,"loudness_max_time":0.03741,"loudness_max":-15.544,"pitches":[0.506,1.000,0.282,0.117,0.207,0.428,0.405,0.200,0.249,0.216,0.421,0.163],"timbre":[41.287,-146.390,-76.605,-19.763,72.098,-27.967,-34.444,-11.966,1.414,-30.190,-10.125,-2.770]},{"start":217.86649,"duration":0.17569,"confidence":0.867,"loudness_start":-22.663,"loudness_max_time":0.08098,"loudness_max":-10.827,"pitches":[0.293,1.000,0.483,0.064,0.149,0.974,0.482,0.224,0.432,0.066,0.122,0.065],"timbre":[41.183,-143.808,-63.018,-94.237,90.936,-11.334,-20.102,17.795,-24.500,-35.243,-35.250,-10.510]},{"start":218.04218,"duration":0.16136,"confidence":0.755,"loudness_start":-21.819,"loudness_max_time":0.04583,"loudness_max":-13.040,"pitches":[0.338,1.000,0.346,0.060,0.108,0.930,0.363,0.443,0.855,0.201,0.092,0.085],"timbre":[42.749,-134.736,-49.842,-15.727,53.571,13.173,-40.828,-18.585,-11.051,-16.553,-6.059,-10.782]},{"start":218.20354,"duration":0.13587,"confidence":0.886,"loudness_start":-21.264,"loudness_max_time":0.02281,"loudness_max":-7.672,"pitches":[0.771,0.588,0.259,0.129,0.160,0.457,0.439,0.467,1.000,0.721,0.840,0.052],"timbre":[44.786,-157.986,-56.182,59.567,18.162,-25.753,-15.594,-39.276,-3.126,-3.035,16.777,6.415]},{"start":218.33941,"duration":0.13234,"confidence":0.676,"loudness_start":-21.417,"loudness_max_time":0.04481,"loudness_max":-13.657,"pitches":[0.247,0.168,0.184,0.076,0.143,1.000,0.372,0.418,0.855,0.338,0.210,0.073],"timbre":[42.724,-143.483,-61.509,-3.012,26.187,-12.936,-29.854,-26.049,-4.994,-27.148,-27.501,-6.365]},{"start":218.47175,"duration":0.15542,"confidence":0.956,"loudness_start":-23.053,"loudness_max_time":0.05376,"loudness_max":-8.922,"pitches":[0.050,0.052,0.221,0.036,0.098,1.000,0.185,0.141,0.350,0.086,0.073,0.022],"timbre":[43.585,-144.585,-83.699,-40.351,90.007,43.206,-8.698,-14.254,-3.980,-69.780,-17.441,-18.258]},{"start":218.62717,"duration":0.12531,"confidence":0.643,"loudness_start":-20.457,"loudness_max_time":0.02317,"loudness_max":-13.425,"pitches":[0.277,0.269,0.289,0.146,0.150,1.000,0.224,0.440,0.698,0.264,0.087,0.204],"timbre":[42.974,-143.340,-63.578,2.968,29.251,-15.771,-31.360,-15.482,-18.471,-8.264,-5.986,-15.054]},{"start":218.75247,"duration":0.31864,"confidence":1.000,"loudness_start":-21.968,"loudness_max_time":0.03977,"loudness_max":-4.893,"pitches":[0.023,0.028,0.076,0.241,0.089,1.000,0.132,0.034,0.037,0.031,0.031,0.012],"timbre":[47.887,-89.285,-32.070,-16.230,38.978,69.530,-19.726,-1.516,-0.171,-42.569,-8.091,-2.759]},{"start":219.07111,"duration":0.10236,"confidence":0.528,"loudness_start":-16.766,"loudness_max_time":0.01388,"loudness_max":-11.075,"pitches":[0.348,0.251,0.385,0.074,0.056,0.256,0.108,1.000,0.198,0.122,0.048,0.169],"timbre":[44.926,-113.057,-77.975,0.594,75.146,-65.891,-25.226,-67.736,-46.240,28.119,-21.001,-13.321]},{"start":219.17347,"duration":0.14753,"confidence":0.116,"loudness_start":-19.316,"loudness_max_time":0.03571,"loudness_max":-13.655,"pitches":[0.736,0.104,0.118,0.042,0.038,0.262,0.108,1.000,0.328,0.132,0.055,0.211],"timbre":[41.437,-173.724,-68.163,25.295,39.833,-29.193,-39.861,-20.496,0.659,-2.200,-20.718,-11.318]},{"start":219.32100,"duration":0.16703,"confidence":1.000,"loudness_start":-24.503,"loudness_max_time":0.03993,"loudness_max":-7.164,"pitches":[0.263,0.455,0.280,0.305,0.599,0.811,0.848,1.000,0.980,0.817,0.484,0.084],"timbre":[45.146,-101.420,-14.605,-22.081,5.543,88.362,11.763,10.805,-18.466,-39.698,0.240,-5.651]},{"start":219.48803,"duration":0.12649,"confidence":0.806,"loudness_start":-19.673,"loudness_max_time":0.02277,"loudness_max":-8.039,"pitches":[0.442,0.174,0.079,1.000,0.100,0.172,0.201,0.617,0.845,0.293,0.121,0.230],"timbre":[47.857,-105.521,33.593,35.290,32.613,-29.007,4.866,-2.959,-0.048,15.528,7.656,-24.234]},{"start":219.61451,"duration":0.15732,"confidence":0.502,"loudness_start":-15.408,"loudness_max_time":0.02941,"loudness_max":-8.063,"pitches":[1.000,0.488,0.059,0.093,0.080,0.132,0.071,0.197,0.409,0.147,0.229,0.395],"timbre":[46.776,-90.886,-27.158,18.021,64.059,-47.012,12.900,-40.424,-13.123,-26.279,15.999,-30.523]},{"start":219.77184,"duration":0.10757,"confidence":0.571,"loudness_start":-16.084,"loudness_max_time":0.01846,"loudness_max":-9.844,"pitches":[1.000,0.505,0.153,0.029,0.029,0.077,0.054,0.104,0.092,0.048,0.156,0.325],"timbre":[45.962,-125.358,-17.908,21.370,27.453,-46.344,-24.080,-19.339,-1.122,7.967,-0.437,-20.862]},{"start":219.87941,"duration":0.15855,"confidence":0.601,"loudness_start":-17.560,"loudness_max_time":0.04091,"loudness_max":-10.562,"pitches":[1.000,0.371,0.092,0.073,0.147,0.187,0.316,0.314,0.529,0.528,0.668,0.113],"timbre":[45.852,-141.562,-16.928,-25.633,48.173,-15.079,-8.464,5.099,17.794,0.292,-6.569,-28.119]},{"start":220.03796,"duration":0.13356,"confidence":0.168,"loudness_start":-16.266,"loudness_max_time":0.03955,"loudness_max":-13.335,"pitches":[1.000,0.388,0.042,0.013,0.026,0.092,0.041,0.090,0.294,0.097,0.275,0.147],"timbre":[44.579,-150.762,-14.955,-4.871,72.462,-41.064,-8.303,-16.164,5.987,4.892,-7.643,-25.501]},{"start":220.17152,"duration":0.14531,"confidence":0.838,"loudness_start":-17.655,"loudness_max_time":0.05971,"loudness_max":-8.155,"pitches":[1.000,0.369,0.020,0.024,0.026,0.118,0.060,0.092,0.180,0.117,0.490,0.082],"timbre":[47.386,-89.563,-19.768,-25.547,79.689,19.764,-5.729,-30.304,8.709,-33.367,-26.533,-38.344]},{"start":220.31683,"duration":0.13932,"confidence":0.380,"loudness_start":-15.930,"loudness_max_time":0.03748,"loudness_max":-10.502,"pitches":[1.000,0.438,0.017,0.015,0.022,0.074,0.022,0.061,0.056,0.055,0.378,0.062],"timbre":[46.028,-133.123,-4.645,7.430,69.613,-20.464,-25.049,-16.169,22.926,-5.717,-5.575,-21.260]},{"start":220.45615,"duration":0.13959,"confidence":0.746,"loudness_start":-17.633,"loudness_max_time":0.03567,"loudness_max":-7.109,"pitches":[1.000,0.813,0.123,0.105,0.092,0.132,0.136,0.200,0.442,0.362,0.614,0.054],"timbre":[46.715,-134.674,-28.145,13.344,38.043,3.943,-0.593,-18.730,21.053,-0.653,1.864,-20.075]},{"start":220.59574,"duration":0.14553,"confidence":0.330,"loudness_start":-17.009,"loudness_max_time":0.05780,"loudness_max":-13.284,"pitches":[1.000,0.149,0.059,0.068,0.035,0.108,0.040,0.112,0.648,0.097,0.057,0.160],"timbre":[44.793,-172.172,-16.623,-28.571,58.281,-30.928,-9.540,-1.329,19.291,-2.771,-19.196,-17.256]},{"start":220.74127,"duration":0.10934,"confidence":0.697,"loudness_start":-17.988,"loudness_max_time":0.04651,"loudness_max":-9.114,"pitches":[1.000,0.477,0.173,0.143,0.232,0.835,0.386,0.252,0.195,0.166,0.147,0.433],"timbre":[47.068,-87.931,-27.498,-34.264,71.704,-7.526,14.376,-8.837,-1.529,-47.280,8.558,-30.909]},{"start":220.85061,"duration":0.17020,"confidence":0.189,"loudness_start":-14.368,"loudness_max_time":0.07102,"loudness_max":-10.984,"pitches":[1.000,0.264,0.268,0.105,0.117,0.219,0.093,0.119,0.141,0.129,0.107,0.199],"timbre":[46.824,-118.770,4.210,-29.463,50.360,-37.182,-6.460,0.265,6.519,-1.149,-21.761,-16.498]},{"start":221.02082,"duration":0.30095,"confidence":0.836,"loudness_start":-15.664,"loudness_max_time":0.03601,"loudness_max":-4.122,"pitches":[1.000,0.195,0.064,0.159,0.198,0.864,0.163,0.115,0.644,0.108,0.508,0.104],"timbre":[49.223,-78.080,-8.838,11.909,48.891,32.715,-21.302,11.122,9.513,-26.432,-35.150,-13.156]},{"start":221.32177,"duration":0.11542,"confidence":0.693,"loudness_start":-18.571,"loudness_max_time":0.03417,"loudness_max":-9.165,"pitches":[1.000,0.275,0.083,0.497,0.122,0.194,0.069,0.089,0.379,0.063,0.072,0.335],"timbre":[44.877,-82.400,-78.436,24.754,46.973,-13.883,-36.638,-54.790,-29.216,-10.418,-0.318,-25.956]},{"start":221.43719,"duration":0.18009,"confidence":1.000,"loudness_start":-21.067,"loudness_max_time":0.05281,"loudness_max":-4.049,"pitches":[1.000,0.071,0.073,0.177,0.059,0.152,0.039,0.116,0.083,0.039,0.022,0.080],"timbre":[48.828,-80.705,52.791,-69.224,34.793,58.937,31.550,7.602,3.437,-27.596,0.870,19.035]},{"start":221.61728,"duration":0.15052,"confidence":0.285,"loudness_start":-10.526,"loudness_max_time":0.00397,"loudness_max":-6.196,"pitches":[1.000,0.289,0.188,0.389,0.330,0.648,0.700,0.608,0.867,0.863,0.665,0.137],"timbre":[51.253,-69.475,53.941,25.090,-2.329,-52.123,39.727,-3.125,-23.813,-5.386,-4.715,35.565]},{"start":221.76780,"duration":0.12853,"confidence":0.109,"loudness_start":-12.677,"loudness_max_time":0.00381,"loudness_max":-7.988,"pitches":[0.601,0.144,0.218,0.930,0.347,1.000,0.335,0.184,0.100,0.073,0.073,0.130],"timbre":[48.762,-96.399,49.456,36.812,41.475,-56.665,3.566,-15.694,10.359,19.445,-21.586,-5.799]},{"start":221.89633,"duration":0.14971,"confidence":0.347,"loudness_start":-14.755,"loudness_max_time":0.01227,"loudness_max":-7.259,"pitches":[1.000,0.471,0.060,0.093,0.109,0.349,0.093,0.079,0.089,0.086,0.242,0.274],"timbre":[47.196,-89.449,-23.513,9.700,56.965,-80.856,-3.172,-38.021,-16.662,18.932,2.361,-16.005]},{"start":222.04603,"duration":0.25043,"confidence":0.596,"loudness_start":-14.957,"loudness_max_time":0.07785,"loudness_max":-8.378,"pitches":[1.000,0.293,0.273,0.222,0.222,0.302,0.218,0.199,0.090,0.091,0.089,0.538],"timbre":[47.278,-117.365,15.421,-44.646,32.413,-22.875,2.574,-1.813,5.868,8.133,-21.370,-2.843]},{"start":222.29646,"duration":0.12789,"confidence":0.065,"loudness_start":-15.929,"loudness_max_time":0.04807,"loudness_max":-12.766,"pitches":[1.000,0.409,0.059,0.033,0.041,0.053,0.058,0.115,0.136,0.060,0.243,0.171],"timbre":[45.258,-133.333,0.098,-6.480,63.801,-42.868,-8.815,8.443,18.040,-3.672,-10.950,-17.484]},{"start":222.42435,"duration":0.14345,"confidence":0.824,"loudness_start":-17.309,"loudness_max_time":0.06184,"loudness_max":-6.316,"pitches":[1.000,0.413,0.037,0.036,0.041,0.074,0.055,0.055,0.118,0.146,0.489,0.088],"timbre":[47.013,-101.230,-5.502,-24.056,82.811,11.808,-9.585,-6.289,11.309,-35.032,-41.347,-37.984]},{"start":222.56780,"duration":0.15111,"confidence":0.287,"loudness_start":-16.486,"loudness_max_time":0.03297,"loudness_max":-12.467,"pitches":[1.000,0.522,0.055,0.018,0.019,0.057,0.021,0.085,0.045,0.049,0.442,0.087],"timbre":[44.868,-132.506,-2.611,-2.013,64.207,-27.339,-16.384,-13.029,2.642,1.298,-14.672,-25.649]},{"start":222.71891,"duration":0.13959,"confidence":0.797,"loudness_start":-18.322,"loudness_max_time":0.03798,"loudness_max":-7.594,"pitches":[0.952,1.000,0.245,0.250,0.437,0.604,0.526,0.515,0.446,0.451,0.273,0.084],"timbre":[46.592,-142.613,-19.580,15.094,59.382,4.111,-2.949,-5.961,9.924,-2.500,0.352,-25.900]},{"start":222.85850,"duration":0.12240,"confidence":0.449,"loudness_start":-17.477,"loudness_max_time":0.05200,"loudness_max":-12.337,"pitches":[1.000,0.213,0.079,0.046,0.123,0.514,0.239,0.118,0.085,0.092,0.078,0.120],"timbre":[44.819,-154.227,-14.746,1.615,71.801,-27.109,-6.264,-11.672,13.569,-3.438,-16.590,-30.947]},{"start":222.98091,"duration":0.17533,"confidence":0.795,"loudness_start":-18.323,"loudness_max_time":0.06376,"loudness_max":-8.585,"pitches":[0.931,0.127,0.079,0.113,0.147,1.000,0.196,0.141,0.080,0.073,0.141,0.098],"timbre":[44.917,-137.140,-28.634,-33.524,90.342,1.056,3.366,0.638,13.574,-33.529,-37.114,-30.236]},{"start":223.15624,"duration":0.12100,"confidence":0.607,"loudness_start":-18.619,"loudness_max_time":0.03556,"loudness_max":-11.842,"pitches":[1.000,0.377,0.347,0.103,0.106,0.522,0.141,0.271,0.130,0.086,0.105,0.283],"timbre":[44.735,-136.138,-21.910,-5.265,43.096,-20.041,-7.580,-14.267,20.430,0.771,9.560,-28.429]},{"start":223.27723,"duration":0.31256,"confidence":0.952,"loudness_start":-17.346,"loudness_max_time":0.09517,"loudness_max":-4.839,"pitches":[0.171,0.044,0.068,0.433,0.112,1.000,0.170,0.035,0.395,0.029,0.027,0.018],"timbre":[48.748,-82.382,-4.198,-12.725,52.499,43.796,-19.273,21.483,16.046,-40.133,-40.313,-20.209]},{"start":223.58980,"duration":0.10535,"confidence":0.496,"loudness_start":-18.578,"loudness_max_time":0.02333,"loudness_max":-11.104,"pitches":[0.592,0.352,0.248,1.000,0.263,0.110,0.102,0.181,0.786,0.140,0.146,0.289],"timbre":[43.512,-86.673,-95.894,18.695,62.937,-47.556,-22.251,-58.360,-38.176,3.774,-2.552,-20.396]},{"start":223.69515,"duration":0.15161,"confidence":1.000,"loudness_start":-21.856,"loudness_max_time":0.06088,"loudness_max":-4.233,"pitches":[1.000,0.131,0.070,0.271,0.081,0.305,0.088,0.167,0.171,0.036,0.047,0.211],"timbre":[47.892,-67.294,42.695,-101.967,20.129,56.456,41.875,5.348,7.605,-28.006,-7.235,16.912]},{"start":223.84676,"duration":0.30639,"confidence":0.359,"loudness_start":-10.374,"loudness_max_time":0.05472,"loudness_max":-6.292,"pitches":[1.000,0.303,0.197,0.639,0.397,0.987,0.412,0.142,0.478,0.119,0.111,0.510],"timbre":[51.103,-66.307,58.644,21.979,2.878,-23.088,41.576,-4.049,-14.365,-17.423,-13.335,29.364]},{"start":224.15315,"duration":0.10467,"confidence":0.109,"loudness_start":-12.936,"loudness_max_time":0.01880,"loudness_max":-8.401,"pitches":[1.000,0.356,0.054,0.119,0.078,0.230,0.090,0.109,0.069,0.066,0.149,0.408],"timbre":[47.303,-87.652,-17.413,17.209,62.332,-57.279,6.650,-37.971,-5.487,-1.437,-0.094,-19.813]},{"start":224.25782,"duration":0.41111,"confidence":0.616,"loudness_start":-16.877,"loudness_max_time":0.04957,"loudness_max":-8.055,"pitches":[1.000,0.177,0.216,0.184,0.182,0.288,0.212,0.188,0.164,0.155,0.243,0.510],"timbre":[47.051,-102.975,20.015,-33.595,40.269,-1.122,-4.474,-7.489,13.328,-8.997,-31.297,-10.420]},{"start":224.66893,"duration":0.17624,"confidence":0.683,"loudness_start":-17.889,"loudness_max_time":0.06782,"loudness_max":-10.512,"pitches":[1.000,0.325,0.010,0.013,0.027,0.202,0.032,0.017,0.026,0.024,0.292,0.071],"timbre":[44.820,-118.253,-4.083,-60.077,87.921,-27.255,-5.707,14.485,6.782,-18.981,-27.539,-29.018]},{"start":224.84517,"duration":0.14376,"confidence":0.453,"loudness_start":-17.600,"loudness_max_time":0.03615,"loudness_max":-11.498,"pitches":[1.000,0.520,0.061,0.025,0.030,0.108,0.038,0.132,0.069,0.047,0.312,0.076],"timbre":[45.466,-120.900,3.663,12.699,65.768,-32.380,-15.783,-7.765,4.523,1.229,-2.488,-31.596]},{"start":224.98893,"duration":0.13361,"confidence":0.695,"loudness_start":-18.262,"loudness_max_time":0.03193,"loudness_max":-8.520,"pitches":[0.454,0.604,0.306,0.312,0.562,0.610,0.818,0.888,1.000,0.894,0.491,0.052],"timbre":[46.140,-145.858,-24.035,21.276,45.075,-19.702,-6.172,-21.136,12.607,9.497,7.786,-31.773]},{"start":225.12254,"duration":0.15333,"confidence":0.443,"loudness_start":-17.693,"loudness_max_time":0.03213,"loudness_max":-12.896,"pitches":[1.000,0.191,0.089,0.077,0.045,0.099,0.040,0.145,0.570,0.110,0.123,0.147],"timbre":[45.141,-158.972,-17.392,-15.436,65.058,-38.989,-6.481,7.174,11.184,-5.855,-7.918,-28.779]},{"start":225.27587,"duration":0.10880,"confidence":0.780,"loudness_start":-16.890,"loudness_max_time":0.04050,"loudness_max":-7.286,"pitches":[1.000,0.317,0.082,0.069,0.100,0.338,0.140,0.128,0.206,0.248,0.476,0.290],"timbre":[46.968,-91.895,-42.258,15.420,62.690,7.768,2.896,-42.667,1.085,-29.789,-11.650,-47.816]},{"start":225.38467,"duration":0.16200,"confidence":0.514,"loudness_start":-17.717,"loudness_max_time":0.05456,"loudness_max":-11.542,"pitches":[1.000,0.217,0.165,0.072,0.081,0.071,0.060,0.079,0.096,0.073,0.289,0.193],"timbre":[45.007,-165.237,-9.936,-34.123,78.619,-17.179,-3.044,-2.149,12.172,-3.511,-22.414,-24.908]},{"start":225.54667,"duration":0.30299,"confidence":0.964,"loudness_start":-17.680,"loudness_max_time":0.08322,"loudness_max":-4.121,"pitches":[1.000,0.115,0.069,0.118,0.114,0.599,0.104,0.068,0.473,0.059,0.040,0.066],"timbre":[48.727,-82.307,-3.184,-9.321,45.313,55.513,-10.928,4.669,14.747,-41.117,-24.740,-16.922]},{"start":225.84966,"duration":0.12213,"confidence":0.405,"loudness_start":-17.382,"loudness_max_time":0.04540,"loudness_max":-11.756,"pitches":[1.000,0.303,0.143,0.970,0.425,0.942,0.405,0.244,0.732,0.094,0.041,0.455],"timbre":[43.842,-87.482,-93.975,7.212,58.851,-19.884,-24.153,-54.847,-35.012,-13.386,-15.473,-18.249]},{"start":225.97179,"duration":0.18027,"confidence":1.000,"loudness_start":-22.195,"loudness_max_time":0.04696,"loudness_max":-4.502,"pitches":[1.000,0.087,0.133,0.205,0.085,0.222,0.069,0.207,0.669,0.114,0.033,0.126],"timbre":[49.194,-67.559,48.921,-49.887,24.442,62.506,40.307,1.551,-1.979,-20.959,14.721,25.500]},{"start":226.15206,"duration":0.14308,"confidence":0.328,"loudness_start":-10.493,"loudness_max_time":0.00365,"loudness_max":-4.903,"pitches":[1.000,0.395,0.178,0.271,0.249,0.279,0.353,0.362,0.499,0.489,0.642,0.075],"timbre":[50.695,-52.025,65.737,46.025,-4.753,-59.078,48.997,-4.224,-18.031,-6.053,-18.211,41.939]},{"start":226.29515,"duration":0.12902,"confidence":0.360,"loudness_start":-14.469,"loudness_max_time":0.01515,"loudness_max":-7.337,"pitches":[0.860,0.226,0.116,1.000,0.164,0.275,0.153,0.199,0.120,0.112,0.092,0.310],"timbre":[48.556,-76.504,72.958,42.385,39.942,-62.474,-15.469,-15.277,1.290,20.439,-10.930,-20.090]},{"start":226.42417,"duration":0.13950,"confidence":0.352,"loudness_start":-14.496,"loudness_max_time":0.01236,"loudness_max":-7.972,"pitches":[1.000,0.495,0.045,0.066,0.067,0.224,0.040,0.077,0.081,0.083,0.239,0.323],"timbre":[46.695,-90.511,-23.397,13.558,64.659,-80.927,0.110,-43.511,-13.179,13.008,-1.871,-16.432]},{"start":226.56367,"duration":0.07519,"confidence":0.294,"loudness_start":-15.980,"loudness_max_time":0.01249,"loudness_max":-12.749,"pitches":[1.000,0.427,0.246,0.259,0.062,0.078,0.210,0.291,0.416,0.366,0.710,0.344],"timbre":[45.863,-136.704,3.395,-25.186,36.213,-56.187,-11.630,-16.364,0.974,13.855,9.147,-21.389]},{"start":226.63887,"duration":0.34789,"confidence":0.406,"loudness_start":-15.446,"loudness_max_time":0.07483,"loudness_max":-7.090,"pitches":[1.000,0.167,0.099,0.064,0.087,0.135,0.150,0.112,0.064,0.066,0.245,0.401],"timbre":[47.593,-120.335,10.604,18.558,38.129,-53.341,0.968,-12.002,3.724,12.809,-21.855,1.178]},{"start":226.98676,"duration":0.08776,"confidence":0.546,"loudness_start":-16.997,"loudness_max_time":0.01814,"loudness_max":-10.060,"pitches":[1.000,0.344,0.247,0.250,0.031,0.243,0.256,0.257,0.299,0.258,0.587,0.570],"timbre":[45.300,-114.122,-63.557,16.663,100.833,-67.372,-7.478,-58.471,-24.556,17.368,1.589,-22.822]},{"start":227.07451,"duration":0.17937,"confidence":0.740,"loudness_start":-18.105,"loudness_max_time":0.09553,"loudness_max":-10.511,"pitches":[1.000,0.473,0.033,0.033,0.032,0.053,0.033,0.112,0.199,0.051,0.210,0.108],"timbre":[45.552,-134.572,16.895,-73.562,77.817,-14.115,-6.572,21.347,9.245,-15.845,-18.615,-25.110]},{"start":227.25388,"duration":0.17896,"confidence":0.562,"loudness_start":-14.800,"loudness_max_time":0.02989,"loudness_max":-7.103,"pitches":[0.522,0.351,0.152,0.157,0.323,0.448,0.549,0.577,1.000,0.734,0.660,0.031],"timbre":[47.645,-127.898,-20.845,19.505,41.527,-31.544,-13.305,-15.680,12.945,8.080,13.641,-19.520]},{"start":227.43283,"duration":0.10494,"confidence":0.343,"loudness_start":-15.201,"loudness_max_time":0.01732,"loudness_max":-11.691,"pitches":[0.859,0.194,0.068,0.042,0.042,0.187,0.144,0.356,1.000,0.211,0.050,0.073],"timbre":[45.176,-141.975,-10.301,-2.545,40.290,-68.528,-15.448,-18.948,6.569,16.954,-8.348,-20.477]},{"start":227.53778,"duration":0.13755,"confidence":0.659,"loudness_start":-17.360,"loudness_max_time":0.04730,"loudness_max":-9.345,"pitches":[1.000,0.113,0.047,0.052,0.085,0.543,0.159,0.368,0.784,0.198,0.082,0.110],"timbre":[46.422,-111.118,-41.776,0.560,78.408,-16.878,2.937,-43.862,1.429,-24.559,-7.735,-35.971]},{"start":227.67533,"duration":0.13406,"confidence":0.450,"loudness_start":-16.883,"loudness_max_time":0.02825,"loudness_max":-11.487,"pitches":[1.000,0.260,0.249,0.113,0.118,0.272,0.099,0.441,0.557,0.240,0.108,0.195],"timbre":[45.092,-165.368,-24.604,-3.489,57.266,-24.749,-6.978,-10.554,4.243,-4.158,-6.136,-26.719]},{"start":227.80939,"duration":0.29773,"confidence":0.908,"loudness_start":-17.599,"loudness_max_time":0.03918,"loudness_max":-5.343,"pitches":[0.164,0.054,0.042,0.369,0.119,1.000,0.175,0.044,0.354,0.032,0.041,0.038],"timbre":[48.555,-81.350,-8.932,-9.374,47.161,41.373,-12.505,9.452,13.044,-41.200,-28.348,-15.318]},{"start":228.10712,"duration":0.12240,"confidence":0.473,"loudness_start":-17.474,"loudness_max_time":0.03152,"loudness_max":-11.281,"pitches":[0.617,0.180,0.167,1.000,0.174,0.368,0.081,0.089,0.571,0.065,0.069,0.207],"timbre":[43.833,-90.381,-98.404,4.068,68.643,-24.427,-17.020,-50.589,-29.265,-27.736,-5.664,-28.814]},{"start":228.22952,"duration":0.18571,"confidence":1.000,"loudness_start":-21.882,"loudness_max_time":0.05345,"loudness_max":-4.142,"pitches":[1.000,0.040,0.100,0.523,0.073,0.222,0.073,0.253,0.136,0.036,0.033,0.114],"timbre":[48.741,-75.075,38.575,-75.657,28.964,62.835,37.559,6.190,3.575,-14.445,4.810,18.682]},{"start":228.41524,"duration":0.14503,"confidence":0.312,"loudness_start":-9.966,"loudness_max_time":0.00680,"loudness_max":-5.672,"pitches":[1.000,0.529,0.290,0.422,0.476,0.735,0.614,0.537,0.643,0.606,0.723,0.043],"timbre":[51.495,-52.434,60.508,34.448,-1.503,-48.132,36.043,-0.843,-21.838,5.358,-11.814,47.283]},{"start":228.56027,"duration":0.12159,"confidence":0.209,"loudness_start":-11.955,"loudness_max_time":0.03621,"loudness_max":-7.979,"pitches":[0.424,0.235,0.683,1.000,0.138,0.328,0.184,0.289,0.955,0.224,0.068,0.031],"timbre":[49.526,-94.156,42.301,20.098,39.131,-42.748,1.861,-16.831,8.664,6.456,-12.568,-4.007]},{"start":228.68186,"duration":0.28449,"confidence":0.582,"loudness_start":-12.902,"loudness_max_time":0.02764,"loudness_max":-5.141,"pitches":[0.329,0.576,1.000,0.245,0.118,0.177,0.100,0.294,0.241,0.196,0.158,0.176],"timbre":[49.919,-76.671,-3.232,27.423,48.779,-42.053,9.622,-27.927,-1.519,4.237,17.331,-21.877]},{"start":228.96635,"duration":0.09302,"confidence":0.151,"loudness_start":-15.578,"loudness_max_time":0.02132,"loudness_max":-9.645,"pitches":[1.000,0.782,0.504,0.440,0.656,0.767,0.867,0.814,0.810,0.816,0.686,0.073],"timbre":[45.507,-145.693,-25.067,27.436,26.690,-66.284,-14.825,-10.696,5.737,17.865,10.566,5.870]},{"start":229.05937,"duration":0.17896,"confidence":0.329,"loudness_start":-18.773,"loudness_max_time":0.06014,"loudness_max":-13.859,"pitches":[0.327,1.000,0.285,0.085,0.125,0.666,0.177,0.232,0.395,0.184,0.108,0.039],"timbre":[42.705,-146.134,-26.952,-27.636,47.420,-31.420,-19.931,15.377,-12.350,1.036,-25.054,13.511]},{"start":229.23832,"duration":0.12707,"confidence":0.862,"loudness_start":-19.738,"loudness_max_time":0.05061,"loudness_max":-9.631,"pitches":[0.665,1.000,0.716,0.173,0.158,0.951,0.338,0.290,0.587,0.594,0.572,0.215],"timbre":[46.041,-64.090,-53.179,4.001,46.588,9.008,-39.564,-34.190,-24.249,-41.396,-1.661,-19.976]},{"start":229.36540,"duration":0.15338,"confidence":0.427,"loudness_start":-20.283,"loudness_max_time":0.03823,"loudness_max":-12.824,"pitches":[0.363,1.000,0.399,0.098,0.093,1.000,0.331,0.246,0.099,0.178,0.640,0.094],"timbre":[43.281,-117.567,-35.456,-1.330,45.521,-5.708,-53.167,-20.170,-3.581,-14.319,0.012,-4.802]},{"start":229.51878,"duration":0.12082,"confidence":0.886,"loudness_start":-21.876,"loudness_max_time":0.03039,"loudness_max":-7.703,"pitches":[0.891,0.745,0.248,0.195,0.410,0.520,0.687,0.666,1.000,0.945,0.978,0.102],"timbre":[45.443,-148.520,-46.968,33.439,26.326,7.430,-4.934,-14.411,-2.603,-9.224,21.556,-3.822]},{"start":229.63959,"duration":0.13909,"confidence":0.393,"loudness_start":-20.002,"loudness_max_time":0.04336,"loudness_max":-14.363,"pitches":[0.290,0.097,0.207,0.081,0.204,0.961,0.455,0.310,1.000,0.234,0.187,0.048],"timbre":[41.401,-178.858,-68.900,-25.135,54.121,-17.098,-10.961,-0.871,-8.512,-35.011,-21.798,-4.266]},{"start":229.77868,"duration":0.14971,"confidence":0.938,"loudness_start":-23.221,"loudness_max_time":0.06517,"loudness_max":-10.315,"pitches":[0.147,0.249,0.630,0.139,0.252,1.000,0.451,0.109,0.121,0.085,0.106,0.095],"timbre":[42.808,-131.416,-69.601,-58.077,67.358,31.748,-14.482,14.064,-2.391,-73.686,-28.817,-16.767]},{"start":229.92839,"duration":0.11633,"confidence":0.674,"loudness_start":-21.559,"loudness_max_time":0.04272,"loudness_max":-13.107,"pitches":[0.407,0.535,0.469,0.265,0.280,1.000,0.746,0.348,0.250,0.154,0.188,0.460],"timbre":[42.158,-154.144,-68.719,-23.853,47.480,7.920,-25.016,-3.774,-9.484,-24.098,-18.947,-19.600]},{"start":230.04472,"duration":0.33234,"confidence":1.000,"loudness_start":-22.378,"loudness_max_time":0.06789,"loudness_max":-4.855,"pitches":[0.043,0.032,0.101,0.029,0.092,1.000,0.124,0.026,0.039,0.041,0.160,0.017],"timbre":[45.308,-99.900,-19.207,-97.547,46.824,20.077,-19.960,16.621,-12.069,-30.122,-33.961,-5.038]},{"start":230.37705,"duration":0.11478,"confidence":0.759,"loudness_start":-17.878,"loudness_max_time":0.03329,"loudness_max":-7.907,"pitches":[0.677,0.209,0.338,0.091,0.101,0.591,0.141,1.000,0.207,0.165,0.153,0.233],"timbre":[46.170,-101.652,-72.889,25.336,60.908,-6.993,-27.517,-62.945,-23.094,-9.106,4.954,-22.147]},{"start":230.49184,"duration":0.12966,"confidence":0.122,"loudness_start":-18.857,"loudness_max_time":0.04494,"loudness_max":-14.294,"pitches":[0.799,0.150,0.187,0.026,0.048,0.512,0.164,1.000,0.283,0.086,0.073,0.153],"timbre":[42.009,-160.822,-53.446,1.221,37.608,-21.686,-41.236,-19.602,5.359,-10.884,-11.544,-10.524]},{"start":230.62150,"duration":0.31288,"confidence":0.951,"loudness_start":-22.377,"loudness_max_time":0.05698,"loudness_max":-8.452,"pitches":[0.552,0.356,0.424,0.286,0.321,1.000,0.479,0.913,0.364,0.244,0.097,0.444],"timbre":[43.500,-109.180,-10.045,-50.057,-4.804,24.813,-1.756,13.518,-23.783,-32.822,-20.381,3.018]},{"start":230.93438,"duration":0.30744,"confidence":1.000,"loudness_start":-21.338,"loudness_max_time":0.03619,"loudness_max":-4.963,"pitches":[0.188,0.393,1.000,0.186,0.077,0.280,0.100,0.290,0.086,0.105,0.061,0.158],"timbre":[48.581,-98.240,-6.743,8.971,57.457,33.914,35.113,-24.595,-6.442,-8.462,15.983,-17.881]},{"start":231.24181,"duration":0.09841,"confidence":0.259,"loudness_start":-15.707,"loudness_max_time":0.00159,"loudness_max":-10.730,"pitches":[0.972,0.897,0.300,0.256,0.495,0.800,0.805,0.774,0.941,0.921,1.000,0.078],"timbre":[43.553,-159.802,-34.390,14.586,11.468,-86.449,-19.756,-35.123,3.435,17.163,-16.121,2.876]},{"start":231.34023,"duration":0.14426,"confidence":0.526,"loudness_start":-20.193,"loudness_max_time":0.04741,"loudness_max":-13.401,"pitches":[0.375,1.000,0.292,0.077,0.118,0.454,0.238,0.176,0.216,0.111,0.109,0.099],"timbre":[41.934,-148.480,-53.414,-12.266,53.588,-10.978,-29.630,1.030,0.852,-37.869,-19.677,-6.716]},{"start":231.48449,"duration":0.15673,"confidence":0.961,"loudness_start":-22.145,"loudness_max_time":0.05234,"loudness_max":-8.134,"pitches":[0.166,0.564,0.230,0.081,0.123,1.000,0.212,0.097,0.167,0.382,0.484,0.067],"timbre":[45.217,-93.374,-51.162,-14.451,59.696,21.570,-42.304,-13.897,-14.993,-49.365,-26.922,-16.122]},{"start":231.64122,"duration":0.14766,"confidence":0.553,"loudness_start":-19.807,"loudness_max_time":0.01519,"loudness_max":-13.295,"pitches":[0.311,0.899,0.778,0.102,0.103,1.000,0.179,0.217,0.070,0.156,0.499,0.069],"timbre":[43.227,-132.687,-43.011,6.286,40.450,-27.770,-55.990,-28.198,-10.451,0.069,3.579,-4.547]},{"start":231.78889,"duration":0.09551,"confidence":0.896,"loudness_start":-21.203,"loudness_max_time":0.02354,"loudness_max":-7.452,"pitches":[1.000,0.840,0.115,0.095,0.223,0.259,0.427,0.434,0.680,0.631,0.828,0.124],"timbre":[45.007,-145.463,-64.328,63.395,37.138,-30.800,-9.964,-12.729,-7.323,5.358,3.740,1.135]},{"start":231.88440,"duration":0.16463,"confidence":0.677,"loudness_start":-22.100,"loudness_max_time":0.07692,"loudness_max":-13.756,"pitches":[0.199,0.071,0.382,0.090,0.185,1.000,0.337,0.140,0.120,0.078,0.119,0.043],"timbre":[41.378,-173.130,-45.040,-50.126,48.614,-3.830,-27.214,3.025,10.310,-24.226,-19.661,2.111]},{"start":232.04902,"duration":0.14476,"confidence":0.924,"loudness_start":-22.336,"loudness_max_time":0.04798,"loudness_max":-8.713,"pitches":[0.129,0.112,0.134,0.095,0.240,1.000,0.307,0.095,0.110,0.077,0.096,0.072],"timbre":[43.817,-118.262,-78.083,-20.509,66.765,29.897,-16.207,-8.037,-7.503,-65.406,-23.682,-19.041]},{"start":232.19379,"duration":0.14068,"confidence":0.626,"loudness_start":-20.904,"loudness_max_time":0.03762,"loudness_max":-12.645,"pitches":[0.439,0.544,1.000,0.184,0.195,0.932,0.362,0.204,0.172,0.104,0.161,0.303],"timbre":[42.041,-163.434,-80.539,-6.894,54.125,-15.787,-28.998,7.690,-20.541,-28.925,-18.122,-14.206]},{"start":232.33447,"duration":0.31850,"confidence":1.000,"loudness_start":-22.880,"loudness_max_time":0.04186,"loudness_max":-4.374,"pitches":[0.026,0.034,0.104,0.216,0.083,1.000,0.118,0.031,0.037,0.029,0.017,0.012],"timbre":[48.257,-80.389,-23.659,-41.148,36.019,62.988,-24.695,8.344,-5.461,-43.582,-31.723,-1.827]},{"start":232.65297,"duration":0.11002,"confidence":0.372,"loudness_start":-18.203,"loudness_max_time":0.02052,"loudness_max":-11.675,"pitches":[0.556,0.261,0.138,0.065,0.062,0.365,0.127,1.000,0.202,0.114,0.067,0.292],"timbre":[44.528,-111.398,-84.332,3.037,79.079,-54.832,-24.621,-61.925,-40.492,28.454,-16.619,-17.636]},{"start":232.76299,"duration":0.15270,"confidence":0.298,"loudness_start":-20.003,"loudness_max_time":0.03032,"loudness_max":-13.082,"pitches":[0.931,0.147,0.966,0.107,0.070,0.420,0.107,1.000,0.466,0.179,0.057,0.238],"timbre":[41.443,-161.324,-81.061,27.840,34.441,-32.881,-40.492,-22.745,-3.270,-2.434,-3.119,-12.166]},{"start":232.91569,"duration":0.29361,"confidence":1.000,"loudness_start":-24.556,"loudness_max_time":0.02651,"loudness_max":-7.305,"pitches":[0.411,0.224,0.300,0.215,0.307,1.000,0.513,0.868,0.728,0.211,0.156,0.344],"timbre":[45.194,-94.770,-37.668,30.216,-11.589,46.263,2.099,-0.636,-36.675,-13.542,30.823,-4.199]},{"start":233.20930,"duration":0.15320,"confidence":0.986,"loudness_start":-20.115,"loudness_max_time":0.02472,"loudness_max":-4.183,"pitches":[0.224,1.000,0.268,0.061,0.035,0.134,0.101,0.967,0.208,0.221,0.142,0.067],"timbre":[50.083,-76.413,27.479,31.107,52.733,-25.020,50.461,-24.000,1.130,19.016,33.033,-31.842]},{"start":233.36249,"duration":0.11841,"confidence":0.259,"loudness_start":-13.353,"loudness_max_time":0.00088,"loudness_max":-7.131,"pitches":[0.684,1.000,0.316,0.056,0.060,0.541,0.109,0.268,0.141,0.048,0.056,0.140],"timbre":[47.771,-126.606,14.453,32.051,25.748,-75.381,-1.167,-30.909,-0.008,14.155,-18.565,-1.622]},{"start":233.48091,"duration":0.12399,"confidence":0.375,"loudness_start":-15.683,"loudness_max_time":0.02617,"loudness_max":-9.837,"pitches":[0.880,0.485,0.134,0.113,0.204,0.343,0.467,0.445,0.815,0.804,1.000,0.061],"timbre":[44.818,-133.709,-49.392,28.534,29.243,-29.574,-11.061,-28.651,13.226,-26.282,2.414,-8.894]},{"start":233.60490,"duration":0.11900,"confidence":0.475,"loudness_start":-20.975,"loudness_max_time":0.04798,"loudness_max":-14.815,"pitches":[0.376,1.000,0.288,0.094,0.149,0.407,0.295,0.125,0.213,0.077,0.040,0.128],"timbre":[42.285,-136.900,-54.207,-8.962,54.673,-14.069,-36.530,-2.261,7.571,-34.237,-6.646,-4.601]},{"start":233.72390,"duration":0.15864,"confidence":0.843,"loudness_start":-22.338,"loudness_max_time":0.07726,"loudness_max":-10.852,"pitches":[0.408,1.000,0.475,0.064,0.185,0.730,0.378,0.089,0.141,0.151,0.140,0.150],"timbre":[41.677,-133.765,-59.094,-84.918,97.770,-3.160,-22.842,19.476,-20.428,-38.602,-31.869,-8.825]},{"start":233.88254,"duration":0.15819,"confidence":0.758,"loudness_start":-22.154,"loudness_max_time":0.05422,"loudness_max":-12.832,"pitches":[0.554,0.873,0.920,0.148,0.164,1.000,0.476,0.345,0.130,0.239,0.105,0.244],"timbre":[42.730,-124.163,-34.896,-24.078,56.130,16.660,-49.663,-18.912,-6.135,-15.065,-6.860,-8.122]},{"start":234.04073,"duration":0.14435,"confidence":0.818,"loudness_start":-20.919,"loudness_max_time":0.03435,"loudness_max":-8.644,"pitches":[1.000,0.877,0.283,0.244,0.444,0.661,0.581,0.685,0.979,0.807,0.867,0.113],"timbre":[43.217,-166.350,-58.852,34.946,39.313,18.506,-4.748,-19.366,-0.491,-21.008,-0.875,1.663]},{"start":234.18508,"duration":0.12789,"confidence":0.716,"loudness_start":-22.732,"loudness_max_time":0.03277,"loudness_max":-14.387,"pitches":[0.083,0.074,0.205,0.057,0.140,1.000,0.254,0.130,0.452,0.091,0.055,0.026],"timbre":[41.993,-168.517,-72.722,-1.743,54.990,-34.954,-25.547,-23.287,-18.697,-21.602,-6.688,-11.163]},{"start":234.31297,"duration":0.14549,"confidence":0.960,"loudness_start":-22.710,"loudness_max_time":0.05957,"loudness_max":-8.103,"pitches":[0.190,0.072,0.185,0.069,0.198,1.000,0.328,0.140,0.235,0.170,0.342,0.067],"timbre":[44.716,-97.003,-57.857,-40.183,46.547,38.478,-25.562,-6.532,-4.049,-57.263,-36.835,-20.012]},{"start":234.45846,"duration":0.14553,"confidence":0.626,"loudness_start":-20.800,"loudness_max_time":0.04091,"loudness_max":-12.262,"pitches":[0.224,0.300,0.321,0.137,0.156,1.000,0.363,0.190,0.114,0.157,0.451,0.297],"timbre":[42.793,-139.736,-71.427,-14.504,49.246,-5.920,-24.896,-7.713,-12.016,-18.942,-26.957,-8.503]},{"start":234.60399,"duration":0.31311,"confidence":1.000,"loudness_start":-21.841,"loudness_max_time":0.03630,"loudness_max":-5.284,"pitches":[0.255,0.038,0.065,0.028,0.089,1.000,0.146,0.029,0.038,0.061,0.022,0.028],"timbre":[48.154,-73.083,-28.868,-20.340,37.698,59.806,-19.813,0.011,-0.295,-42.756,-10.893,1.812]},{"start":234.91710,"duration":0.10327,"confidence":0.433,"loudness_start":-16.910,"loudness_max_time":0.01741,"loudness_max":-11.317,"pitches":[0.122,0.115,0.323,0.167,0.225,0.687,0.332,1.000,0.200,0.154,0.126,0.071],"timbre":[45.108,-109.725,-72.032,9.340,70.824,-57.447,-23.643,-62.390,-45.387,31.629,-16.518,-13.511]},{"start":235.02036,"duration":0.18236,"confidence":0.192,"loudness_start":-19.200,"loudness_max_time":0.03211,"loudness_max":-13.936,"pitches":[0.034,0.057,0.397,0.043,0.030,0.157,0.144,1.000,0.752,0.102,0.036,0.046],"timbre":[42.738,-161.720,-34.689,-12.261,28.295,-16.918,-32.401,-18.531,2.243,-14.287,2.884,-11.345]},{"start":235.20272,"duration":0.13546,"confidence":0.887,"loudness_start":-20.312,"loudness_max_time":0.00615,"loudness_max":-7.477,"pitches":[0.606,0.237,0.238,0.151,0.139,0.182,0.548,0.829,1.000,0.857,0.804,0.076],"timbre":[46.331,-83.060,-4.984,44.743,-42.455,-69.779,-2.174,-13.961,-41.769,-17.560,-22.300,21.192]},{"start":235.33819,"duration":0.14222,"confidence":0.706,"loudness_start":-19.787,"loudness_max_time":0.02739,"loudness_max":-9.529,"pitches":[0.400,0.116,0.174,0.028,0.036,0.157,0.172,1.000,0.602,0.136,0.093,0.158],"timbre":[45.574,-42.606,-14.012,10.119,-38.571,-4.707,-31.779,-22.767,-31.855,-13.792,13.627,-11.425]},{"start":235.48041,"duration":0.27088,"confidence":0.883,"loudness_start":-18.265,"loudness_max_time":0.01819,"loudness_max":-5.158,"pitches":[0.115,0.486,1.000,0.255,0.076,0.199,0.082,0.391,0.107,0.132,0.075,0.142],"timbre":[49.701,-86.374,6.048,42.407,54.707,-41.253,26.883,-26.106,-4.944,26.895,-5.196,-12.046]},{"start":235.75129,"duration":0.26780,"confidence":0.459,"loudness_start":-15.470,"loudness_max_time":0.01517,"loudness_max":-9.218,"pitches":[0.342,0.667,1.000,0.284,0.135,0.621,0.173,0.089,0.091,0.070,0.294,0.251],"timbre":[44.641,-129.453,-47.584,35.498,24.424,-59.421,-35.633,-19.139,-15.361,2.263,0.521,-7.848]},{"start":236.01909,"duration":0.13302,"confidence":0.845,"loudness_start":-22.324,"loudness_max_time":0.04152,"loudness_max":-11.973,"pitches":[0.432,1.000,0.477,0.105,0.187,0.833,0.389,0.308,0.732,0.149,0.175,0.047],"timbre":[43.128,-103.632,-89.666,-19.063,82.845,6.208,-23.492,-25.293,-9.026,-61.267,-4.691,-16.088]},{"start":236.15211,"duration":0.16177,"confidence":0.719,"loudness_start":-21.835,"loudness_max_time":0.03204,"loudness_max":-13.208,"pitches":[0.338,0.950,0.358,0.058,0.094,1.000,0.349,0.287,0.775,0.174,0.078,0.098],"timbre":[43.133,-123.795,-37.299,-12.376,37.808,15.435,-40.669,-21.554,-10.773,-19.252,-0.933,-10.606]},{"start":236.31388,"duration":0.13306,"confidence":0.851,"loudness_start":-21.215,"loudness_max_time":0.02497,"loudness_max":-7.840,"pitches":[0.422,0.521,0.403,0.256,0.576,0.868,0.779,0.823,1.000,0.733,0.576,0.064],"timbre":[44.566,-155.825,-60.359,51.136,25.905,-4.612,-9.957,-36.734,-2.352,0.766,28.576,3.012]},{"start":236.44694,"duration":0.12077,"confidence":0.646,"loudness_start":-20.922,"loudness_max_time":0.05603,"loudness_max":-13.914,"pitches":[0.178,0.138,0.087,0.106,0.306,1.000,0.386,0.491,0.677,0.330,0.117,0.068],"timbre":[42.628,-139.124,-53.201,-36.162,28.856,5.119,-22.340,-20.490,-15.973,-29.320,-31.819,-17.082]},{"start":236.56771,"duration":0.17111,"confidence":0.914,"loudness_start":-23.201,"loudness_max_time":0.07510,"loudness_max":-10.869,"pitches":[0.103,0.085,0.221,0.050,0.143,1.000,0.188,0.237,0.509,0.140,0.110,0.044],"timbre":[41.749,-151.282,-62.826,-87.688,69.759,22.128,-12.095,13.505,0.778,-68.088,-37.631,-14.157]},{"start":236.73882,"duration":0.12435,"confidence":0.666,"loudness_start":-21.040,"loudness_max_time":0.04449,"loudness_max":-14.144,"pitches":[0.151,0.261,0.302,0.201,0.225,1.000,0.233,0.528,0.892,0.372,0.108,0.191],"timbre":[42.669,-148.183,-64.808,-6.640,33.133,-7.476,-24.185,-12.010,-20.271,-14.642,-4.820,-16.619]},{"start":236.86317,"duration":0.31247,"confidence":1.000,"loudness_start":-21.300,"loudness_max_time":0.04347,"loudness_max":-5.744,"pitches":[0.046,0.041,0.120,0.281,0.103,1.000,0.129,0.028,0.037,0.039,0.017,0.016],"timbre":[46.838,-90.404,-26.192,-45.254,37.981,68.424,-12.617,2.313,-4.698,-41.404,-31.608,3.409]},{"start":237.17565,"duration":0.11605,"confidence":0.605,"loudness_start":-17.342,"loudness_max_time":0.02283,"loudness_max":-10.204,"pitches":[0.277,0.182,0.401,0.076,0.065,0.283,0.090,1.000,0.160,0.142,0.088,0.143],"timbre":[45.200,-107.062,-78.039,9.755,71.474,-46.080,-22.504,-68.556,-37.103,10.093,-2.450,-21.174]},{"start":237.29170,"duration":0.14494,"confidence":0.128,"loudness_start":-19.073,"loudness_max_time":0.02381,"loudness_max":-14.216,"pitches":[0.786,0.138,0.286,0.043,0.037,0.145,0.085,1.000,0.495,0.135,0.073,0.217],"timbre":[41.282,-163.521,-69.801,21.877,41.356,-31.200,-35.958,-23.029,1.414,-8.332,-7.901,-15.851]},{"start":237.43664,"duration":0.29002,"confidence":1.000,"loudness_start":-23.987,"loudness_max_time":0.03859,"loudness_max":-6.925,"pitches":[1.000,0.262,0.263,0.161,0.252,0.907,0.423,0.217,0.296,0.122,0.085,0.238],"timbre":[46.507,-108.331,12.304,-7.379,28.598,44.960,1.950,11.923,-12.744,-4.790,37.021,-28.993]},{"start":237.72667,"duration":0.28980,"confidence":0.687,"loudness_start":-17.411,"loudness_max_time":0.04896,"loudness_max":-8.772,"pitches":[0.490,0.560,1.000,0.316,0.194,0.309,0.095,0.078,0.412,0.115,0.122,0.171],"timbre":[47.052,-93.782,-41.089,3.374,65.248,-16.659,0.642,-32.728,-15.819,-14.505,2.333,-35.794]},{"start":238.01646,"duration":0.30118,"confidence":1.000,"loudness_start":-18.185,"loudness_max_time":0.04129,"loudness_max":-3.109,"pitches":[0.345,0.376,1.000,0.362,0.054,0.177,0.104,0.149,0.550,0.064,0.029,0.146],"timbre":[49.036,-32.565,-49.635,49.747,35.782,40.988,-21.595,-26.001,5.104,-36.816,-2.907,-29.463]},{"start":238.31764,"duration":0.13896,"confidence":0.520,"loudness_start":-19.302,"loudness_max_time":0.01029,"loudness_max":-12.154,"pitches":[0.666,0.996,0.425,0.996,0.142,0.166,0.061,0.492,1.000,0.296,0.202,0.055],"timbre":[43.299,-84.952,-53.182,-8.032,75.544,-82.960,-35.249,-44.310,-37.577,34.570,-6.494,-2.965]},{"start":238.45660,"duration":0.14431,"confidence":1.000,"loudness_start":-19.373,"loudness_max_time":0.01628,"loudness_max":-5.867,"pitches":[0.890,1.000,0.238,0.316,0.050,0.099,0.053,0.195,0.156,0.074,0.060,0.029],"timbre":[51.373,-36.034,80.366,29.067,29.390,-39.756,35.301,5.306,-17.278,16.098,14.110,38.575]},{"start":238.60091,"duration":0.55846,"confidence":0.181,"loudness_start":-10.483,"loudness_max_time":0.00719,"loudness_max":-6.810,"pitches":[0.210,0.042,0.042,0.082,0.085,1.000,0.118,0.124,0.138,0.047,0.035,0.049],"timbre":[49.774,-73.760,-6.328,21.465,34.799,-56.921,1.454,18.404,1.412,11.487,-29.061,5.868]},{"start":239.15937,"duration":0.29052,"confidence":0.910,"loudness_start":-16.043,"loudness_max_time":0.05562,"loudness_max":-4.688,"pitches":[0.405,0.051,0.025,0.044,0.119,1.000,0.192,0.025,0.121,0.024,0.028,0.027],"timbre":[50.466,-20.976,-9.486,49.764,16.609,-9.369,-18.012,-18.307,-0.502,-12.081,-40.146,-3.583]},{"start":239.44989,"duration":0.10417,"confidence":0.131,"loudness_start":-18.371,"loudness_max_time":0.01494,"loudness_max":-12.624,"pitches":[0.839,0.214,0.061,0.096,0.101,1.000,0.196,0.250,0.660,0.177,0.033,0.208],"timbre":[42.793,-90.097,-102.156,-17.508,74.097,-82.242,-35.457,-40.686,-17.413,40.507,-13.731,-0.748]},{"start":239.55406,"duration":0.15701,"confidence":0.396,"loudness_start":-20.657,"loudness_max_time":0.08290,"loudness_max":-16.114,"pitches":[1.000,0.094,0.092,0.147,0.071,0.938,0.110,0.164,0.757,0.088,0.035,0.078],"timbre":[42.261,-141.958,-45.085,-59.379,57.741,-32.504,-18.135,-7.957,-10.617,3.292,-9.619,-5.930]},{"start":239.71107,"duration":0.27333,"confidence":0.806,"loudness_start":-18.371,"loudness_max_time":0.02043,"loudness_max":-7.549,"pitches":[1.000,0.179,0.149,0.134,0.237,0.930,0.356,0.070,0.365,0.088,0.062,0.237],"timbre":[46.690,-112.240,-2.464,28.369,25.629,-17.934,-6.441,-2.983,-30.980,5.638,23.229,-23.061]},{"start":239.98440,"duration":0.17039,"confidence":0.649,"loudness_start":-19.071,"loudness_max_time":0.03576,"loudness_max":-10.445,"pitches":[0.704,1.000,0.227,0.171,0.097,0.398,0.092,0.173,0.660,0.219,0.125,0.161],"timbre":[43.798,-92.158,-70.422,7.423,72.387,-14.000,7.814,-18.382,-20.999,-34.056,-3.251,-32.770]},{"start":240.15478,"duration":0.11406,"confidence":0.718,"loudness_start":-20.736,"loudness_max_time":0.01930,"loudness_max":-12.987,"pitches":[0.979,1.000,0.250,0.141,0.088,0.085,0.083,0.060,0.105,0.062,0.086,0.233],"timbre":[44.557,-149.688,-16.188,-7.038,59.768,-48.440,-8.101,-4.541,-2.769,20.267,4.144,-20.582]},{"start":240.26884,"duration":0.30757,"confidence":1.000,"loudness_start":-17.326,"loudness_max_time":0.05245,"loudness_max":-2.653,"pitches":[0.369,0.525,1.000,0.347,0.078,0.168,0.118,0.134,0.593,0.060,0.028,0.174],"timbre":[48.549,-62.764,-36.333,18.237,55.635,41.627,-26.680,3.065,15.926,-49.745,-23.380,-32.491]},{"start":240.57642,"duration":0.08771,"confidence":0.396,"loudness_start":-19.239,"loudness_max_time":0.01236,"loudness_max":-12.975,"pitches":[0.510,0.753,0.645,1.000,0.416,0.379,0.083,0.186,0.222,0.072,0.310,0.326],"timbre":[43.183,-77.815,-53.252,-14.858,74.923,-74.178,-28.128,-49.450,-27.511,25.125,0.493,-13.073]},{"start":240.66413,"duration":0.34009,"confidence":0.964,"loudness_start":-18.574,"loudness_max_time":0.07154,"loudness_max":-5.154,"pitches":[1.000,0.577,0.741,0.962,0.374,0.392,0.331,0.669,0.966,0.458,0.232,0.447],"timbre":[46.358,-81.624,50.367,-103.701,43.878,-7.851,20.021,3.196,0.090,-4.023,-3.304,8.118]},{"start":241.00422,"duration":0.14100,"confidence":0.098,"loudness_start":-12.619,"loudness_max_time":0.01399,"loudness_max":-8.444,"pitches":[0.978,0.391,0.057,0.633,0.113,0.582,0.184,1.000,0.475,0.137,0.131,0.072],"timbre":[48.887,-88.645,24.571,12.523,48.039,-59.472,31.841,0.079,18.465,15.014,-14.692,-12.424]},{"start":241.14522,"duration":0.25868,"confidence":0.051,"loudness_start":-14.117,"loudness_max_time":0.01304,"loudness_max":-9.821,"pitches":[0.235,0.091,0.091,0.074,0.146,1.000,0.215,0.103,0.192,0.092,0.073,0.111],"timbre":[47.248,-51.753,-39.202,-6.557,57.277,-63.677,-16.553,-27.558,9.340,32.779,-12.583,-2.299]},{"start":241.40390,"duration":0.29891,"confidence":0.868,"loudness_start":-16.395,"loudness_max_time":0.08435,"loudness_max":-5.398,"pitches":[0.373,0.047,0.026,0.049,0.116,1.000,0.176,0.038,0.289,0.031,0.021,0.027],"timbre":[49.006,-54.625,-11.052,20.089,27.839,33.199,-9.369,-19.426,10.089,-12.497,-14.230,-7.376]},{"start":241.70281,"duration":0.11179,"confidence":0.217,"loudness_start":-17.501,"loudness_max_time":0.02059,"loudness_max":-12.315,"pitches":[0.529,0.110,0.054,0.175,0.104,1.000,0.168,0.264,0.728,0.137,0.047,0.167],"timbre":[43.048,-85.983,-105.611,-8.414,72.474,-72.267,-18.820,-55.964,-18.016,-0.306,11.913,-16.622]},{"start":241.81460,"duration":0.14884,"confidence":0.275,"loudness_start":-20.205,"loudness_max_time":0.07823,"loudness_max":-16.943,"pitches":[0.939,0.104,0.047,0.237,0.071,1.000,0.126,0.101,0.580,0.086,0.052,0.107],"timbre":[41.835,-140.804,-40.207,-57.727,58.343,-39.827,-13.076,-8.290,-19.400,8.723,-9.342,-9.672]},{"start":241.96345,"duration":0.28499,"confidence":0.879,"loudness_start":-18.723,"loudness_max_time":0.03478,"loudness_max":-6.742,"pitches":[1.000,0.203,0.077,0.224,0.255,0.708,0.304,0.069,0.595,0.068,0.063,0.321],"timbre":[46.623,-122.170,-13.761,11.947,29.182,19.873,-4.755,-9.340,-21.717,-9.469,14.922,-26.051]},{"start":242.24844,"duration":0.28431,"confidence":0.670,"loudness_start":-18.052,"loudness_max_time":0.04141,"loudness_max":-9.343,"pitches":[0.589,0.585,1.000,0.323,0.161,0.295,0.091,0.087,0.312,0.115,0.113,0.158],"timbre":[45.459,-107.129,-37.558,-6.016,79.338,-7.870,9.457,-29.590,-6.910,-24.611,1.183,-38.139]},{"start":242.53274,"duration":0.31388,"confidence":1.000,"loudness_start":-18.743,"loudness_max_time":0.05306,"loudness_max":-2.774,"pitches":[0.557,0.516,1.000,0.296,0.055,0.170,0.088,0.116,0.401,0.056,0.020,0.226],"timbre":[48.086,-56.612,-38.895,8.389,53.802,57.193,-21.416,4.101,9.106,-49.363,-24.822,-30.956]},{"start":242.84662,"duration":0.10957,"confidence":0.476,"loudness_start":-18.749,"loudness_max_time":0.01041,"loudness_max":-12.113,"pitches":[0.604,0.908,0.405,1.000,0.216,0.141,0.095,0.400,0.720,0.291,0.131,0.052],"timbre":[43.195,-79.336,-57.420,-15.296,82.177,-84.660,-34.973,-39.786,-37.918,32.427,-6.928,4.394]},{"start":242.95619,"duration":0.44780,"confidence":0.993,"loudness_start":-19.572,"loudness_max_time":0.04315,"loudness_max":-5.519,"pitches":[0.639,0.255,0.461,0.757,0.427,0.861,0.662,0.861,1.000,0.553,0.414,0.371],"timbre":[48.469,-77.947,38.842,-38.858,58.634,48.801,19.032,4.336,2.740,-16.494,-6.910,10.976]},{"start":243.40399,"duration":0.28943,"confidence":0.205,"loudness_start":-13.982,"loudness_max_time":0.01073,"loudness_max":-9.930,"pitches":[0.226,0.092,0.090,0.116,0.115,1.000,0.172,0.121,0.205,0.104,0.080,0.116],"timbre":[47.884,-56.684,-35.674,-9.625,75.726,-59.702,5.448,-22.862,7.677,23.898,-10.763,1.065]},{"start":243.69342,"duration":0.27229,"confidence":0.772,"loudness_start":-15.312,"loudness_max_time":0.05984,"loudness_max":-5.316,"pitches":[0.390,0.047,0.026,0.075,0.139,1.000,0.228,0.029,0.263,0.035,0.028,0.023],"timbre":[50.030,-42.868,-1.865,45.514,12.857,-30.517,-23.296,-18.217,-6.841,0.625,-60.639,3.331]},{"start":243.96571,"duration":0.11692,"confidence":0.471,"loudness_start":-19.506,"loudness_max_time":0.02673,"loudness_max":-12.052,"pitches":[0.737,0.145,0.067,0.074,0.097,1.000,0.173,0.125,0.429,0.096,0.028,0.208],"timbre":[43.474,-72.792,-105.693,-14.938,81.691,-58.415,-19.715,-38.340,-19.540,15.688,14.954,-13.948]},{"start":244.08263,"duration":0.14009,"confidence":0.435,"loudness_start":-19.515,"loudness_max_time":0.06771,"loudness_max":-15.173,"pitches":[1.000,0.125,0.073,0.131,0.096,0.899,0.138,0.157,0.762,0.123,0.041,0.110],"timbre":[42.817,-105.994,-54.431,-69.851,64.853,-29.324,-16.283,-6.278,-8.263,5.229,-10.718,-7.043]},{"start":244.22272,"duration":0.30689,"confidence":0.805,"loudness_start":-17.950,"loudness_max_time":0.03848,"loudness_max":-7.143,"pitches":[1.000,0.274,0.099,0.270,0.247,0.780,0.298,0.077,0.184,0.075,0.064,0.376],"timbre":[46.194,-103.803,-12.042,-5.250,39.250,19.679,-3.393,3.100,-19.160,-7.960,-10.056,-17.514]},{"start":244.52961,"duration":0.14540,"confidence":0.572,"loudness_start":-18.109,"loudness_max_time":0.01776,"loudness_max":-10.204,"pitches":[0.625,1.000,0.151,0.110,0.085,0.328,0.115,0.123,0.627,0.263,0.095,0.081],"timbre":[43.824,-89.719,-82.821,18.560,72.556,-72.072,-2.087,-32.190,-35.108,-11.215,4.334,-26.990]},{"start":244.67501,"duration":0.09215,"confidence":0.717,"loudness_start":-21.095,"loudness_max_time":0.02540,"loudness_max":-12.836,"pitches":[1.000,0.936,0.788,0.778,0.184,0.185,0.136,0.116,0.215,0.219,0.562,0.519],"timbre":[44.502,-134.194,-31.733,-18.562,65.148,-30.941,-1.767,-8.204,-8.810,21.640,11.212,-23.432]},{"start":244.76717,"duration":0.32998,"confidence":0.992,"loudness_start":-16.724,"loudness_max_time":0.08254,"loudness_max":-2.653,"pitches":[0.537,0.546,1.000,0.342,0.102,0.270,0.214,0.140,0.642,0.075,0.027,0.347],"timbre":[46.419,-82.521,-5.696,-53.364,65.981,7.763,-22.370,22.776,8.954,-32.217,-48.187,-26.584]},{"start":245.09714,"duration":0.11574,"confidence":0.424,"loudness_start":-18.285,"loudness_max_time":0.02027,"loudness_max":-12.415,"pitches":[0.611,1.000,0.295,0.716,0.124,0.156,0.063,0.358,0.847,0.243,0.223,0.036],"timbre":[43.613,-74.159,-62.436,-11.594,78.841,-62.369,-21.931,-58.722,-18.239,1.244,20.000,-13.851]},{"start":245.21288,"duration":0.31959,"confidence":0.936,"loudness_start":-18.572,"loudness_max_time":0.05283,"loudness_max":-6.512,"pitches":[0.773,0.337,0.639,0.839,0.340,0.308,0.250,0.556,1.000,0.380,0.198,0.404],"timbre":[48.278,-66.115,61.439,-53.803,46.672,33.227,26.990,-1.554,5.197,-13.984,-19.325,17.887]},{"start":245.53247,"duration":0.14077,"confidence":0.192,"loudness_start":-12.978,"loudness_max_time":0.01229,"loudness_max":-8.568,"pitches":[0.993,0.393,0.135,0.645,0.105,0.567,0.178,1.000,0.698,0.142,0.096,0.098],"timbre":[49.101,-96.314,22.545,8.094,42.918,-58.063,25.745,0.999,15.653,11.188,-10.339,-12.742]},{"start":245.67324,"duration":0.27905,"confidence":0.103,"loudness_start":-13.741,"loudness_max_time":0.01773,"loudness_max":-9.369,"pitches":[0.253,0.100,0.094,0.108,0.116,1.000,0.175,0.119,0.450,0.089,0.072,0.116],"timbre":[47.588,-66.184,-39.224,-4.230,66.008,-64.748,-13.324,-14.952,11.526,33.028,-14.436,2.574]},{"start":245.95229,"duration":0.28694,"confidence":0.927,"loudness_start":-15.829,"loudness_max_time":0.05365,"loudness_max":-4.416,"pitches":[0.431,0.044,0.025,0.043,0.128,1.000,0.201,0.027,0.099,0.044,0.023,0.032],"timbre":[50.454,-32.972,-9.357,60.475,21.223,-9.722,-20.358,-23.805,1.767,-13.560,-48.351,-3.094]},{"start":246.23923,"duration":0.14930,"confidence":0.470,"loudness_start":-19.774,"loudness_max_time":0.01816,"loudness_max":-12.295,"pitches":[0.551,0.058,0.031,0.047,0.051,1.000,0.093,0.040,0.296,0.070,0.034,0.069],"timbre":[43.282,-84.716,-82.984,-21.319,78.393,-92.795,-21.843,-38.186,-33.405,34.837,-8.590,-13.207]},{"start":246.38853,"duration":0.13211,"confidence":0.102,"loudness_start":-18.959,"loudness_max_time":0.04721,"loudness_max":-16.852,"pitches":[0.758,0.121,0.038,0.080,0.047,1.000,0.123,0.047,0.245,0.044,0.017,0.053],"timbre":[42.711,-130.797,-30.709,-54.161,59.421,-51.011,-19.426,4.761,-14.235,-11.465,4.147,-20.704]},{"start":246.52063,"duration":0.14485,"confidence":0.798,"loudness_start":-17.869,"loudness_max_time":0.00617,"loudness_max":-7.354,"pitches":[1.000,0.475,0.182,0.197,0.316,0.399,0.407,0.407,0.525,0.513,0.654,0.038],"timbre":[47.320,-117.548,14.234,19.916,6.778,-78.089,-19.029,-4.645,-31.718,-2.384,-15.179,-13.112]},{"start":246.66549,"duration":0.12259,"confidence":0.052,"loudness_start":-16.163,"loudness_max_time":0.00930,"loudness_max":-12.586,"pitches":[1.000,0.134,0.027,0.044,0.063,0.503,0.110,0.064,0.080,0.067,0.047,0.127],"timbre":[44.930,-129.807,40.768,0.154,54.304,-65.362,-7.326,-3.889,-27.183,-5.957,-10.823,-21.224]},{"start":246.78807,"duration":0.15646,"confidence":0.624,"loudness_start":-17.134,"loudness_max_time":0.02803,"loudness_max":-8.851,"pitches":[1.000,0.884,0.167,0.089,0.076,0.268,0.070,0.060,0.080,0.143,0.097,0.095],"timbre":[46.207,-102.168,-36.743,13.932,89.079,-41.679,13.434,-39.925,-11.636,-13.592,20.546,-33.901]},{"start":246.94454,"duration":0.11642,"confidence":0.165,"loudness_start":-16.476,"loudness_max_time":0.00735,"loudness_max":-13.855,"pitches":[0.826,1.000,0.104,0.072,0.068,0.156,0.079,0.028,0.043,0.047,0.078,0.111],"timbre":[43.457,-148.437,-12.925,-6.842,52.122,-67.463,-14.871,3.768,6.751,-2.994,-9.308,-35.783]},{"start":247.06095,"duration":0.31170,"confidence":1.000,"loudness_start":-19.663,"loudness_max_time":0.05331,"loudness_max":-2.547,"pitches":[0.407,0.461,1.000,0.281,0.068,0.181,0.119,0.132,0.351,0.073,0.026,0.201],"timbre":[48.441,-50.774,-25.574,10.717,46.190,61.602,-21.092,-1.074,6.064,-45.909,-24.039,-31.864]},{"start":247.37265,"duration":0.08717,"confidence":0.430,"loudness_start":-18.961,"loudness_max_time":0.01299,"loudness_max":-11.980,"pitches":[0.496,0.711,0.615,1.000,0.408,0.344,0.089,0.232,0.264,0.064,0.260,0.282],"timbre":[43.192,-85.746,-57.458,-5.904,75.442,-82.703,-37.662,-39.117,-38.695,33.854,-5.882,-2.697]},{"start":247.45982,"duration":0.19800,"confidence":0.980,"loudness_start":-19.525,"loudness_max_time":0.06776,"loudness_max":-5.464,"pitches":[1.000,0.548,0.825,0.819,0.301,0.356,0.090,0.305,0.242,0.147,0.044,0.076],"timbre":[46.700,-88.994,65.376,-99.777,64.469,4.782,18.405,23.067,-1.221,-7.700,-5.810,10.793]},{"start":247.65782,"duration":0.27433,"confidence":0.084,"loudness_start":-11.287,"loudness_max_time":0.00569,"loudness_max":-6.622,"pitches":[0.430,0.121,0.077,0.176,0.229,1.000,0.400,0.343,0.259,0.142,0.049,0.173],"timbre":[49.931,-80.890,12.323,0.790,30.838,-67.929,17.366,-1.482,-1.175,7.147,-17.059,1.142]},{"start":247.93215,"duration":0.28367,"confidence":0.298,"loudness_start":-13.312,"loudness_max_time":0.02293,"loudness_max":-9.306,"pitches":[0.201,0.081,0.074,0.075,0.119,1.000,0.165,0.093,0.109,0.091,0.066,0.105],"timbre":[47.567,-49.296,-42.793,1.245,71.592,-59.281,-9.695,-19.283,11.448,23.587,-7.632,-6.083]},{"start":248.21583,"duration":0.28363,"confidence":0.883,"loudness_start":-15.881,"loudness_max_time":0.05680,"loudness_max":-4.659,"pitches":[0.581,0.044,0.021,0.040,0.125,1.000,0.193,0.027,0.069,0.026,0.024,0.029],"timbre":[50.669,-32.537,-7.476,40.371,16.582,-9.324,-22.949,-20.410,-4.767,-8.828,-40.851,0.205]},{"start":248.49946,"duration":0.11134,"confidence":0.225,"loudness_start":-19.581,"loudness_max_time":0.02410,"loudness_max":-13.618,"pitches":[0.793,0.167,0.048,0.045,0.108,1.000,0.141,0.033,0.098,0.061,0.036,0.270],"timbre":[42.916,-82.216,-102.333,-22.191,69.945,-59.712,-29.795,-53.644,-27.879,39.394,-6.186,-6.518]},{"start":248.61079,"duration":0.14526,"confidence":0.551,"loudness_start":-20.278,"loudness_max_time":0.08288,"loudness_max":-14.738,"pitches":[1.000,0.090,0.046,0.043,0.053,0.537,0.078,0.036,0.147,0.047,0.030,0.083],"timbre":[42.693,-130.358,-32.545,-64.414,71.134,-21.798,-15.561,-4.992,5.403,11.713,-16.231,-5.423]},{"start":248.75605,"duration":0.28268,"confidence":0.811,"loudness_start":-18.784,"loudness_max_time":0.03349,"loudness_max":-7.081,"pitches":[1.000,0.264,0.178,0.120,0.222,0.843,0.280,0.097,0.096,0.080,0.066,0.246],"timbre":[46.411,-109.045,-0.940,10.330,29.427,20.448,-5.225,-8.783,-19.756,-5.309,10.751,-20.455]},{"start":249.03873,"duration":0.17020,"confidence":0.623,"loudness_start":-18.739,"loudness_max_time":0.03805,"loudness_max":-10.362,"pitches":[0.706,1.000,0.216,0.107,0.119,0.487,0.090,0.090,0.396,0.217,0.100,0.206],"timbre":[44.005,-85.291,-66.046,7.218,69.827,-15.765,6.406,-16.547,-19.455,-37.323,-3.923,-33.443]},{"start":249.20893,"duration":0.11519,"confidence":0.682,"loudness_start":-20.937,"loudness_max_time":0.03190,"loudness_max":-12.947,"pitches":[1.000,0.927,0.220,0.114,0.090,0.167,0.077,0.034,0.099,0.079,0.075,0.259],"timbre":[44.546,-150.609,-16.163,-13.056,62.612,-44.412,-10.949,-3.438,-5.404,24.140,6.209,-21.024]},{"start":249.32413,"duration":0.30132,"confidence":1.000,"loudness_start":-16.940,"loudness_max_time":0.05415,"loudness_max":-2.822,"pitches":[0.317,0.456,1.000,0.321,0.087,0.276,0.115,0.136,0.472,0.077,0.042,0.200],"timbre":[48.387,-56.827,-29.741,8.613,53.358,43.048,-25.684,1.988,11.946,-45.158,-27.047,-30.141]},{"start":249.62544,"duration":0.15782,"confidence":0.431,"loudness_start":-18.034,"loudness_max_time":0.01950,"loudness_max":-12.552,"pitches":[0.859,1.000,0.371,0.724,0.115,0.451,0.093,0.315,0.719,0.254,0.226,0.061],"timbre":[44.078,-80.367,-55.108,-15.721,100.726,-59.126,-28.006,-50.246,-13.229,8.518,19.449,-13.276]},{"start":249.78327,"duration":0.13864,"confidence":0.940,"loudness_start":-18.023,"loudness_max_time":0.00825,"loudness_max":-5.817,"pitches":[1.000,0.988,0.195,0.202,0.045,0.113,0.073,0.242,0.145,0.087,0.072,0.045],"timbre":[51.352,-46.426,85.687,27.646,31.343,-56.430,34.777,6.173,-19.152,12.182,-0.650,37.207]},{"start":249.92190,"duration":0.14540,"confidence":0.132,"loudness_start":-11.093,"loudness_max_time":0.00769,"loudness_max":-7.480,"pitches":[0.907,0.546,0.194,0.279,0.222,0.401,0.506,0.650,1.000,0.771,0.737,0.077],"timbre":[50.229,-74.825,35.676,19.075,5.422,-49.016,41.733,10.612,-11.021,0.821,-9.770,33.365]},{"start":250.06730,"duration":0.41732,"confidence":0.183,"loudness_start":-13.261,"loudness_max_time":0.01007,"loudness_max":-8.661,"pitches":[0.274,0.051,0.049,0.055,0.092,1.000,0.120,0.106,0.092,0.046,0.034,0.060],"timbre":[48.419,-75.386,2.801,11.145,40.218,-64.939,3.830,14.013,21.612,11.155,-19.931,-9.223]},{"start":250.48463,"duration":0.27474,"confidence":0.778,"loudness_start":-15.617,"loudness_max_time":0.00671,"loudness_max":-5.709,"pitches":[0.405,0.043,0.022,0.040,0.132,1.000,0.222,0.031,0.092,0.041,0.023,0.029],"timbre":[50.010,-44.020,7.041,43.735,15.746,-39.720,-24.266,-17.321,-1.894,5.311,-59.028,-1.506]},{"start":250.75937,"duration":0.14580,"confidence":0.434,"loudness_start":-17.651,"loudness_max_time":0.01810,"loudness_max":-12.119,"pitches":[0.628,0.061,0.035,0.024,0.067,1.000,0.097,0.026,0.126,0.061,0.023,0.113],"timbre":[43.421,-70.952,-97.154,-6.427,72.641,-62.405,-19.624,-45.156,-17.252,6.305,9.176,-17.694]},{"start":250.90517,"duration":0.11474,"confidence":0.153,"loudness_start":-20.178,"loudness_max_time":0.04510,"loudness_max":-17.295,"pitches":[0.545,0.106,0.021,0.034,0.093,1.000,0.158,0.038,0.167,0.084,0.030,0.066],"timbre":[41.460,-126.179,-46.042,-46.039,48.209,-37.754,-20.700,-7.579,-15.724,3.268,-4.982,-4.339]},{"start":251.01991,"duration":0.30635,"confidence":0.877,"loudness_start":-19.300,"loudness_max_time":0.03281,"loudness_max":-7.217,"pitches":[1.000,0.196,0.124,0.196,0.252,0.984,0.382,0.079,0.130,0.069,0.062,0.225],"timbre":[46.077,-120.904,-6.459,12.558,39.782,17.263,-6.047,-7.699,-23.548,-8.785,11.684,-24.569]},{"start":251.32626,"duration":0.15052,"confidence":0.645,"loudness_start":-16.969,"loudness_max_time":0.02005,"loudness_max":-9.193,"pitches":[0.927,1.000,0.151,0.087,0.069,0.387,0.085,0.044,0.080,0.166,0.100,0.062],"timbre":[46.107,-94.538,-37.548,12.570,84.808,-74.247,-1.723,-42.937,-15.948,12.631,0.717,-39.238]},{"start":251.47678,"duration":0.11102,"confidence":0.064,"loudness_start":-16.912,"loudness_max_time":0.01755,"loudness_max":-14.565,"pitches":[0.862,1.000,0.104,0.074,0.094,0.274,0.114,0.026,0.038,0.050,0.098,0.116],"timbre":[43.631,-139.051,-15.117,-22.607,49.596,-60.667,-16.698,-1.887,9.250,5.811,-8.822,-34.880]},{"start":251.58780,"duration":0.31315,"confidence":1.000,"loudness_start":-18.442,"loudness_max_time":0.05449,"loudness_max":-3.015,"pitches":[0.454,0.464,1.000,0.302,0.068,0.190,0.105,0.107,0.342,0.053,0.026,0.166],"timbre":[48.056,-52.320,-37.535,4.325,50.986,50.181,-19.140,1.404,5.132,-43.830,-24.353,-31.255]},{"start":251.90095,"duration":0.14063,"confidence":0.459,"loudness_start":-18.424,"loudness_max_time":0.01283,"loudness_max":-12.016,"pitches":[0.886,1.000,0.429,0.880,0.145,0.366,0.103,0.387,0.844,0.292,0.211,0.125],"timbre":[43.496,-84.655,-56.701,-14.870,84.402,-83.373,-35.141,-47.249,-27.123,30.166,-3.987,-1.921]},{"start":252.04159,"duration":0.41660,"confidence":0.966,"loudness_start":-18.882,"loudness_max_time":0.01381,"loudness_max":-6.023,"pitches":[1.000,0.405,0.370,0.584,0.383,0.825,0.533,0.761,0.962,0.461,0.455,0.523],"timbre":[50.517,-59.561,52.553,35.040,38.374,-35.788,17.714,-9.571,-7.485,15.685,1.919,23.545]},{"start":252.45819,"duration":0.28635,"confidence":0.259,"loudness_start":-13.847,"loudness_max_time":0.03086,"loudness_max":-9.806,"pitches":[0.232,0.088,0.088,0.084,0.120,1.000,0.163,0.094,0.107,0.101,0.073,0.123],"timbre":[47.292,-44.460,-45.619,-0.475,68.350,-52.668,-8.252,-26.489,8.668,17.745,-9.456,-11.737]},{"start":252.74454,"duration":0.28916,"confidence":0.836,"loudness_start":-17.231,"loudness_max_time":0.01424,"loudness_max":-6.288,"pitches":[0.350,0.041,0.021,0.043,0.114,1.000,0.192,0.025,0.074,0.023,0.024,0.027],"timbre":[48.629,-56.714,-9.920,53.563,17.589,-42.011,-13.616,-21.559,-6.105,25.183,-25.323,9.394]},{"start":253.03370,"duration":0.14576,"confidence":0.351,"loudness_start":-19.245,"loudness_max_time":0.01435,"loudness_max":-13.156,"pitches":[0.757,0.069,0.024,0.020,0.043,1.000,0.114,0.022,0.094,0.029,0.013,0.105],"timbre":[42.912,-86.981,-93.889,-30.977,76.505,-83.079,-30.738,-40.922,-21.476,39.843,-7.126,-5.538]},{"start":253.17946,"duration":0.10317,"confidence":0.455,"loudness_start":-19.302,"loudness_max_time":0.02961,"loudness_max":-15.049,"pitches":[0.888,0.100,0.030,0.035,0.087,1.000,0.178,0.055,0.163,0.067,0.017,0.106],"timbre":[43.108,-128.131,-38.589,-24.786,62.900,-42.883,-28.300,5.253,8.401,-2.596,-5.168,-4.261]},{"start":253.28263,"duration":0.28467,"confidence":0.760,"loudness_start":-19.237,"loudness_max_time":0.03571,"loudness_max":-8.951,"pitches":[1.000,0.194,0.094,0.219,0.280,0.828,0.330,0.061,0.131,0.075,0.067,0.286],"timbre":[45.803,-107.400,0.104,-9.304,23.963,15.614,-2.142,-7.959,-28.717,4.652,7.739,-18.685]},{"start":253.56730,"duration":0.16585,"confidence":0.510,"loudness_start":-17.497,"loudness_max_time":0.03884,"loudness_max":-10.548,"pitches":[0.645,1.000,0.222,0.110,0.092,0.314,0.090,0.099,0.437,0.211,0.114,0.186],"timbre":[43.715,-81.059,-71.242,7.703,64.141,-26.706,6.136,-14.841,-16.976,-45.681,-2.091,-33.405]},{"start":253.73315,"duration":0.11338,"confidence":0.732,"loudness_start":-20.909,"loudness_max_time":0.02372,"loudness_max":-12.299,"pitches":[0.929,1.000,0.118,0.068,0.079,0.179,0.076,0.051,0.169,0.079,0.095,0.128],"timbre":[44.709,-150.288,-21.425,-11.527,65.070,-52.319,-9.335,-0.048,0.052,14.257,5.802,-21.849]},{"start":253.84653,"duration":0.30730,"confidence":1.000,"loudness_start":-17.016,"loudness_max_time":0.05961,"loudness_max":-2.705,"pitches":[0.577,0.614,1.000,0.353,0.069,0.208,0.132,0.114,0.453,0.059,0.026,0.287],"timbre":[47.995,-67.931,-27.061,-3.559,55.490,44.563,-27.867,15.533,13.653,-45.760,-41.377,-27.981]},{"start":254.15383,"duration":0.14449,"confidence":0.530,"loudness_start":-19.770,"loudness_max_time":0.02830,"loudness_max":-13.035,"pitches":[0.920,0.956,0.349,1.000,0.135,0.540,0.113,0.361,0.546,0.228,0.244,0.151],"timbre":[43.663,-80.006,-64.090,-15.113,83.653,-49.430,-31.466,-46.113,-21.821,4.070,23.959,-7.788]},{"start":254.29832,"duration":0.29741,"confidence":0.967,"loudness_start":-18.479,"loudness_max_time":0.02222,"loudness_max":-5.982,"pitches":[0.914,0.489,0.612,1.000,0.463,0.594,0.375,0.743,0.901,0.505,0.259,0.449],"timbre":[50.623,-54.080,57.155,20.833,33.597,-1.661,31.001,-4.363,-11.545,11.689,30.511,30.391]},{"start":254.59574,"duration":0.41338,"confidence":0.096,"loudness_start":-12.805,"loudness_max_time":0.01884,"loudness_max":-9.149,"pitches":[0.245,0.052,0.049,0.058,0.100,1.000,0.124,0.099,0.103,0.052,0.035,0.054],"timbre":[48.445,-76.380,5.391,7.685,44.762,-61.395,3.528,16.222,25.270,2.548,-14.588,-10.761]},{"start":255.00912,"duration":0.27515,"confidence":0.735,"loudness_start":-15.324,"loudness_max_time":0.01095,"loudness_max":-5.655,"pitches":[0.561,0.038,0.023,0.043,0.144,1.000,0.220,0.027,0.094,0.038,0.023,0.033],"timbre":[48.995,-74.523,-5.766,53.231,29.743,-44.028,-16.398,-23.081,-2.509,14.512,-22.179,5.673]},{"start":255.28426,"duration":0.14930,"confidence":0.428,"loudness_start":-19.413,"loudness_max_time":0.02868,"loudness_max":-13.029,"pitches":[0.557,0.066,0.030,0.028,0.048,1.000,0.106,0.025,0.142,0.067,0.026,0.092],"timbre":[43.015,-66.506,-97.487,-13.209,77.503,-60.609,-11.220,-47.932,-21.797,8.705,11.467,-14.057]},{"start":255.43356,"duration":0.11474,"confidence":0.808,"loudness_start":-19.693,"loudness_max_time":0.01170,"loudness_max":-9.910,"pitches":[0.747,0.086,0.016,0.030,0.063,1.000,0.135,0.035,0.140,0.065,0.028,0.107],"timbre":[46.766,-97.023,11.181,1.828,7.105,-33.530,-24.200,-12.839,-34.249,1.822,9.431,-9.327]},{"start":255.54830,"duration":0.30027,"confidence":0.609,"loudness_start":-15.072,"loudness_max_time":0.03404,"loudness_max":-7.414,"pitches":[1.000,0.225,0.159,0.194,0.224,0.702,0.281,0.050,0.106,0.068,0.054,0.351],"timbre":[47.419,-106.819,7.530,20.872,15.871,-9.746,-13.637,-8.481,-25.550,-11.654,2.705,-20.830]},{"start":255.84857,"duration":0.27451,"confidence":0.625,"loudness_start":-18.230,"loudness_max_time":0.02619,"loudness_max":-9.495,"pitches":[0.464,0.499,1.000,0.267,0.105,0.165,0.082,0.056,0.061,0.134,0.058,0.093],"timbre":[46.514,-95.268,-41.812,1.101,75.594,-37.500,-2.608,-48.329,-11.348,-8.200,12.247,-36.897]},{"start":256.12308,"duration":0.28263,"confidence":1.000,"loudness_start":-18.021,"loudness_max_time":0.04812,"loudness_max":-2.546,"pitches":[0.533,0.556,1.000,0.301,0.044,0.178,0.114,0.090,0.322,0.057,0.022,0.257],"timbre":[48.937,-50.756,-33.474,20.264,43.709,57.939,-28.010,-6.021,16.127,-59.923,-10.053,-29.649]},{"start":256.40571,"duration":0.12812,"confidence":0.488,"loudness_start":-19.271,"loudness_max_time":0.03601,"loudness_max":-11.941,"pitches":[0.526,1.000,0.836,0.785,0.123,0.092,0.073,0.291,0.512,0.227,0.187,0.050],"timbre":[43.602,-89.477,-79.911,-17.111,84.547,-25.875,-23.162,-41.824,-17.967,-35.778,11.211,-10.225]},{"start":256.53383,"duration":0.46027,"confidence":0.996,"loudness_start":-19.464,"loudness_max_time":0.05084,"loudness_max":-5.662,"pitches":[0.519,0.221,0.554,0.704,0.378,0.761,0.594,0.835,1.000,0.577,0.452,0.383],"timbre":[47.692,-84.529,36.402,-62.908,60.372,43.264,15.239,8.518,1.635,-20.773,-20.081,10.282]},{"start":256.99410,"duration":0.23696,"confidence":0.229,"loudness_start":-13.273,"loudness_max_time":0.02170,"loudness_max":-9.853,"pitches":[0.251,0.080,0.176,0.088,0.191,1.000,0.257,0.104,0.112,0.141,0.072,0.104],"timbre":[47.453,-54.107,-42.742,-7.955,55.634,-61.963,-19.489,-20.000,2.781,29.921,-11.867,0.575]},{"start":257.23107,"duration":0.33098,"confidence":0.810,"loudness_start":-16.071,"loudness_max_time":0.05610,"loudness_max":-5.834,"pitches":[0.462,0.045,0.111,0.039,0.095,1.000,0.130,0.023,0.059,0.043,0.023,0.023],"timbre":[47.061,-73.973,-19.608,-29.411,41.510,16.376,-6.864,-5.566,12.131,-12.026,-39.850,13.452]},{"start":257.56204,"duration":0.14340,"confidence":0.433,"loudness_start":-17.963,"loudness_max_time":0.01367,"loudness_max":-12.073,"pitches":[0.675,0.108,0.353,0.025,0.038,1.000,0.108,0.024,0.082,0.139,0.033,0.079],"timbre":[43.025,-96.709,-96.304,-14.368,69.752,-85.018,-38.704,-46.776,-12.583,34.058,-5.666,-0.454]},{"start":257.70544,"duration":0.10526,"confidence":0.209,"loudness_start":-20.189,"loudness_max_time":0.02519,"loudness_max":-17.329,"pitches":[1.000,0.143,0.180,0.052,0.053,0.728,0.145,0.051,0.194,0.085,0.018,0.108],"timbre":[41.635,-167.725,-13.103,-34.917,45.457,-49.713,-22.556,2.859,11.513,11.364,4.818,-4.678]},{"start":257.81070,"duration":0.30254,"confidence":0.868,"loudness_start":-18.780,"loudness_max_time":0.03460,"loudness_max":-7.480,"pitches":[1.000,0.216,0.236,0.184,0.189,0.676,0.244,0.044,0.103,0.066,0.050,0.353],"timbre":[45.993,-124.174,1.398,5.971,29.060,23.649,-6.796,3.283,-7.282,-15.822,8.511,-18.071]},{"start":258.11324,"duration":0.14485,"confidence":0.569,"loudness_start":-18.362,"loudness_max_time":0.02002,"loudness_max":-10.630,"pitches":[0.712,1.000,0.644,0.104,0.075,0.332,0.111,0.098,0.368,0.232,0.093,0.103],"timbre":[43.660,-96.062,-83.621,15.586,75.661,-65.752,-0.893,-45.528,-31.830,-16.113,7.070,-25.887]},{"start":258.25810,"duration":0.09392,"confidence":0.679,"loudness_start":-21.264,"loudness_max_time":0.02982,"loudness_max":-12.893,"pitches":[0.987,1.000,0.283,0.078,0.065,0.127,0.078,0.104,0.152,0.077,0.201,0.193],"timbre":[44.047,-156.484,-20.547,-14.749,50.102,-29.442,-9.388,-8.942,2.135,16.630,11.715,-20.153]},{"start":258.35202,"duration":0.33020,"confidence":1.000,"loudness_start":-17.627,"loudness_max_time":0.08313,"loudness_max":-2.839,"pitches":[0.373,0.438,1.000,0.287,0.075,0.233,0.198,0.136,0.415,0.090,0.023,0.228],"timbre":[45.945,-96.908,2.134,-65.311,57.046,7.815,-26.664,41.355,16.797,-31.201,-48.287,-21.233]},{"start":258.68222,"duration":0.11560,"confidence":0.404,"loudness_start":-18.528,"loudness_max_time":0.02367,"loudness_max":-12.859,"pitches":[0.652,1.000,0.493,0.806,0.148,0.140,0.069,0.249,0.552,0.601,0.279,0.037],"timbre":[43.364,-79.258,-73.938,-12.165,84.490,-50.988,-27.452,-59.250,-21.238,0.917,18.881,-8.191]},{"start":258.79782,"duration":0.18009,"confidence":0.973,"loudness_start":-19.099,"loudness_max_time":0.04993,"loudness_max":-5.673,"pitches":[0.932,1.000,0.605,0.387,0.054,0.138,0.081,0.201,0.190,0.163,0.050,0.054],"timbre":[48.465,-69.423,64.361,-62.858,52.257,37.231,20.354,10.361,1.567,-16.119,-5.077,23.777]},{"start":258.97791,"duration":0.14540,"confidence":0.078,"loudness_start":-11.024,"loudness_max_time":0.00850,"loudness_max":-6.999,"pitches":[0.703,0.233,0.259,0.240,0.316,0.531,0.627,0.774,1.000,0.808,0.746,0.056],"timbre":[50.421,-74.724,34.715,16.255,1.295,-51.509,43.368,5.699,-11.415,0.624,-10.674,35.042]},{"start":259.12331,"duration":0.38730,"confidence":0.110,"loudness_start":-12.559,"loudness_max_time":0.00658,"loudness_max":-8.855,"pitches":[0.210,0.047,0.127,0.059,0.121,1.000,0.137,0.129,0.092,0.059,0.031,0.044],"timbre":[48.645,-78.203,6.551,6.684,39.087,-58.557,4.038,12.950,27.574,2.497,-19.518,-7.673]},{"start":259.51061,"duration":0.28490,"confidence":0.801,"loudness_start":-16.415,"loudness_max_time":0.03766,"loudness_max":-5.798,"pitches":[0.399,0.051,0.149,0.039,0.129,1.000,0.187,0.031,0.090,0.043,0.021,0.024],"timbre":[47.951,-72.014,-18.445,13.568,42.740,27.787,-2.864,-18.034,6.982,-7.738,-20.685,0.262]},{"start":259.79551,"duration":0.16943,"confidence":0.558,"loudness_start":-20.014,"loudness_max_time":0.04773,"loudness_max":-12.540,"pitches":[0.536,0.089,0.156,0.052,0.076,1.000,0.105,0.040,0.168,0.072,0.030,0.097],"timbre":[42.869,-86.055,-92.675,-18.945,77.154,-21.804,-6.490,-39.462,-1.348,-26.097,-2.655,-19.691]},{"start":259.96494,"duration":0.14045,"confidence":0.141,"loudness_start":-20.548,"loudness_max_time":0.01390,"loudness_max":-17.750,"pitches":[0.785,0.154,0.595,0.047,0.046,1.000,0.109,0.034,0.177,0.050,0.027,0.056],"timbre":[41.676,-168.154,-22.383,-48.563,33.474,-47.087,-30.103,-3.737,-3.317,-2.243,8.467,-5.449]},{"start":260.10540,"duration":0.26027,"confidence":0.835,"loudness_start":-18.675,"loudness_max_time":0.00417,"loudness_max":-8.425,"pitches":[1.000,0.201,0.242,0.143,0.204,0.848,0.350,0.060,0.104,0.061,0.055,0.269],"timbre":[46.823,-118.320,16.374,30.587,13.154,-68.118,-22.428,-15.418,-31.865,1.336,-17.913,-12.985]},{"start":260.36567,"duration":0.16771,"confidence":0.730,"loudness_start":-19.230,"loudness_max_time":0.03753,"loudness_max":-9.127,"pitches":[0.995,1.000,0.280,0.099,0.101,0.265,0.077,0.074,0.082,0.167,0.122,0.124],"timbre":[45.776,-96.843,-35.880,-1.169,77.600,-9.427,6.346,-34.450,-3.183,-28.439,16.213,-40.163]},{"start":260.53338,"duration":0.13950,"confidence":0.098,"loudness_start":-16.801,"loudness_max_time":0.01150,"loudness_max":-14.271,"pitches":[0.675,1.000,0.233,0.090,0.070,0.151,0.081,0.029,0.049,0.049,0.045,0.147],"timbre":[43.686,-147.458,-15.551,-15.969,57.893,-66.841,-16.879,-5.224,3.648,12.134,-5.198,-29.662]},{"start":260.67288,"duration":0.28481,"confidence":1.000,"loudness_start":-18.957,"loudness_max_time":0.02574,"loudness_max":-2.938,"pitches":[0.289,0.386,1.000,0.327,0.048,0.130,0.075,0.121,0.341,0.115,0.018,0.125],"timbre":[50.466,-14.249,-45.862,69.243,22.970,-22.136,-43.019,-50.931,-3.989,-25.674,-21.373,-22.808]},{"start":260.95769,"duration":0.14395,"confidence":0.418,"loudness_start":-18.489,"loudness_max_time":0.01297,"loudness_max":-12.072,"pitches":[0.624,1.000,0.516,0.971,0.113,0.135,0.107,0.389,0.647,0.257,0.185,0.056],"timbre":[43.346,-84.745,-55.344,-16.130,81.320,-83.462,-37.457,-39.507,-33.019,33.775,0.338,-5.030]},{"start":261.10163,"duration":0.42068,"confidence":0.986,"loudness_start":-19.211,"loudness_max_time":0.01084,"loudness_max":-5.576,"pitches":[0.713,0.374,0.419,0.596,0.362,0.733,0.419,0.727,1.000,0.656,0.650,0.591],"timbre":[50.829,-63.139,49.839,31.393,30.343,-56.579,15.976,-2.224,-11.715,10.294,-10.043,34.568]},{"start":261.52231,"duration":0.30113,"confidence":0.008,"loudness_start":-13.618,"loudness_max_time":0.02095,"loudness_max":-9.587,"pitches":[0.235,0.089,0.121,0.080,0.112,1.000,0.150,0.087,0.108,0.105,0.066,0.113],"timbre":[47.317,-51.361,-45.006,-3.448,63.347,-60.236,-16.155,-22.614,3.524,29.077,-13.098,-1.533]},{"start":261.82345,"duration":0.23791,"confidence":0.014,"loudness_start":-16.556,"loudness_max_time":0.03295,"loudness_max":-14.001,"pitches":[0.508,0.045,0.089,0.049,0.184,1.000,0.309,0.031,0.065,0.040,0.025,0.022],"timbre":[45.003,-104.871,-45.043,-37.708,72.157,-52.747,-14.882,-2.850,12.112,-2.941,-6.445,-10.598]},{"start":262.06136,"duration":0.17238,"confidence":0.403,"loudness_start":-18.233,"loudness_max_time":0.04456,"loudness_max":-12.617,"pitches":[0.589,0.100,0.297,0.045,0.059,1.000,0.105,0.029,0.128,0.044,0.030,0.111],"timbre":[43.235,-84.456,-100.005,-22.489,86.232,-31.869,-11.936,-40.776,4.852,-27.270,-8.404,-13.932]},{"start":262.23374,"duration":0.11678,"confidence":0.385,"loudness_start":-19.806,"loudness_max_time":0.02442,"loudness_max":-16.332,"pitches":[1.000,0.232,0.432,0.050,0.078,0.970,0.186,0.064,0.224,0.252,0.068,0.101],"timbre":[42.327,-145.517,-25.416,-32.521,41.658,-44.300,-27.142,-10.360,13.423,9.127,1.734,0.869]},{"start":262.35052,"duration":0.29673,"confidence":0.849,"loudness_start":-18.429,"loudness_max_time":0.02399,"loudness_max":-7.479,"pitches":[0.925,0.219,0.209,0.195,0.242,1.000,0.353,0.102,0.138,0.142,0.068,0.245],"timbre":[46.835,-110.062,-4.656,29.060,24.461,-7.544,-13.734,-3.358,-17.426,-2.952,27.391,-17.036]},{"start":262.64726,"duration":0.14245,"confidence":0.523,"loudness_start":-18.295,"loudness_max_time":0.01621,"loudness_max":-10.792,"pitches":[0.651,1.000,0.381,0.129,0.074,0.333,0.106,0.087,0.389,0.204,0.075,0.079],"timbre":[43.662,-86.214,-74.416,18.387,69.163,-76.902,-1.021,-40.136,-32.531,6.442,-4.266,-27.224]},{"start":262.78971,"duration":0.11723,"confidence":0.722,"loudness_start":-21.303,"loudness_max_time":0.02390,"loudness_max":-12.517,"pitches":[0.837,1.000,0.133,0.067,0.084,0.156,0.072,0.040,0.205,0.182,0.087,0.113],"timbre":[44.303,-149.096,-21.400,-5.137,59.560,-43.744,-5.792,-10.501,-5.394,19.380,3.994,-22.427]},{"start":262.90694,"duration":0.30834,"confidence":1.000,"loudness_start":-18.337,"loudness_max_time":0.05608,"loudness_max":-3.206,"pitches":[0.299,0.435,1.000,0.324,0.065,0.246,0.134,0.128,0.485,0.111,0.033,0.232],"timbre":[48.313,-64.959,-28.153,4.752,43.041,51.393,-29.651,8.051,20.833,-58.328,-26.147,-28.282]},{"start":263.21528,"duration":0.07628,"confidence":0.468,"loudness_start":-18.948,"loudness_max_time":0.01760,"loudness_max":-13.008,"pitches":[0.480,0.737,0.829,1.000,0.424,0.330,0.098,0.248,0.262,0.093,0.344,0.357],"timbre":[43.343,-89.860,-67.463,-11.302,73.993,-63.197,-33.561,-55.240,-29.684,17.625,6.239,-6.709]},{"start":263.29156,"duration":0.21433,"confidence":0.946,"loudness_start":-19.183,"loudness_max_time":0.08492,"loudness_max":-5.630,"pitches":[0.998,0.577,1.000,0.893,0.306,0.250,0.102,0.184,0.279,0.276,0.056,0.082],"timbre":[46.204,-82.512,61.769,-114.167,48.384,-16.978,2.642,-2.864,1.394,-6.209,8.723,16.423]},{"start":263.50590,"duration":0.14594,"confidence":0.182,"loudness_start":-10.457,"loudness_max_time":0.04519,"loudness_max":-6.861,"pitches":[1.000,0.774,0.478,0.345,0.403,0.621,0.658,0.815,0.975,0.775,0.662,0.085],"timbre":[50.635,-65.349,24.400,19.085,15.918,-43.765,42.773,3.828,-22.412,4.593,-15.661,30.865]},{"start":263.65184,"duration":0.13342,"confidence":0.027,"loudness_start":-13.292,"loudness_max_time":0.01050,"loudness_max":-8.842,"pitches":[0.938,0.457,0.213,0.358,0.119,0.500,0.178,1.000,0.253,0.116,0.128,0.080],"timbre":[48.710,-89.644,28.330,9.868,41.428,-61.035,23.342,0.155,21.259,15.215,-15.912,-18.257]},{"start":263.78526,"duration":0.40063,"confidence":0.098,"loudness_start":-13.955,"loudness_max_time":0.01172,"loudness_max":-9.935,"pitches":[0.265,0.084,0.120,0.054,0.116,1.000,0.125,0.059,0.106,0.078,0.050,0.078],"timbre":[47.076,-60.691,-49.712,0.745,69.733,-60.046,-14.329,-35.829,5.202,26.442,-16.246,-3.124]},{"start":264.18590,"duration":0.13769,"confidence":0.052,"loudness_start":-18.055,"loudness_max_time":0.02830,"loudness_max":-15.673,"pitches":[1.000,0.153,0.159,0.059,0.064,0.218,0.036,0.068,0.364,0.156,0.069,0.091],"timbre":[43.127,-139.262,-41.779,-34.286,80.306,-54.127,-4.935,8.960,6.353,0.879,-9.253,-25.731]},{"start":264.32358,"duration":0.17615,"confidence":0.556,"loudness_start":-18.820,"loudness_max_time":0.04630,"loudness_max":-12.201,"pitches":[0.602,0.091,0.553,0.051,0.069,1.000,0.102,0.043,0.138,0.159,0.031,0.095],"timbre":[43.047,-88.205,-100.359,-18.455,83.233,-23.800,-6.232,-36.142,0.812,-34.932,-5.292,-16.764]},{"start":264.49973,"duration":0.10748,"confidence":0.234,"loudness_start":-21.133,"loudness_max_time":0.02565,"loudness_max":-17.781,"pitches":[0.914,0.149,0.116,0.050,0.071,1.000,0.183,0.032,0.184,0.110,0.031,0.122],"timbre":[41.556,-163.564,-18.648,-39.098,33.773,-45.802,-28.447,-2.709,0.632,5.433,-0.226,-3.852]},{"start":264.60721,"duration":0.29859,"confidence":0.884,"loudness_start":-19.119,"loudness_max_time":0.03322,"loudness_max":-7.395,"pitches":[1.000,0.157,0.105,0.241,0.265,0.921,0.355,0.085,0.261,0.085,0.054,0.218],"timbre":[46.360,-124.528,-2.719,17.670,31.364,16.667,-7.608,-0.813,-11.954,-15.412,22.237,-23.386]},{"start":264.90580,"duration":0.26694,"confidence":0.719,"loudness_start":-18.841,"loudness_max_time":0.02515,"loudness_max":-9.081,"pitches":[0.511,0.530,1.000,0.345,0.108,0.174,0.080,0.079,0.414,0.134,0.056,0.094],"timbre":[46.356,-105.168,-51.891,6.100,83.746,-48.911,4.555,-44.247,-13.056,-6.103,16.574,-31.145]},{"start":265.17274,"duration":0.31297,"confidence":1.000,"loudness_start":-18.650,"loudness_max_time":0.05488,"loudness_max":-3.219,"pitches":[0.478,0.544,1.000,0.257,0.078,0.155,0.070,0.117,0.487,0.064,0.023,0.185],"timbre":[47.754,-67.059,-30.703,-1.481,41.471,60.187,-20.539,4.164,18.704,-57.296,-22.964,-27.334]},{"start":265.48571,"duration":0.13864,"confidence":0.423,"loudness_start":-18.700,"loudness_max_time":0.01245,"loudness_max":-12.568,"pitches":[0.422,0.712,0.319,0.933,0.118,0.123,0.082,0.391,1.000,0.255,0.150,0.034],"timbre":[43.217,-85.707,-62.676,-16.283,77.518,-80.653,-32.129,-50.399,-37.905,28.359,-4.614,-0.691]},{"start":265.62435,"duration":0.72871,"confidence":0.965,"loudness_start":-19.060,"loudness_max_time":0.01671,"loudness_max":-6.174,"pitches":[0.282,0.093,0.084,0.161,0.123,1.000,0.178,0.256,0.306,0.103,0.074,0.085],"timbre":[49.913,-60.738,29.004,37.927,41.936,-25.437,3.217,7.808,-6.010,21.176,-3.960,27.367]},{"start":266.35306,"duration":0.23465,"confidence":0.019,"loudness_start":-16.413,"loudness_max_time":0.01989,"loudness_max":-13.715,"pitches":[0.535,0.036,0.021,0.066,0.202,1.000,0.315,0.032,0.157,0.027,0.030,0.028],"timbre":[44.790,-108.459,-33.787,-29.136,60.690,-56.047,-16.508,-2.792,12.876,5.349,-9.906,-14.107]},{"start":266.58771,"duration":0.16789,"confidence":0.474,"loudness_start":-18.456,"loudness_max_time":0.04508,"loudness_max":-12.418,"pitches":[0.619,0.087,0.050,0.089,0.059,1.000,0.116,0.128,0.641,0.075,0.030,0.122],"timbre":[43.156,-85.877,-98.310,-20.180,89.283,-27.030,-6.707,-39.300,4.406,-26.440,-7.608,-17.956]},{"start":266.75560,"duration":0.12317,"confidence":0.377,"loudness_start":-20.113,"loudness_max_time":0.02998,"loudness_max":-16.549,"pitches":[1.000,0.128,0.066,0.121,0.058,0.794,0.134,0.205,0.645,0.142,0.028,0.087],"timbre":[42.255,-143.681,-29.700,-38.805,46.544,-40.975,-26.011,-2.315,10.345,17.056,0.586,-3.196]},{"start":266.87878,"duration":0.28104,"confidence":0.828,"loudness_start":-18.636,"loudness_max_time":0.02628,"loudness_max":-8.341,"pitches":[1.000,0.201,0.050,0.176,0.240,0.795,0.301,0.056,0.257,0.059,0.071,0.304],"timbre":[46.642,-114.943,-5.131,21.296,22.458,-4.894,-3.912,-1.787,-18.333,-5.872,24.219,-23.379]},{"start":267.15982,"duration":0.16653,"confidence":0.632,"loudness_start":-19.096,"loudness_max_time":0.03231,"loudness_max":-10.346,"pitches":[0.718,1.000,0.197,0.137,0.064,0.377,0.090,0.167,0.660,0.207,0.119,0.130],"timbre":[43.735,-95.237,-76.247,14.279,72.034,-20.228,6.775,-26.267,-14.871,-38.075,3.325,-33.491]},{"start":267.32635,"duration":0.10907,"confidence":0.704,"loudness_start":-21.474,"loudness_max_time":0.01746,"loudness_max":-12.595,"pitches":[0.964,1.000,0.119,0.115,0.083,0.184,0.087,0.059,0.121,0.059,0.101,0.110],"timbre":[43.974,-161.284,-12.123,-1.311,54.400,-56.634,-13.154,-2.324,4.449,15.135,0.853,-20.936]},{"start":267.43542,"duration":0.30803,"confidence":1.000,"loudness_start":-18.689,"loudness_max_time":0.05535,"loudness_max":-2.619,"pitches":[0.489,0.569,1.000,0.332,0.051,0.175,0.133,0.126,0.514,0.054,0.018,0.280],"timbre":[48.210,-61.955,-27.535,9.770,51.582,50.563,-28.793,11.839,24.718,-54.004,-25.537,-28.658]},{"start":267.74345,"duration":0.08653,"confidence":0.439,"loudness_start":-18.987,"loudness_max_time":0.01950,"loudness_max":-13.073,"pitches":[0.451,0.647,0.558,1.000,0.387,0.304,0.085,0.161,0.185,0.074,0.295,0.307],"timbre":[43.462,-77.985,-61.152,-16.439,80.007,-61.495,-30.016,-54.753,-20.372,18.068,8.728,-6.931]},{"start":267.82998,"duration":0.20381,"confidence":0.952,"loudness_start":-18.702,"loudness_max_time":0.07558,"loudness_max":-5.381,"pitches":[1.000,0.598,0.905,0.904,0.317,0.258,0.110,0.231,0.817,0.212,0.056,0.078],"timbre":[46.554,-83.990,61.769,-109.859,42.869,-8.339,13.530,3.441,4.019,-6.122,2.354,12.434]},{"start":268.03379,"duration":0.14662,"confidence":0.226,"loudness_start":-10.633,"loudness_max_time":0.04628,"loudness_max":-6.854,"pitches":[1.000,0.685,0.316,0.402,0.627,0.871,0.863,0.970,0.872,0.810,0.764,0.058],"timbre":[50.874,-58.360,28.067,17.623,11.575,-43.464,41.101,4.522,-14.874,-0.797,-14.913,31.949]},{"start":268.18041,"duration":0.53193,"confidence":0.072,"loudness_start":-12.486,"loudness_max_time":0.00905,"loudness_max":-8.628,"pitches":[0.227,0.069,0.065,0.063,0.069,1.000,0.089,0.088,0.199,0.066,0.048,0.071],"timbre":[48.257,-79.095,-5.129,18.342,40.767,-58.082,-1.707,9.788,20.592,4.971,-23.170,-8.176]},{"start":268.71234,"duration":0.31224,"confidence":0.019,"loudness_start":-17.231,"loudness_max_time":0.01964,"loudness_max":-14.937,"pitches":[0.237,0.026,0.016,0.067,0.092,1.000,0.165,0.037,0.515,0.024,0.014,0.033],"timbre":[43.114,-139.683,-50.733,-12.562,59.528,-45.730,-20.762,-0.873,16.262,4.775,-19.083,-8.839]},{"start":269.02458,"duration":0.08277,"confidence":0.417,"loudness_start":-21.794,"loudness_max_time":0.03433,"loudness_max":-17.804,"pitches":[0.351,0.302,0.288,0.317,0.739,1.000,0.480,0.442,0.118,0.051,0.028,0.078],"timbre":[41.260,-166.863,-22.461,-40.257,34.323,-42.814,-28.231,-8.429,6.093,-5.716,3.725,-5.471]},{"start":269.10735,"duration":0.33229,"confidence":0.906,"loudness_start":-19.238,"loudness_max_time":0.06224,"loudness_max":-7.020,"pitches":[1.000,0.272,0.134,0.237,0.209,0.558,0.228,0.070,0.390,0.056,0.053,0.399],"timbre":[44.177,-147.354,8.235,-47.279,32.551,7.996,-13.531,7.576,-0.592,-21.124,-26.696,-14.097]},{"start":269.43964,"duration":0.11968,"confidence":0.482,"loudness_start":-18.625,"loudness_max_time":0.02050,"loudness_max":-13.225,"pitches":[1.000,0.746,0.134,0.140,0.075,0.201,0.090,0.133,0.276,0.149,0.091,0.078],"timbre":[44.862,-140.425,0.160,-11.509,48.700,-50.467,-7.673,-10.148,6.151,-5.695,-3.858,-28.445]},{"start":269.55932,"duration":0.14009,"confidence":0.212,"loudness_start":-17.197,"loudness_max_time":0.03939,"loudness_max":-13.682,"pitches":[0.764,1.000,0.247,0.127,0.094,0.086,0.075,0.039,0.178,0.061,0.074,0.197],"timbre":[44.165,-141.529,-20.672,-18.780,64.759,-35.626,-8.551,-2.612,11.899,-10.100,-7.924,-31.342]},{"start":269.69941,"duration":0.13320,"confidence":0.540,"loudness_start":-18.610,"loudness_max_time":0.04079,"loudness_max":-11.529,"pitches":[0.653,0.553,0.364,0.390,0.612,0.661,0.711,0.721,1.000,0.645,0.402,0.069],"timbre":[43.924,-140.595,-35.114,-9.635,45.024,-9.280,-19.570,-5.282,10.266,-8.879,-4.154,-22.757]},{"start":269.83261,"duration":0.29029,"confidence":0.304,"loudness_start":-19.183,"loudness_max_time":0.19966,"loudness_max":-15.629,"pitches":[0.213,0.380,1.000,0.574,0.059,0.071,0.053,0.277,0.617,0.070,0.022,0.060],"timbre":[42.567,-129.230,-25.686,-50.215,65.645,-36.017,-28.589,2.748,7.873,-15.953,-3.946,-16.850]},{"start":270.12290,"duration":0.17469,"confidence":0.992,"loudness_start":-19.996,"loudness_max_time":0.04605,"loudness_max":-5.976,"pitches":[0.904,1.000,0.279,0.480,0.050,0.124,0.068,0.304,0.683,0.142,0.052,0.051],"timbre":[48.451,-71.773,60.119,-55.640,51.355,46.508,31.369,12.718,-5.033,-18.501,1.440,19.454]},{"start":270.29760,"duration":0.96082,"confidence":0.112,"loudness_start":-10.866,"loudness_max_time":0.00839,"loudness_max":-7.082,"pitches":[0.276,0.061,0.052,0.073,0.067,1.000,0.054,0.076,0.197,0.061,0.043,0.066],"timbre":[48.889,-86.013,-21.996,29.384,32.796,-55.058,-7.958,5.571,2.895,3.871,-31.823,5.236]},{"start":271.25841,"duration":0.13746,"confidence":0.357,"loudness_start":-21.000,"loudness_max_time":0.05825,"loudness_max":-17.346,"pitches":[1.000,0.118,0.064,0.182,0.071,0.799,0.114,0.109,0.649,0.118,0.043,0.113],"timbre":[41.037,-168.540,-30.867,-45.452,43.556,-24.389,-20.445,-10.567,5.802,1.093,-6.712,-8.907]},{"start":271.39587,"duration":0.44721,"confidence":0.899,"loudness_start":-20.002,"loudness_max_time":0.03624,"loudness_max":-7.822,"pitches":[0.837,0.230,0.170,0.340,0.213,1.000,0.334,0.187,0.639,0.199,0.231,0.300],"timbre":[45.001,-135.575,-7.714,10.002,26.281,31.594,-4.793,2.909,-5.604,-18.801,-2.356,-17.670]},{"start":271.84308,"duration":0.12059,"confidence":0.693,"loudness_start":-21.734,"loudness_max_time":0.02673,"loudness_max":-13.105,"pitches":[0.820,1.000,0.119,0.092,0.067,0.164,0.077,0.090,0.234,0.071,0.069,0.134],"timbre":[43.577,-167.136,-14.521,-12.503,48.162,-27.193,-7.728,0.788,8.925,17.987,14.609,-17.656]},{"start":271.96367,"duration":0.16689,"confidence":0.604,"loudness_start":-18.584,"loudness_max_time":0.03444,"loudness_max":-10.064,"pitches":[0.350,0.518,0.212,0.232,0.421,0.475,0.610,0.626,1.000,0.684,0.396,0.033],"timbre":[44.171,-145.522,-35.109,10.407,42.214,-14.821,-26.923,-6.440,30.165,-6.997,0.437,-21.117]},{"start":272.13057,"duration":0.13424,"confidence":0.101,"loudness_start":-20.049,"loudness_max_time":0.05517,"loudness_max":-16.770,"pitches":[0.437,1.000,0.169,0.387,0.046,0.088,0.044,0.321,0.619,0.082,0.070,0.033],"timbre":[41.620,-164.685,-21.739,-35.202,42.757,-40.647,-42.893,-8.942,15.821,5.117,-2.397,-4.048]},{"start":272.26481,"duration":0.14676,"confidence":0.015,"loudness_start":-19.727,"loudness_max_time":0.09837,"loudness_max":-17.549,"pitches":[0.499,0.970,0.332,1.000,0.128,0.188,0.075,0.474,0.974,0.244,0.253,0.036],"timbre":[41.883,-129.897,-15.794,-48.703,40.254,-38.874,-37.783,-4.479,11.295,-11.566,13.053,-1.320]},{"start":272.41156,"duration":0.15016,"confidence":0.931,"loudness_start":-18.326,"loudness_max_time":0.02283,"loudness_max":-6.353,"pitches":[0.935,1.000,0.211,0.370,0.048,0.110,0.057,0.203,0.637,0.173,0.078,0.031],"timbre":[50.460,-54.215,71.764,16.559,40.870,2.926,35.988,-5.687,-12.114,14.646,35.513,27.991]},{"start":272.56172,"duration":0.14045,"confidence":0.085,"loudness_start":-10.712,"loudness_max_time":0.00828,"loudness_max":-7.284,"pitches":[0.706,0.255,0.145,0.201,0.112,0.295,0.414,0.580,1.000,0.688,0.655,0.046],"timbre":[50.483,-76.281,24.255,15.957,10.815,-46.236,47.591,7.220,-19.062,-2.530,-19.424,31.874]},{"start":272.70218,"duration":0.51215,"confidence":0.159,"loudness_start":-13.297,"loudness_max_time":0.01546,"loudness_max":-8.553,"pitches":[0.217,0.064,0.067,0.072,0.070,1.000,0.093,0.096,0.268,0.060,0.046,0.069],"timbre":[47.970,-92.045,-11.293,20.395,33.123,-48.524,-2.781,8.915,22.387,10.125,-16.297,-2.205]},{"start":273.21433,"duration":0.33850,"confidence":0.121,"loudness_start":-18.323,"loudness_max_time":0.07637,"loudness_max":-16.110,"pitches":[0.244,0.022,0.016,0.039,0.077,1.000,0.134,0.028,0.086,0.024,0.013,0.029],"timbre":[41.888,-153.245,-28.780,-31.895,53.766,-43.542,-12.362,9.556,22.936,2.544,-11.358,-13.079]},{"start":273.55283,"duration":0.13379,"confidence":0.207,"loudness_start":-21.092,"loudness_max_time":0.03079,"loudness_max":-17.455,"pitches":[0.778,0.103,0.024,0.060,0.053,1.000,0.122,0.029,0.178,0.047,0.028,0.069],"timbre":[41.712,-157.378,-21.549,-40.402,42.258,-49.895,-24.183,-3.055,-3.005,8.592,3.132,-6.276]},{"start":273.68662,"duration":0.56839,"confidence":0.849,"loudness_start":-18.606,"loudness_max_time":0.00909,"loudness_max":-8.016,"pitches":[0.779,0.072,0.097,0.233,0.127,1.000,0.209,0.084,0.589,0.102,0.090,0.135],"timbre":[45.242,-131.351,-9.440,65.910,13.378,-69.131,-31.272,-8.383,-30.800,2.715,-32.122,-6.867]},{"start":274.25501,"duration":0.14558,"confidence":0.789,"loudness_start":-24.433,"loudness_max_time":0.00932,"loudness_max":-12.759,"pitches":[0.424,0.179,0.171,0.173,0.306,0.387,0.640,0.642,1.000,0.856,0.698,0.022],"timbre":[38.791,-111.641,-71.236,36.854,-14.162,-108.519,-38.042,-9.350,-13.135,22.463,-13.192,-12.082]},{"start":274.40059,"duration":0.28694,"confidence":0.457,"loudness_start":-28.239,"loudness_max_time":0.01971,"loudness_max":-22.352,"pitches":[0.111,0.027,0.017,0.044,0.054,0.164,0.076,0.111,1.000,0.108,0.067,0.078],"timbre":[35.962,-144.825,-69.507,-43.956,38.803,-64.537,-12.206,7.444,-22.857,7.958,0.587,9.502]},{"start":274.68753,"duration":0.13873,"confidence":0.555,"loudness_start":-26.245,"loudness_max_time":0.07680,"loudness_max":-20.448,"pitches":[0.066,0.007,0.020,0.041,0.013,0.080,0.079,0.185,1.000,0.197,0.014,0.035],"timbre":[38.702,-92.237,-46.506,-57.357,8.019,-44.563,-14.940,-2.318,-4.701,7.789,6.632,21.285]},{"start":274.82626,"duration":0.12594,"confidence":0.783,"loudness_start":-23.006,"loudness_max_time":0.00381,"loudness_max":-10.815,"pitches":[0.992,0.512,0.141,0.167,0.108,0.141,0.378,0.427,0.930,0.772,1.000,0.015],"timbre":[40.793,-57.519,-51.119,22.751,-47.022,-107.014,-38.882,-15.458,-7.735,6.755,-8.603,2.121]},{"start":274.95220,"duration":0.23442,"confidence":0.276,"loudness_start":-24.328,"loudness_max_time":0.04170,"loudness_max":-20.997,"pitches":[1.000,0.056,0.076,0.138,0.053,0.216,0.075,0.203,0.582,0.062,0.046,0.150],"timbre":[37.974,-101.872,3.420,-32.526,43.099,-32.926,-34.830,0.152,13.464,2.605,0.603,-7.685]},{"start":275.18662,"duration":0.45583,"confidence":0.669,"loudness_start":-24.879,"loudness_max_time":0.07998,"loudness_max":-16.953,"pitches":[0.080,0.085,0.066,0.052,0.069,1.000,0.048,0.051,0.058,0.081,0.367,0.100],"timbre":[37.011,-137.371,-23.294,-38.426,65.921,-22.292,-37.063,-64.530,-19.989,24.626,-29.828,2.893]},{"start":275.64245,"duration":0.41401,"confidence":1.000,"loudness_start":-26.804,"loudness_max_time":0.05512,"loudness_max":-7.995,"pitches":[1.000,0.185,0.081,0.090,0.065,0.293,0.076,0.647,0.185,0.065,0.708,0.156],"timbre":[43.280,-143.346,13.714,-57.794,65.151,66.433,28.331,11.068,9.713,-22.067,-12.881,-10.540]},{"start":276.05646,"duration":0.29664,"confidence":0.184,"loudness_start":-20.648,"loudness_max_time":0.05490,"loudness_max":-17.652,"pitches":[1.000,0.020,0.014,0.018,0.032,0.138,0.033,0.047,0.450,0.046,0.078,0.063],"timbre":[39.314,-186.007,-20.513,-11.588,79.678,-43.100,-18.747,9.153,-2.871,2.335,-14.425,-11.544]},{"start":276.35311,"duration":0.16177,"confidence":0.118,"loudness_start":-25.601,"loudness_max_time":0.06265,"loudness_max":-22.633,"pitches":[0.690,0.048,0.044,0.022,0.024,0.196,0.071,0.081,1.000,0.154,0.034,0.061],"timbre":[35.809,-170.336,-73.640,-48.975,76.391,-46.505,-10.836,16.686,-10.609,3.460,-8.183,-6.542]},{"start":276.51488,"duration":0.43152,"confidence":0.986,"loudness_start":-26.623,"loudness_max_time":0.01993,"loudness_max":-11.887,"pitches":[0.105,0.055,0.054,0.062,0.063,0.094,0.078,0.308,1.000,0.114,0.094,0.089],"timbre":[43.067,-115.582,9.680,63.512,42.886,-45.330,10.127,16.691,10.491,15.790,-32.935,2.578]},{"start":276.94639,"duration":0.25968,"confidence":0.460,"loudness_start":-25.788,"loudness_max_time":0.08025,"loudness_max":-20.615,"pitches":[0.067,0.012,0.030,0.048,0.022,0.094,0.060,0.117,1.000,0.073,0.024,0.045],"timbre":[37.739,-90.553,-55.393,-49.729,18.105,-34.891,-20.187,-5.629,7.509,2.895,9.659,10.855]},{"start":277.20608,"duration":0.14408,"confidence":0.394,"loudness_start":-24.590,"loudness_max_time":0.04771,"loudness_max":-20.191,"pitches":[1.000,0.036,0.048,0.156,0.061,0.397,0.210,0.392,0.768,0.199,0.057,0.076],"timbre":[37.755,-103.045,-1.544,-33.619,55.729,-19.587,-31.828,-11.968,9.747,9.542,-5.829,-5.244]},{"start":277.35016,"duration":0.13379,"confidence":0.298,"loudness_start":-23.643,"loudness_max_time":0.02633,"loudness_max":-20.127,"pitches":[1.000,0.064,0.081,0.130,0.041,0.296,0.160,0.577,0.346,0.049,0.042,0.098],"timbre":[38.588,-108.658,30.712,-5.795,85.925,-39.798,-23.204,11.543,15.449,-1.593,-2.337,-4.323]},{"start":277.48395,"duration":0.45773,"confidence":0.637,"loudness_start":-23.758,"loudness_max_time":0.04814,"loudness_max":-15.928,"pitches":[0.210,0.058,0.036,0.048,0.050,1.000,0.046,0.044,0.074,0.060,0.509,0.100],"timbre":[38.627,-170.513,-29.009,-9.615,68.222,-9.313,-27.305,-13.275,-17.323,19.196,-22.495,-2.269]},{"start":277.94168,"duration":0.39016,"confidence":1.000,"loudness_start":-24.296,"loudness_max_time":0.02052,"loudness_max":-8.110,"pitches":[1.000,0.105,0.077,0.052,0.050,0.199,0.049,0.378,0.106,0.037,0.352,0.080],"timbre":[46.584,-128.326,23.819,50.759,45.489,-46.806,5.967,-9.483,10.220,5.909,-9.144,3.073]},{"start":278.33184,"duration":0.44703,"confidence":0.286,"loudness_start":-21.777,"loudness_max_time":0.04637,"loudness_max":-18.200,"pitches":[1.000,0.025,0.078,0.025,0.055,0.283,0.064,0.068,0.588,0.068,0.086,0.080],"timbre":[39.034,-184.249,-29.597,-3.867,77.977,-45.964,-21.290,18.119,-1.602,1.505,-8.137,-12.880]},{"start":278.77887,"duration":0.13868,"confidence":0.980,"loudness_start":-24.413,"loudness_max_time":0.01984,"loudness_max":-11.550,"pitches":[0.372,0.014,0.026,0.013,0.037,0.320,0.100,1.000,0.453,0.041,0.040,0.135],"timbre":[45.152,-111.845,71.682,29.070,60.006,-51.721,35.496,-3.762,16.979,17.767,12.245,-6.867]},{"start":278.91755,"duration":0.29846,"confidence":0.069,"loudness_start":-17.892,"loudness_max_time":0.03075,"loudness_max":-13.464,"pitches":[0.112,0.021,0.013,0.044,0.036,0.082,0.050,0.160,1.000,0.098,0.062,0.070],"timbre":[42.232,-137.259,-3.588,54.368,48.807,-46.440,13.927,12.652,5.885,12.546,-10.944,6.194]},{"start":279.21601,"duration":0.27837,"confidence":0.176,"loudness_start":-25.001,"loudness_max_time":0.07576,"loudness_max":-20.915,"pitches":[0.103,0.013,0.029,0.063,0.020,0.117,0.079,0.100,1.000,0.080,0.023,0.049],"timbre":[37.525,-87.373,-46.998,-54.907,20.188,-45.930,-20.333,-11.033,5.460,2.720,4.600,10.975]},{"start":279.49438,"duration":0.11433,"confidence":0.382,"loudness_start":-24.083,"loudness_max_time":0.02417,"loudness_max":-20.187,"pitches":[1.000,0.040,0.063,0.146,0.062,0.508,0.335,0.381,0.557,0.157,0.045,0.201],"timbre":[38.550,-101.383,4.782,-29.724,50.333,-39.798,-43.498,-2.959,21.085,-0.755,1.940,-8.543]},{"start":279.60871,"duration":0.17379,"confidence":0.255,"loudness_start":-22.270,"loudness_max_time":0.05347,"loudness_max":-19.426,"pitches":[1.000,0.038,0.113,0.205,0.034,0.398,0.156,0.829,0.546,0.028,0.047,0.161],"timbre":[39.007,-107.226,28.395,-11.292,70.361,-32.497,-22.676,16.496,11.688,-0.101,-7.894,-6.001]},{"start":279.78249,"duration":0.42268,"confidence":0.572,"loudness_start":-23.301,"loudness_max_time":0.01404,"loudness_max":-16.121,"pitches":[0.178,0.067,0.033,0.031,0.041,1.000,0.044,0.035,0.040,0.060,0.545,0.102],"timbre":[39.646,-202.037,-45.140,2.763,62.861,-59.573,-48.766,-7.116,-13.143,1.277,-5.866,3.257]},{"start":280.20517,"duration":0.37977,"confidence":1.000,"loudness_start":-25.987,"loudness_max_time":0.02045,"loudness_max":-8.177,"pitches":[1.000,0.169,0.094,0.058,0.056,0.168,0.072,0.418,0.119,0.062,0.443,0.081],"timbre":[46.438,-120.791,31.717,56.077,43.361,-50.544,11.062,-11.577,14.016,5.423,-12.168,-0.986]},{"start":280.58494,"duration":0.15084,"confidence":0.272,"loudness_start":-20.927,"loudness_max_time":0.05630,"loudness_max":-17.459,"pitches":[1.000,0.066,0.009,0.021,0.018,0.092,0.034,0.057,0.135,0.058,0.062,0.083],"timbre":[39.919,-183.407,-13.883,-15.910,80.283,-31.785,-19.889,5.836,-0.603,7.262,-15.901,-10.262]},{"start":280.73578,"duration":0.30771,"confidence":0.017,"loudness_start":-23.857,"loudness_max_time":0.04444,"loudness_max":-20.790,"pitches":[1.000,0.027,0.111,0.031,0.041,0.216,0.079,0.045,0.625,0.055,0.066,0.077],"timbre":[37.337,-183.669,-50.713,-30.063,74.492,-50.563,-14.721,17.905,-6.452,5.136,-4.769,-13.028]},{"start":281.04349,"duration":0.43338,"confidence":0.998,"loudness_start":-25.880,"loudness_max_time":0.01800,"loudness_max":-11.434,"pitches":[0.117,0.055,0.052,0.060,0.063,0.119,0.083,0.359,1.000,0.105,0.088,0.098],"timbre":[43.411,-115.517,10.273,66.207,45.524,-43.607,16.468,11.262,13.343,15.802,-33.255,5.262]},{"start":281.47687,"duration":0.28063,"confidence":0.491,"loudness_start":-25.004,"loudness_max_time":0.01973,"loudness_max":-20.407,"pitches":[0.050,0.011,0.036,0.040,0.019,0.094,0.058,0.150,1.000,0.077,0.024,0.047],"timbre":[37.944,-95.478,-48.152,-34.568,14.884,-51.722,-20.098,-5.982,5.771,7.095,-0.766,14.229]},{"start":281.75751,"duration":0.12095,"confidence":0.355,"loudness_start":-24.510,"loudness_max_time":0.02331,"loudness_max":-21.100,"pitches":[1.000,0.028,0.078,0.149,0.065,0.369,0.170,0.534,0.954,0.250,0.035,0.094],"timbre":[37.748,-114.719,1.349,-26.704,59.461,-36.258,-35.790,-3.498,9.870,2.415,-1.029,-12.605]},{"start":281.87846,"duration":0.16862,"confidence":0.307,"loudness_start":-23.804,"loudness_max_time":0.02526,"loudness_max":-19.988,"pitches":[1.000,0.038,0.138,0.232,0.039,0.481,0.146,0.826,0.345,0.052,0.039,0.087],"timbre":[38.676,-110.865,44.234,-0.143,89.754,-37.886,-24.482,9.296,5.958,-5.271,-3.911,-10.031]},{"start":282.04707,"duration":0.39628,"confidence":0.576,"loudness_start":-23.526,"loudness_max_time":0.01379,"loudness_max":-15.895,"pitches":[0.183,0.052,0.032,0.028,0.041,1.000,0.035,0.029,0.075,0.067,0.487,0.102],"timbre":[39.406,-208.683,-49.795,6.812,71.932,-68.259,-41.724,-6.519,-25.463,-0.065,-2.481,-1.572]},{"start":282.44336,"duration":0.41551,"confidence":1.000,"loudness_start":-25.119,"loudness_max_time":0.04735,"loudness_max":-8.519,"pitches":[1.000,0.099,0.051,0.039,0.052,0.184,0.055,0.386,0.087,0.037,0.377,0.064],"timbre":[43.788,-151.329,3.622,-31.919,59.672,68.427,24.632,7.964,15.090,-21.262,-6.872,-6.192]},{"start":282.85887,"duration":0.42290,"confidence":0.141,"loudness_start":-21.260,"loudness_max_time":0.04719,"loudness_max":-18.244,"pitches":[1.000,0.024,0.076,0.021,0.038,0.268,0.058,0.050,0.537,0.066,0.083,0.061],"timbre":[39.102,-185.029,-34.181,-2.725,74.631,-50.556,-21.943,14.451,-0.824,0.111,-8.471,-12.210]},{"start":283.28177,"duration":0.46236,"confidence":0.971,"loudness_start":-25.856,"loudness_max_time":0.04417,"loudness_max":-11.939,"pitches":[0.122,0.063,0.041,0.055,0.053,0.121,0.099,0.330,1.000,0.178,0.091,0.107],"timbre":[41.728,-133.072,-6.308,2.405,57.253,46.451,33.853,8.963,9.570,3.786,-13.382,-7.940]},{"start":283.74413,"duration":0.26463,"confidence":0.157,"loudness_start":-23.469,"loudness_max_time":0.07957,"loudness_max":-20.722,"pitches":[0.089,0.012,0.034,0.063,0.014,0.095,0.079,0.094,1.000,0.085,0.023,0.045],"timbre":[38.121,-85.788,-44.943,-43.517,12.834,-45.867,-23.387,-0.041,5.815,1.750,4.428,7.986]},{"start":284.00875,"duration":0.14594,"confidence":0.516,"loudness_start":-24.515,"loudness_max_time":0.04041,"loudness_max":-19.218,"pitches":[1.000,0.022,0.057,0.136,0.039,0.324,0.163,0.306,0.621,0.138,0.034,0.141],"timbre":[38.632,-108.339,1.036,-31.045,50.313,-19.869,-39.047,6.892,19.906,9.423,3.486,-9.289]},{"start":284.15469,"duration":0.15070,"confidence":0.268,"loudness_start":-22.871,"loudness_max_time":0.01807,"loudness_max":-19.702,"pitches":[1.000,0.030,0.112,0.203,0.027,0.227,0.135,0.603,0.394,0.030,0.027,0.129],"timbre":[38.995,-108.350,35.155,1.024,74.221,-47.881,-21.418,19.612,14.568,-5.043,-0.401,-3.153]},{"start":284.30540,"duration":0.42789,"confidence":0.621,"loudness_start":-23.077,"loudness_max_time":0.01998,"loudness_max":-16.012,"pitches":[0.158,0.052,0.031,0.036,0.040,1.000,0.048,0.034,0.036,0.064,0.508,0.093],"timbre":[39.808,-193.647,-42.659,6.163,62.493,-41.251,-44.345,-9.091,-18.094,13.854,0.133,0.934]},{"start":284.73329,"duration":0.42531,"confidence":1.000,"loudness_start":-25.502,"loudness_max_time":0.02048,"loudness_max":-7.917,"pitches":[1.000,0.110,0.047,0.050,0.043,0.160,0.056,0.367,0.101,0.037,0.556,0.114],"timbre":[46.705,-128.870,26.733,54.118,44.642,-44.823,12.311,-13.850,10.665,7.120,-12.563,1.519]},{"start":285.15859,"duration":0.39805,"confidence":0.044,"loudness_start":-19.993,"loudness_max_time":0.00830,"loudness_max":-17.880,"pitches":[1.000,0.021,0.095,0.034,0.050,0.239,0.063,0.075,0.529,0.079,0.043,0.079],"timbre":[38.879,-191.288,-31.228,3.191,77.546,-70.705,-25.353,17.556,1.561,-7.738,-5.652,-11.683]},{"start":285.55664,"duration":0.44948,"confidence":0.992,"loudness_start":-26.250,"loudness_max_time":0.03417,"loudness_max":-12.018,"pitches":[0.118,0.053,0.053,0.061,0.059,0.093,0.073,0.292,1.000,0.101,0.079,0.088],"timbre":[42.079,-119.641,-5.143,49.407,51.616,18.246,22.898,11.811,13.851,15.146,-1.087,-6.724]},{"start":286.00612,"duration":0.27950,"confidence":0.472,"loudness_start":-26.653,"loudness_max_time":0.16385,"loudness_max":-21.119,"pitches":[0.064,0.012,0.028,0.042,0.024,0.082,0.039,0.138,1.000,0.059,0.022,0.054],"timbre":[37.576,-93.000,-47.275,-44.933,22.103,-40.025,-18.338,-1.641,9.578,6.033,7.871,12.862]},{"start":286.28562,"duration":0.11551,"confidence":0.294,"loudness_start":-25.585,"loudness_max_time":0.02850,"loudness_max":-22.046,"pitches":[1.000,0.029,0.061,0.145,0.083,0.460,0.193,0.602,0.685,0.173,0.034,0.079],"timbre":[37.154,-117.329,15.684,-21.492,69.004,-35.154,-43.588,-8.868,4.598,7.877,-1.447,-8.772]},{"start":286.40113,"duration":0.13937,"confidence":0.451,"loudness_start":-24.463,"loudness_max_time":0.04832,"loudness_max":-19.437,"pitches":[1.000,0.046,0.150,0.192,0.051,0.304,0.097,0.783,0.368,0.057,0.049,0.108],"timbre":[38.536,-107.640,41.858,2.585,89.117,-22.993,-24.932,13.072,12.430,1.094,0.107,-6.331]},{"start":286.54050,"duration":0.45778,"confidence":0.708,"loudness_start":-24.302,"loudness_max_time":0.04878,"loudness_max":-15.485,"pitches":[0.147,0.048,0.036,0.032,0.048,1.000,0.040,0.034,0.051,0.050,0.447,0.108],"timbre":[38.225,-167.744,-22.841,-5.741,80.539,-6.491,-24.243,-19.639,-28.350,23.308,-25.846,3.340]},{"start":286.99828,"duration":0.38902,"confidence":1.000,"loudness_start":-25.641,"loudness_max_time":0.02011,"loudness_max":-8.127,"pitches":[1.000,0.131,0.097,0.059,0.059,0.250,0.050,0.440,0.115,0.041,0.289,0.094],"timbre":[46.711,-124.987,27.531,53.845,49.956,-42.002,10.930,-10.181,14.089,3.194,-7.725,2.756]},{"start":287.38730,"duration":0.44762,"confidence":0.066,"loudness_start":-21.585,"loudness_max_time":0.04909,"loudness_max":-18.973,"pitches":[1.000,0.028,0.081,0.022,0.042,0.234,0.065,0.057,0.492,0.067,0.055,0.079],"timbre":[38.808,-185.437,-33.893,-7.414,75.723,-50.186,-22.216,18.950,-3.004,0.753,-8.328,-12.935]},{"start":287.83492,"duration":0.42286,"confidence":0.979,"loudness_start":-25.718,"loudness_max_time":0.01973,"loudness_max":-11.767,"pitches":[0.099,0.075,0.040,0.052,0.053,0.111,0.090,0.371,1.000,0.146,0.116,0.095],"timbre":[43.431,-123.417,13.152,60.979,48.470,-38.966,22.135,7.445,10.454,19.278,-28.846,3.373]},{"start":288.25778,"duration":0.29093,"confidence":0.625,"loudness_start":-25.885,"loudness_max_time":0.07202,"loudness_max":-19.859,"pitches":[0.076,0.012,0.047,0.056,0.018,0.085,0.057,0.081,1.000,0.058,0.016,0.038],"timbre":[38.048,-94.820,-49.757,-46.126,20.863,-25.367,-11.376,10.090,7.161,-0.210,19.344,9.550]},{"start":288.54871,"duration":0.11084,"confidence":0.393,"loudness_start":-24.156,"loudness_max_time":0.02800,"loudness_max":-20.415,"pitches":[0.880,0.041,0.067,0.126,0.071,0.393,0.153,0.466,1.000,0.263,0.032,0.185],"timbre":[38.298,-108.514,-8.570,-28.908,47.144,-34.395,-38.825,-1.792,20.334,-0.375,0.049,-6.122]},{"start":288.65955,"duration":0.16785,"confidence":0.329,"loudness_start":-22.981,"loudness_max_time":0.02454,"loudness_max":-19.314,"pitches":[1.000,0.035,0.170,0.189,0.037,0.359,0.140,0.862,0.871,0.057,0.054,0.169],"timbre":[39.060,-110.911,14.340,-16.008,68.401,-28.005,-17.134,20.462,12.397,3.455,-2.394,-9.797]},{"start":288.82739,"duration":0.43433,"confidence":0.627,"loudness_start":-24.277,"loudness_max_time":0.02816,"loudness_max":-16.122,"pitches":[0.174,0.055,0.043,0.032,0.046,1.000,0.044,0.035,0.042,0.063,0.519,0.096],"timbre":[39.411,-184.698,-39.814,3.500,62.053,-21.242,-43.380,-1.746,-14.090,23.162,8.299,0.450]},{"start":289.26172,"duration":0.37782,"confidence":1.000,"loudness_start":-25.304,"loudness_max_time":0.02005,"loudness_max":-8.136,"pitches":[1.000,0.210,0.105,0.068,0.063,0.209,0.089,0.556,0.126,0.061,0.389,0.097],"timbre":[46.302,-118.576,34.936,55.449,49.690,-49.623,13.857,-9.909,14.076,6.798,-10.794,0.133]},{"start":289.63955,"duration":0.15782,"confidence":0.117,"loudness_start":-20.863,"loudness_max_time":0.05857,"loudness_max":-18.405,"pitches":[1.000,0.060,0.013,0.020,0.018,0.092,0.034,0.067,0.163,0.067,0.057,0.077],"timbre":[39.574,-182.120,-14.700,-16.584,77.923,-36.683,-19.547,4.259,-1.080,7.261,-16.348,-8.278]},{"start":289.79737,"duration":0.29306,"confidence":0.132,"loudness_start":-24.121,"loudness_max_time":0.04349,"loudness_max":-21.008,"pitches":[1.000,0.025,0.118,0.031,0.037,0.183,0.082,0.054,0.685,0.060,0.060,0.074],"timbre":[37.021,-178.671,-53.094,-37.198,76.034,-45.718,-17.061,19.256,-5.076,7.130,-6.730,-7.593]},{"start":290.09043,"duration":0.43605,"confidence":0.987,"loudness_start":-25.870,"loudness_max_time":0.02952,"loudness_max":-11.769,"pitches":[0.150,0.060,0.056,0.057,0.065,0.122,0.100,0.323,1.000,0.121,0.093,0.108],"timbre":[42.916,-117.470,3.113,59.871,46.996,-11.639,17.345,13.809,8.029,18.932,-14.276,-3.966]},{"start":290.52649,"duration":0.27891,"confidence":0.432,"loudness_start":-24.971,"loudness_max_time":0.08937,"loudness_max":-20.570,"pitches":[0.065,0.009,0.036,0.041,0.021,0.091,0.059,0.109,1.000,0.058,0.021,0.046],"timbre":[38.126,-91.592,-55.374,-51.880,18.546,-33.752,-18.378,-1.955,11.263,-0.748,12.089,11.551]},{"start":290.80540,"duration":0.12236,"confidence":0.147,"loudness_start":-24.448,"loudness_max_time":0.03218,"loudness_max":-21.013,"pitches":[0.936,0.030,0.046,0.132,0.053,0.285,0.274,0.436,1.000,0.238,0.038,0.061],"timbre":[37.469,-121.028,-4.100,-21.019,62.165,-41.711,-31.704,-11.241,10.068,15.545,-1.882,-5.612]},{"start":290.92776,"duration":0.17501,"confidence":0.486,"loudness_start":-23.751,"loudness_max_time":0.03227,"loudness_max":-19.471,"pitches":[1.000,0.033,0.093,0.171,0.028,0.381,0.145,0.746,0.445,0.039,0.030,0.081],"timbre":[38.956,-115.802,30.931,-4.455,78.982,-27.308,-11.213,11.288,9.289,0.434,-2.714,-10.621]},{"start":291.10277,"duration":0.41955,"confidence":0.625,"loudness_start":-23.372,"loudness_max_time":0.01501,"loudness_max":-15.605,"pitches":[0.176,0.060,0.045,0.039,0.043,1.000,0.046,0.036,0.063,0.066,0.529,0.120],"timbre":[39.630,-201.962,-46.580,14.856,70.210,-60.815,-41.679,-1.217,-23.917,-0.419,-2.982,1.560]},{"start":291.52231,"duration":0.72930,"confidence":1.000,"loudness_start":-24.832,"loudness_max_time":0.02519,"loudness_max":-8.440,"pitches":[1.000,0.061,0.065,0.108,0.063,0.178,0.047,0.175,0.312,0.102,0.127,0.095],"timbre":[45.019,-134.689,-8.910,73.456,58.583,-5.821,5.359,-6.570,11.492,5.350,-2.542,0.732]},{"start":292.25161,"duration":0.11079,"confidence":0.150,"loudness_start":-24.233,"loudness_max_time":0.06934,"loudness_max":-22.494,"pitches":[0.300,0.050,0.074,0.068,0.020,0.122,0.060,0.313,1.000,0.256,0.026,0.056],"timbre":[37.136,-180.689,-64.176,-63.769,66.339,-57.829,11.297,5.507,-15.048,-4.380,2.466,-4.648]},{"start":292.36240,"duration":0.44304,"confidence":0.908,"loudness_start":-22.889,"loudness_max_time":0.02222,"loudness_max":-11.689,"pitches":[0.183,0.092,0.062,0.154,0.082,0.209,0.160,0.352,1.000,0.269,0.137,0.159],"timbre":[43.427,-124.648,15.052,63.446,45.806,-42.237,19.247,16.648,10.278,9.368,-24.826,-0.212]},{"start":292.80544,"duration":0.27052,"confidence":0.516,"loudness_start":-24.002,"loudness_max_time":0.02193,"loudness_max":-18.507,"pitches":[0.067,0.011,0.034,0.111,0.017,0.085,0.055,0.088,1.000,0.047,0.017,0.040],"timbre":[39.756,-114.088,-37.338,-24.827,20.671,-49.412,-1.303,7.560,4.290,-0.791,7.204,18.095]},{"start":293.07596,"duration":0.12776,"confidence":0.201,"loudness_start":-23.095,"loudness_max_time":0.02542,"loudness_max":-20.136,"pitches":[1.000,0.023,0.174,0.398,0.050,0.356,0.187,0.449,0.621,0.056,0.031,0.150],"timbre":[38.559,-121.340,0.891,-28.856,57.372,-35.243,-43.586,4.313,15.604,-1.501,0.564,-7.426]},{"start":293.20372,"duration":0.12744,"confidence":0.362,"loudness_start":-23.440,"loudness_max_time":0.03093,"loudness_max":-18.924,"pitches":[0.967,0.031,0.128,0.290,0.037,0.161,0.100,0.545,1.000,0.118,0.035,0.134],"timbre":[40.011,-128.538,31.533,-14.042,78.274,-39.425,-20.092,12.625,8.974,6.247,1.784,2.813]},{"start":293.33116,"duration":0.45878,"confidence":0.430,"loudness_start":-21.285,"loudness_max_time":0.04968,"loudness_max":-16.020,"pitches":[0.137,0.060,0.043,0.079,0.044,1.000,0.053,0.051,0.345,0.067,0.456,0.089],"timbre":[39.342,-189.436,-37.941,-7.118,63.056,-23.419,-23.354,-4.958,-9.651,10.274,-22.152,-0.919]},{"start":293.78993,"duration":0.37841,"confidence":1.000,"loudness_start":-25.580,"loudness_max_time":0.01964,"loudness_max":-7.959,"pitches":[1.000,0.148,0.069,0.099,0.044,0.144,0.072,0.429,0.618,0.057,0.412,0.120],"timbre":[46.966,-126.344,21.744,45.680,37.734,-44.862,15.008,-5.678,11.553,5.107,-1.540,0.596]},{"start":294.16834,"duration":0.19143,"confidence":0.183,"loudness_start":-20.732,"loudness_max_time":0.05442,"loudness_max":-17.636,"pitches":[1.000,0.036,0.012,0.054,0.022,0.101,0.029,0.067,0.240,0.035,0.048,0.057],"timbre":[39.607,-189.758,-23.829,-13.928,71.880,-35.433,-20.813,7.953,0.953,6.434,-14.696,-8.656]},{"start":294.35977,"duration":0.24857,"confidence":0.132,"loudness_start":-23.445,"loudness_max_time":0.05816,"loudness_max":-21.155,"pitches":[0.922,0.031,0.029,0.136,0.051,0.182,0.088,0.066,1.000,0.070,0.048,0.084],"timbre":[37.684,-192.576,-49.632,-42.302,82.286,-57.557,-1.388,24.880,-11.150,-16.176,-1.924,-10.610]},{"start":294.60834,"duration":0.16322,"confidence":0.936,"loudness_start":-25.325,"loudness_max_time":0.04084,"loudness_max":-12.766,"pitches":[0.327,0.026,0.028,0.149,0.031,0.233,0.121,1.000,0.542,0.091,0.043,0.061],"timbre":[43.271,-111.198,63.465,-4.010,73.946,21.386,48.231,-3.729,21.581,11.471,24.271,-15.746]},{"start":294.77156,"duration":0.23215,"confidence":0.126,"loudness_start":-17.889,"loudness_max_time":0.02501,"loudness_max":-13.284,"pitches":[0.071,0.012,0.014,0.096,0.027,0.059,0.043,0.148,1.000,0.069,0.033,0.049],"timbre":[42.370,-152.461,-13.043,41.356,36.996,-62.550,16.883,5.728,2.152,20.110,-2.428,6.207]},{"start":295.00372,"duration":0.33556,"confidence":0.367,"loudness_start":-24.750,"loudness_max_time":0.14200,"loudness_max":-20.056,"pitches":[0.042,0.006,0.009,0.030,0.010,0.059,0.039,0.087,1.000,0.034,0.013,0.031],"timbre":[37.669,-125.538,-29.470,-53.626,50.262,-44.776,13.380,17.785,-2.321,-2.144,-5.046,14.162]},{"start":295.33927,"duration":0.11079,"confidence":0.068,"loudness_start":-24.317,"loudness_max_time":0.02290,"loudness_max":-21.464,"pitches":[1.000,0.039,0.161,0.409,0.103,0.389,0.247,0.512,0.497,0.166,0.050,0.119],"timbre":[37.459,-119.790,4.119,-26.902,72.117,-38.212,-41.697,-9.413,3.670,-2.582,-0.793,-6.458]},{"start":295.45007,"duration":0.16254,"confidence":0.588,"loudness_start":-23.751,"loudness_max_time":0.06213,"loudness_max":-18.351,"pitches":[0.312,0.011,0.074,0.201,0.016,0.115,0.045,0.327,1.000,0.096,0.014,0.041],"timbre":[39.825,-139.178,-2.749,-24.023,62.122,-19.482,2.895,12.416,3.543,16.092,-4.376,-4.439]},{"start":295.61261,"duration":0.33156,"confidence":0.530,"loudness_start":-22.531,"loudness_max_time":0.03256,"loudness_max":-15.741,"pitches":[0.137,0.035,0.031,0.151,0.054,1.000,0.052,0.052,0.255,0.067,0.257,0.085],"timbre":[39.668,-194.662,-47.243,-2.169,70.255,-19.838,-22.646,-10.900,-21.443,15.671,-0.516,-2.348]},{"start":295.94417,"duration":0.11098,"confidence":0.054,"loudness_start":-25.574,"loudness_max_time":0.04773,"loudness_max":-23.098,"pitches":[1.000,0.179,0.085,0.108,0.031,0.323,0.075,0.223,0.592,0.227,0.670,0.390],"timbre":[36.047,-214.171,-87.321,-62.822,53.543,-53.060,-7.011,0.587,-29.529,-7.947,0.990,0.605]},{"start":296.05515,"duration":0.83673,"confidence":1.000,"loudness_start":-24.870,"loudness_max_time":0.02218,"loudness_max":-8.582,"pitches":[1.000,0.050,0.034,0.087,0.038,0.167,0.039,0.166,0.474,0.053,0.099,0.067],"timbre":[44.969,-140.993,-10.703,85.167,54.432,-37.192,4.028,-8.555,5.451,8.427,-27.249,3.433]},{"start":296.89188,"duration":0.42721,"confidence":0.989,"loudness_start":-24.640,"loudness_max_time":0.01932,"loudness_max":-11.055,"pitches":[0.084,0.056,0.039,0.141,0.040,0.076,0.076,0.293,1.000,0.120,0.084,0.078],"timbre":[44.417,-141.390,0.738,43.261,41.567,-36.175,20.926,4.723,8.150,14.786,-18.344,3.397]},{"start":297.31909,"duration":0.25429,"confidence":0.497,"loudness_start":-23.364,"loudness_max_time":0.02499,"loudness_max":-19.018,"pitches":[0.043,0.007,0.016,0.096,0.010,0.049,0.029,0.088,1.000,0.061,0.013,0.030],"timbre":[38.951,-118.402,-69.546,-31.887,25.743,-39.718,-20.786,10.841,10.471,-1.832,7.989,9.599]},{"start":297.57338,"duration":0.15814,"confidence":0.548,"loudness_start":-25.036,"loudness_max_time":0.06093,"loudness_max":-19.698,"pitches":[0.396,0.020,0.018,0.073,0.026,0.126,0.040,0.210,1.000,0.118,0.022,0.058],"timbre":[38.553,-113.113,-13.175,-51.449,32.293,-22.463,-23.461,-7.310,12.133,19.319,-7.618,-2.124]},{"start":297.73152,"duration":0.16889,"confidence":0.171,"loudness_start":-21.366,"loudness_max_time":0.06660,"loudness_max":-18.658,"pitches":[0.511,0.014,0.033,0.147,0.015,0.163,0.033,0.465,1.000,0.047,0.015,0.054],"timbre":[39.796,-130.341,1.898,-12.504,48.271,-47.665,-3.775,16.083,14.618,-1.934,-11.731,-4.713]},{"start":297.90041,"duration":0.41769,"confidence":0.585,"loudness_start":-22.887,"loudness_max_time":0.01095,"loudness_max":-16.072,"pitches":[0.172,0.055,0.039,0.082,0.043,1.000,0.048,0.057,0.308,0.071,0.526,0.099],"timbre":[40.042,-204.744,-44.737,2.421,61.953,-62.651,-46.594,-4.821,-10.339,-12.697,-10.122,6.562]},{"start":298.31810,"duration":0.40608,"confidence":1.000,"loudness_start":-24.337,"loudness_max_time":0.01964,"loudness_max":-8.440,"pitches":[1.000,0.157,0.102,0.180,0.057,0.193,0.058,0.354,0.585,0.064,0.354,0.100],"timbre":[46.078,-123.763,25.966,55.492,43.395,-44.564,10.302,-4.013,12.453,6.920,-6.674,-1.237]},{"start":298.72417,"duration":0.26558,"confidence":0.193,"loudness_start":-20.148,"loudness_max_time":0.02769,"loudness_max":-17.677,"pitches":[0.755,0.022,0.023,0.067,0.028,0.112,0.032,0.057,1.000,0.051,0.051,0.056],"timbre":[39.897,-200.082,-35.963,-7.281,72.843,-51.775,-14.922,7.731,-4.336,1.584,-5.546,-11.620]},{"start":298.98975,"duration":0.16544,"confidence":0.049,"loudness_start":-25.473,"loudness_max_time":0.04812,"loudness_max":-22.060,"pitches":[0.381,0.030,0.016,0.058,0.012,0.123,0.046,0.045,1.000,0.138,0.025,0.027],"timbre":[36.061,-179.216,-94.563,-49.399,60.751,-50.976,-16.393,25.936,-9.542,8.253,-8.394,-3.374]},{"start":299.15519,"duration":0.44163,"confidence":1.000,"loudness_start":-26.701,"loudness_max_time":0.02102,"loudness_max":-11.556,"pitches":[0.141,0.055,0.058,0.173,0.062,0.114,0.098,0.354,1.000,0.122,0.090,0.100],"timbre":[44.046,-135.253,19.490,52.507,45.701,-38.929,30.685,-2.313,8.453,18.038,-19.111,0.598]},{"start":299.59683,"duration":0.20735,"confidence":0.193,"loudness_start":-23.226,"loudness_max_time":0.03968,"loudness_max":-19.873,"pitches":[0.038,0.005,0.019,0.108,0.010,0.041,0.034,0.083,1.000,0.053,0.010,0.025],"timbre":[38.558,-116.312,-77.301,-45.177,23.782,-49.661,-23.680,14.191,11.856,10.276,5.877,9.398]},{"start":299.80417,"duration":0.17438,"confidence":0.451,"loudness_start":-24.942,"loudness_max_time":0.08732,"loudness_max":-20.080,"pitches":[0.394,0.031,0.086,0.185,0.046,0.250,0.081,0.323,1.000,0.198,0.041,0.036],"timbre":[37.322,-107.609,-9.963,-58.441,27.536,-27.905,-13.635,-15.226,3.047,5.999,-6.337,5.200]},{"start":299.97855,"duration":0.17964,"confidence":0.512,"loudness_start":-22.911,"loudness_max_time":0.08560,"loudness_max":-18.078,"pitches":[0.378,0.013,0.028,0.068,0.017,0.167,0.043,0.372,1.000,0.039,0.019,0.037],"timbre":[39.880,-129.606,9.936,-21.444,62.017,-25.099,5.837,11.147,4.048,2.483,-9.769,-7.233]},{"start":300.15819,"duration":0.39070,"confidence":0.436,"loudness_start":-22.502,"loudness_max_time":0.01599,"loudness_max":-15.953,"pitches":[0.172,0.045,0.042,0.069,0.046,1.000,0.045,0.046,0.180,0.068,0.463,0.112],"timbre":[39.545,-210.600,-48.430,11.734,65.752,-60.469,-38.930,-7.450,-23.055,-0.535,-4.380,1.556]},{"start":300.54889,"duration":0.42698,"confidence":1.000,"loudness_start":-25.382,"loudness_max_time":0.05336,"loudness_max":-8.364,"pitches":[1.000,0.120,0.097,0.155,0.076,0.260,0.067,0.466,0.407,0.069,0.308,0.105],"timbre":[42.867,-160.272,7.677,-63.790,57.770,54.745,21.827,16.630,12.135,-26.792,-21.297,-4.486]},{"start":300.97587,"duration":0.24426,"confidence":0.747,"loudness_start":-21.192,"loudness_max_time":0.03687,"loudness_max":-11.719,"pitches":[1.000,0.024,0.016,0.014,0.021,0.137,0.023,0.052,0.374,0.036,0.052,0.051],"timbre":[43.530,-158.988,22.637,6.338,45.213,5.368,-9.602,14.972,-3.687,-9.154,0.399,-7.481]},{"start":301.22014,"duration":0.19456,"confidence":0.210,"loudness_start":-21.508,"loudness_max_time":0.03726,"loudness_max":-17.760,"pitches":[1.000,0.034,0.017,0.024,0.038,0.221,0.088,0.065,0.649,0.104,0.033,0.144],"timbre":[39.810,-142.247,-20.939,1.122,38.806,-28.241,-19.163,5.531,-14.441,-4.874,-23.874,-7.995]},{"start":301.41469,"duration":0.43782,"confidence":0.939,"loudness_start":-24.137,"loudness_max_time":0.02476,"loudness_max":-11.677,"pitches":[0.237,0.064,0.041,0.060,0.064,0.209,0.093,0.295,1.000,0.180,0.093,0.117],"timbre":[43.302,-120.931,5.054,52.456,44.206,-12.167,20.180,7.704,7.986,12.375,-6.904,-3.076]},{"start":301.85252,"duration":0.22109,"confidence":0.132,"loudness_start":-23.934,"loudness_max_time":0.08329,"loudness_max":-20.127,"pitches":[0.117,0.009,0.011,0.046,0.026,0.183,0.056,0.083,1.000,0.070,0.015,0.035],"timbre":[38.516,-100.943,-58.445,-56.234,21.437,-46.990,-23.689,-1.862,7.191,2.752,2.001,10.366]},{"start":302.07361,"duration":0.19728,"confidence":0.571,"loudness_start":-24.335,"loudness_max_time":0.11862,"loudness_max":-17.968,"pitches":[1.000,0.034,0.018,0.059,0.043,0.260,0.043,0.096,0.306,0.079,0.028,0.122],"timbre":[38.840,-112.530,14.139,-60.908,41.701,-25.364,-19.751,-27.875,1.874,19.296,-11.051,2.779]},{"start":302.27088,"duration":0.13433,"confidence":0.098,"loudness_start":-21.196,"loudness_max_time":0.05839,"loudness_max":-18.324,"pitches":[1.000,0.044,0.045,0.104,0.127,0.989,0.132,0.392,0.339,0.051,0.015,0.092],"timbre":[40.108,-139.679,-2.546,-14.463,67.386,-46.927,-20.333,18.691,12.348,-4.730,-8.005,-2.991]},{"start":302.40522,"duration":0.44122,"confidence":0.513,"loudness_start":-22.308,"loudness_max_time":0.03354,"loudness_max":-16.141,"pitches":[0.272,0.068,0.046,0.035,0.050,1.000,0.059,0.039,0.047,0.076,0.549,0.106],"timbre":[39.564,-180.080,-42.643,-0.254,61.803,-23.173,-40.037,-4.187,-18.688,20.433,-7.698,-0.689]},{"start":302.84644,"duration":0.39478,"confidence":1.000,"loudness_start":-24.811,"loudness_max_time":0.01934,"loudness_max":-7.814,"pitches":[1.000,0.131,0.062,0.069,0.049,0.357,0.063,0.359,0.116,0.052,0.400,0.125],"timbre":[46.662,-118.042,33.136,54.516,45.695,-41.681,10.419,-13.824,15.002,0.908,-1.205,-3.008]},{"start":303.24122,"duration":0.32467,"confidence":0.162,"loudness_start":-20.625,"loudness_max_time":0.05027,"loudness_max":-17.833,"pitches":[1.000,0.015,0.015,0.018,0.034,0.235,0.035,0.044,0.409,0.055,0.065,0.066],"timbre":[39.306,-192.116,-31.031,1.309,77.229,-43.849,-19.957,24.014,-7.321,7.741,-17.177,-8.222]},{"start":303.56590,"duration":0.11406,"confidence":0.149,"loudness_start":-25.582,"loudness_max_time":0.01721,"loudness_max":-23.466,"pitches":[0.514,0.067,0.011,0.019,0.042,0.286,0.072,0.237,1.000,0.267,0.014,0.073],"timbre":[35.467,-176.207,-83.763,-52.727,66.159,-63.398,-13.554,12.300,-6.630,12.165,-4.849,-1.181]},{"start":303.67995,"duration":0.43125,"confidence":0.976,"loudness_start":-25.955,"loudness_max_time":0.02399,"loudness_max":-11.980,"pitches":[0.211,0.057,0.054,0.061,0.074,0.209,0.083,0.323,1.000,0.109,0.090,0.106],"timbre":[43.129,-122.708,10.798,57.531,44.038,-36.005,11.726,11.103,8.802,14.688,-23.320,-0.139]},{"start":304.11120,"duration":0.28503,"confidence":0.426,"loudness_start":-24.887,"loudness_max_time":0.08850,"loudness_max":-20.381,"pitches":[0.224,0.014,0.019,0.039,0.033,0.207,0.039,0.112,1.000,0.048,0.021,0.068],"timbre":[37.980,-92.336,-58.269,-49.114,19.335,-32.882,-23.039,-5.287,5.052,4.241,10.056,10.052]},{"start":304.39624,"duration":0.11651,"confidence":0.390,"loudness_start":-24.724,"loudness_max_time":0.05431,"loudness_max":-20.730,"pitches":[1.000,0.036,0.049,0.118,0.107,0.470,0.185,0.427,0.578,0.140,0.024,0.147],"timbre":[38.343,-115.426,7.941,-35.333,65.440,-32.064,-30.497,-11.167,11.027,15.878,-2.748,-9.861]},{"start":304.51274,"duration":0.17927,"confidence":0.179,"loudness_start":-21.985,"loudness_max_time":0.05306,"loudness_max":-19.219,"pitches":[1.000,0.035,0.080,0.174,0.038,0.311,0.070,0.585,0.346,0.053,0.034,0.181],"timbre":[38.840,-118.964,16.116,-2.471,77.713,-35.286,-26.198,21.726,10.040,-4.200,-1.929,-10.861]},{"start":304.69202,"duration":0.41941,"confidence":0.673,"loudness_start":-23.982,"loudness_max_time":0.01229,"loudness_max":-15.861,"pitches":[0.247,0.058,0.043,0.039,0.047,1.000,0.045,0.038,0.064,0.058,0.556,0.116],"timbre":[39.441,-207.102,-48.442,9.398,62.952,-69.926,-47.279,-8.891,-15.464,-9.253,-8.074,5.057]},{"start":305.11143,"duration":0.53506,"confidence":1.000,"loudness_start":-26.343,"loudness_max_time":0.02095,"loudness_max":-8.728,"pitches":[1.000,0.070,0.052,0.030,0.042,0.274,0.031,0.186,0.073,0.034,0.129,0.079],"timbre":[45.801,-125.439,20.665,63.408,53.178,-32.478,6.604,-13.944,13.077,2.681,-11.599,-1.897]},{"start":305.64649,"duration":0.14227,"confidence":0.228,"loudness_start":-24.834,"loudness_max_time":0.03447,"loudness_max":-20.606,"pitches":[1.000,0.049,0.027,0.028,0.020,0.251,0.080,0.112,0.435,0.065,0.050,0.178],"timbre":[37.174,-192.318,-40.824,-26.190,92.426,-48.352,-10.638,24.754,-11.978,-1.935,-4.872,-16.404]},{"start":305.78875,"duration":0.15551,"confidence":0.152,"loudness_start":-25.796,"loudness_max_time":0.03478,"loudness_max":-22.469,"pitches":[0.950,0.060,0.022,0.039,0.060,0.549,0.110,0.104,1.000,0.187,0.029,0.155],"timbre":[35.847,-162.965,-76.641,-35.472,57.616,-53.816,-22.981,14.708,-12.203,0.038,-0.825,-7.909]},{"start":305.94426,"duration":0.44127,"confidence":1.000,"loudness_start":-26.174,"loudness_max_time":0.02342,"loudness_max":-11.356,"pitches":[0.340,0.074,0.043,0.058,0.061,0.217,0.094,0.321,1.000,0.142,0.110,0.118],"timbre":[43.312,-133.002,-4.119,61.201,46.493,-33.174,4.700,17.009,9.553,16.223,-21.523,-0.154]},{"start":306.38553,"duration":0.27483,"confidence":0.382,"loudness_start":-25.599,"loudness_max_time":0.14469,"loudness_max":-21.081,"pitches":[0.241,0.015,0.013,0.064,0.042,0.248,0.051,0.089,1.000,0.070,0.018,0.089],"timbre":[37.488,-97.733,-44.950,-59.897,19.174,-44.114,-19.741,-1.472,8.817,-1.168,7.341,9.014]},{"start":306.66036,"duration":0.11605,"confidence":0.250,"loudness_start":-23.782,"loudness_max_time":0.03075,"loudness_max":-20.643,"pitches":[1.000,0.056,0.091,0.148,0.087,0.671,0.246,0.438,0.556,0.151,0.027,0.139],"timbre":[38.325,-104.238,9.495,-26.530,59.181,-35.122,-43.637,1.108,22.737,-3.579,-0.178,-10.641]},{"start":306.77642,"duration":0.17986,"confidence":0.389,"loudness_start":-22.673,"loudness_max_time":0.07932,"loudness_max":-18.828,"pitches":[1.000,0.018,0.057,0.135,0.026,0.269,0.065,0.526,0.364,0.036,0.029,0.136],"timbre":[39.559,-114.451,19.787,-6.289,76.184,-31.000,-25.522,18.431,9.882,2.511,-7.255,-14.570]},{"start":306.95628,"duration":0.42354,"confidence":0.596,"loudness_start":-24.057,"loudness_max_time":0.01107,"loudness_max":-15.743,"pitches":[0.291,0.057,0.031,0.027,0.046,1.000,0.044,0.032,0.036,0.057,0.476,0.092],"timbre":[39.981,-201.513,-46.151,3.606,57.486,-62.052,-52.134,-7.191,-11.354,-4.791,-14.083,4.129]},{"start":307.37982,"duration":0.40113,"confidence":1.000,"loudness_start":-24.921,"loudness_max_time":0.01413,"loudness_max":-8.435,"pitches":[1.000,0.206,0.120,0.065,0.093,0.472,0.077,0.620,0.136,0.070,0.358,0.116],"timbre":[46.245,-116.594,53.184,57.965,56.422,-62.598,15.565,-15.423,14.058,4.926,-18.180,-1.951]},{"start":307.78095,"duration":0.28875,"confidence":0.136,"loudness_start":-20.312,"loudness_max_time":0.03014,"loudness_max":-17.432,"pitches":[1.000,0.037,0.030,0.048,0.060,0.500,0.059,0.059,0.705,0.077,0.108,0.084],"timbre":[39.336,-184.233,-30.416,7.614,78.159,-52.630,-24.632,27.357,-1.451,-1.393,-4.358,-15.018]},{"start":308.06971,"duration":0.13392,"confidence":0.269,"loudness_start":-25.598,"loudness_max_time":0.01905,"loudness_max":-22.713,"pitches":[0.487,0.062,0.015,0.020,0.063,0.374,0.091,0.151,1.000,0.204,0.055,0.056],"timbre":[36.032,-186.643,-71.484,-41.840,82.828,-54.752,-8.880,24.268,-6.150,-2.207,-6.014,-7.157]},{"start":308.20363,"duration":0.15107,"confidence":0.981,"loudness_start":-26.112,"loudness_max_time":0.02662,"loudness_max":-11.601,"pitches":[0.198,0.021,0.017,0.018,0.031,0.257,0.072,1.000,0.475,0.038,0.051,0.093],"timbre":[44.356,-111.656,59.169,21.347,60.658,-16.594,45.418,0.440,20.796,16.573,35.464,-15.171]},{"start":308.35469,"duration":0.23746,"confidence":0.137,"loudness_start":-17.492,"loudness_max_time":0.02420,"loudness_max":-13.484,"pitches":[0.173,0.020,0.016,0.051,0.051,0.113,0.044,0.151,1.000,0.071,0.035,0.053],"timbre":[41.930,-137.466,-16.869,44.545,29.204,-68.722,-6.022,13.156,3.806,24.484,-4.731,3.403]},{"start":308.59215,"duration":0.33215,"confidence":0.435,"loudness_start":-25.725,"loudness_max_time":0.20045,"loudness_max":-19.697,"pitches":[0.175,0.011,0.019,0.039,0.023,0.211,0.058,0.113,1.000,0.058,0.023,0.043],"timbre":[37.153,-130.787,-39.046,-78.512,54.535,-36.378,-10.842,19.232,9.972,-11.034,4.335,2.243]},{"start":308.92431,"duration":0.12785,"confidence":0.445,"loudness_start":-24.613,"loudness_max_time":0.02782,"loudness_max":-19.810,"pitches":[1.000,0.025,0.037,0.076,0.029,0.144,0.122,0.300,0.360,0.079,0.022,0.103],"timbre":[38.602,-119.701,17.289,-14.096,83.109,-31.968,-39.996,-1.838,14.966,7.363,-2.252,-11.510]},{"start":309.05215,"duration":0.15515,"confidence":0.238,"loudness_start":-23.844,"loudness_max_time":0.03050,"loudness_max":-19.853,"pitches":[0.767,0.042,0.130,0.257,0.093,1.000,0.146,0.817,0.384,0.054,0.043,0.063],"timbre":[38.505,-110.347,43.189,3.237,80.532,-36.422,-25.684,15.444,10.682,-7.589,-3.315,0.126]},{"start":309.20730,"duration":0.42349,"confidence":0.679,"loudness_start":-24.868,"loudness_max_time":0.02478,"loudness_max":-15.547,"pitches":[0.199,0.041,0.026,0.029,0.042,1.000,0.045,0.027,0.053,0.059,0.424,0.101],"timbre":[39.175,-202.228,-48.686,21.603,67.300,-29.326,-37.075,-12.861,-26.335,17.045,4.964,-1.803]},{"start":309.63079,"duration":0.14621,"confidence":1.000,"loudness_start":-27.147,"loudness_max_time":0.03002,"loudness_max":-8.731,"pitches":[1.000,0.082,0.050,0.024,0.060,0.296,0.063,0.824,0.193,0.083,0.580,0.192],"timbre":[46.947,-128.644,34.438,17.680,50.335,-2.332,31.619,-4.467,16.359,8.987,46.786,-4.930]},{"start":309.77701,"duration":0.20957,"confidence":0.365,"loudness_start":-16.017,"loudness_max_time":0.00848,"loudness_max":-9.251,"pitches":[1.000,0.073,0.043,0.026,0.052,0.380,0.032,0.431,0.096,0.041,0.221,0.072],"timbre":[47.670,-106.492,60.197,30.463,26.832,-48.983,1.806,-10.852,5.947,1.819,-19.487,-1.689]},{"start":309.98658,"duration":0.49383,"confidence":0.504,"loudness_start":-17.221,"loudness_max_time":0.09556,"loudness_max":-11.273,"pitches":[1.000,0.021,0.009,0.009,0.013,0.121,0.010,0.037,0.029,0.012,0.037,0.017],"timbre":[46.889,-55.796,45.806,-11.914,7.758,-18.582,-44.092,19.003,3.212,-9.095,-1.886,-24.539]},{"start":310.48041,"duration":0.64844,"confidence":0.714,"loudness_start":-21.623,"loudness_max_time":0.01379,"loudness_max":-11.022,"pitches":[0.264,0.015,0.016,0.023,0.034,0.256,0.032,1.000,0.112,0.022,0.033,0.033],"timbre":[41.376,-67.783,75.604,144.534,82.747,-55.655,-0.728,46.389,18.676,-1.012,-48.751,-7.359]},{"start":311.12884,"duration":0.18707,"confidence":0.853,"loudness_start":-36.064,"loudness_max_time":0.09424,"loudness_max":-26.286,"pitches":[1.000,0.059,0.017,0.027,0.043,0.295,0.022,0.030,0.034,0.027,0.036,0.032],"timbre":[29.209,-68.378,50.182,-76.331,121.630,-6.451,-27.501,-31.152,-24.383,22.215,-14.326,0.187]},{"start":311.31592,"duration":0.82989,"confidence":0.603,"loudness_start":-29.016,"loudness_max_time":0.01984,"loudness_max":-22.921,"pitches":[0.314,0.028,0.016,0.021,0.042,0.188,0.053,1.000,0.061,0.029,0.042,0.034],"timbre":[28.830,-14.007,71.123,174.078,136.794,-57.420,-42.623,112.571,17.391,-15.000,-41.922,-13.658]},{"start":312.14580,"duration":0.15093,"confidence":0.958,"loudness_start":-53.065,"loudness_max_time":0.08805,"loudness_max":-40.130,"pitches":[0.024,0.024,0.018,0.022,0.027,0.032,0.031,1.000,0.049,0.040,0.181,0.056],"timbre":[18.383,87.741,109.571,15.896,156.512,-39.622,40.319,-0.541,26.307,39.280,-12.873,-13.946]},{"start":312.29673,"duration":1.97460,"confidence":0.124,"loudness_start":-42.735,"loudness_max_time":0.06823,"loudness_max":-39.963,"loudness_end":-60.000,"pitches":[1.000,0.155,0.127,0.134,0.144,0.142,0.141,0.210,0.152,0.155,0.229,0.230],"timbre":[12.371,105.449,-37.711,113.941,84.834,-59.445,-25.556,80.771,24.394,-25.655,-31.143,4.221]}]};exports.default=audioData;

/***/ },
/* 168 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = fft;
	function fft(id) {

	  var audio = document.getElementById('track');
	  var audioContext = new AudioContext();
	  var source = audioContext.createMediaElementSource(audio);
	  var analyser = audioContext.createAnalyser();

	  source.connect(analyser);
	  analyser.connect(audioContext.destination);

	  analyser.fftSize = 256;

	  // var bufferLength = analyser.frequencyBinCount
	  // var dataArray = new Uint8Array(analyser.frequencyBinCount)

	  // frequencyBinCount tells you how many values you'll receive from the analyser
	  //var frequencyData = new Uint8Array(analyser.frequencyBinCount)

	  // function renderFrame() {
	  //    requestAnimationFrame(renderFrame);
	  //    // update data in frequencyData
	  //    analyser.getByteFrequencyData(frequencyData);
	  //    // render frame based on values in frequencyData
	  // }

	  //audio.play()

	  return { analyser: analyser, audio: audio };
	}

/***/ },
/* 169 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.ShaderPass = function (shader, textureID) {

		this.textureID = textureID !== undefined ? textureID : "tDiffuse";

		this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);

		this.material = new THREE.ShaderMaterial({

			defines: shader.defines || {},
			uniforms: this.uniforms,
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader

		});

		this.renderToScreen = false;

		this.enabled = true;
		this.needsSwap = true;
		this.clear = false;

		this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
		this.scene = new THREE.Scene();

		this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
		this.scene.add(this.quad);
	};

	THREE.ShaderPass.prototype = {

		render: function render(renderer, writeBuffer, readBuffer, delta) {

			if (this.uniforms[this.textureID]) {

				this.uniforms[this.textureID].value = readBuffer;
			}

			this.quad.material = this.material;

			if (this.renderToScreen) {

				renderer.render(this.scene, this.camera);
			} else {

				renderer.render(this.scene, this.camera, writeBuffer, this.clear);
			}
		}

	};

/***/ },
/* 170 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]
	 * - based on Nvidia example
	 * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass
	 */

	THREE.BleachBypassShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"opacity": { type: "f", value: 1.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 base = texture2D( tDiffuse, vUv );", "vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );", "float lum = dot( lumCoeff, base.rgb );", "vec3 blend = vec3( lum );", "float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );", "vec3 result1 = 2.0 * base.rgb * blend;", "vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );", "vec3 newColor = mix( result1, result2, L );", "float A2 = opacity * base.a;", "vec3 mixRGB = A2 * newColor.rgb;", "mixRGB += ( ( 1.0 - A2 ) * base.rgb );", "gl_FragColor = vec4( mixRGB, base.a );", "}"].join("\n")

	};

/***/ },
/* 171 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Blend two textures
	 */

	THREE.BlendShader = {

		uniforms: {

			"tDiffuse1": { type: "t", value: null },
			"tDiffuse2": { type: "t", value: null },
			"mixRatio": { type: "f", value: 0.5 },
			"opacity": { type: "f", value: 1.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform float opacity;", "uniform float mixRatio;", "uniform sampler2D tDiffuse1;", "uniform sampler2D tDiffuse2;", "varying vec2 vUv;", "void main() {", "vec4 texel1 = texture2D( tDiffuse1, vUv );", "vec4 texel2 = texture2D( tDiffuse2, vUv );", "gl_FragColor = opacity * mix( texel1, texel2, mixRatio );", "}"].join("\n")

	};

/***/ },
/* 172 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author davidedc / http://www.sketchpatch.net/
	 *
	 * NVIDIA FXAA by Timothy Lottes
	 * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html
	 * - WebGL port by @supereggbert
	 * http://www.glge.org/demos/fxaa/
	 */

	THREE.FXAAShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"resolution": { type: "v2", value: new THREE.Vector2(1 / 1024, 1 / 512) }

		},

		vertexShader: ["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec2 resolution;", "#define FXAA_REDUCE_MIN   (1.0/128.0)", "#define FXAA_REDUCE_MUL   (1.0/8.0)", "#define FXAA_SPAN_MAX     8.0", "void main() {", "vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;", "vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;", "vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;", "vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;", "vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );", "vec3 rgbM  = rgbaM.xyz;", "vec3 luma = vec3( 0.299, 0.587, 0.114 );", "float lumaNW = dot( rgbNW, luma );", "float lumaNE = dot( rgbNE, luma );", "float lumaSW = dot( rgbSW, luma );", "float lumaSE = dot( rgbSE, luma );", "float lumaM  = dot( rgbM,  luma );", "float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );", "float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );", "vec2 dir;", "dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));", "dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));", "float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );", "float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );", "dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),", "max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),", "dir * rcpDirMin)) * resolution;", "vec4 rgbA = (1.0/2.0) * (", "texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +", "texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));", "vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (", "texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +", "texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));", "float lumaB = dot(rgbB, vec4(luma, 0.0));", "if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {", "gl_FragColor = rgbA;", "} else {", "gl_FragColor = rgbB;", "}", "}"].join("\n")

	};

/***/ },
/* 173 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Full-screen textured quad shader
	 */

	THREE.CopyShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"opacity": { type: "f", value: 1.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n")

	};

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 * - "r" parameter control where "focused" horizontal line lies
	 */

	THREE.HorizontalTiltShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"h": { type: "f", value: 1.0 / 512.0 },
			"r": { type: "f", value: 0.35 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float h;", "uniform float r;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float hh = h * abs( r - vUv.y );", "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")

	};

/***/ },
/* 175 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
	 *
	 * - 9 samples per pass
	 * - standard deviation 2.7
	 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 * - "r" parameter control where "focused" horizontal line lies
	 */

	THREE.VerticalTiltShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"v": { type: "f", value: 1.0 / 512.0 },
			"r": { type: "f", value: 0.35 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float v;", "uniform float r;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float vv = v * abs( r - vUv.y );", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n")

	};

/***/ },
/* 176 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Triangle blur shader
	 * based on glfx.js triangle blur shader
	 * https://github.com/evanw/glfx.js
	 *
	 * A basic blur filter, which convolves the image with a
	 * pyramid filter. The pyramid filter is separable and is applied as two
	 * perpendicular triangle filters.
	 */

	THREE.TriangleBlurShader = {

		uniforms: {

			"texture": { type: "t", value: null },
			"delta": { type: "v2", value: new THREE.Vector2(1, 1) }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["#define ITERATIONS 10.0", "uniform sampler2D texture;", "uniform vec2 delta;", "varying vec2 vUv;", "float random( vec3 scale, float seed ) {",

		// use the fragment position for a different seed per-pixel

		"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );", "}", "void main() {", "vec4 color = vec4( 0.0 );", "float total = 0.0;",

		// randomize the lookup values to hide the fixed number of samples

		"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );", "for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {", "float percent = ( t + offset - 0.5 ) / ITERATIONS;", "float weight = 1.0 - abs( percent );", "color += texture2D( texture, vUv + delta * percent ) * weight;", "total += weight;", "}", "gl_FragColor = color / total;", "}"].join("\n")

	};

/***/ },
/* 177 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Vignette shader
	 * based on PaintEffect postprocess from ro.me
	 * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
	 */

	THREE.VignetteShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"offset": { type: "f", value: 1.0 },
			"darkness": { type: "f", value: 1.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform float offset;", "uniform float darkness;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {",

		// Eskil's vignette

		"vec4 texel = texture2D( tDiffuse, vUv );", "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );", "gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );",

		/*
	 // alternative version from glfx.js
	 // this one makes more "dusty" look (as opposed to "burned")
	 	"vec4 color = texture2D( tDiffuse, vUv );",
	 "float dist = distance( vUv, vec2( 0.5 ) );",
	 "color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );",
	 "gl_FragColor = color;",
	 */

		"}"].join("\n")

	};

/***/ },
/* 178 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Convolution shader
	 * ported from o3d sample to WebGL / GLSL
	 * http://o3d.googlecode.com/svn/trunk/samples/convolution.html
	 */

	THREE.ConvolutionShader = {

	  defines: {

	    "KERNEL_SIZE_FLOAT": "25.0",
	    "KERNEL_SIZE_INT": "25"

	  },

	  uniforms: {

	    "tDiffuse": { type: "t", value: null },
	    "uImageIncrement": { type: "v2", value: new THREE.Vector2(0.001953125, 0.0) },
	    "cKernel": { type: "fv1", value: [] }

	  },

	  vertexShader: ["uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

	  fragmentShader: ["uniform float cKernel[ KERNEL_SIZE_INT ];", "uniform sampler2D tDiffuse;", "uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vec2 imageCoord = vUv;", "vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );", "for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {", "sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];", "imageCoord += uImageIncrement;", "}", "gl_FragColor = sum;", "}"].join("\n"),

	  buildKernel: function buildKernel(sigma) {

	    // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.

	    function gauss(x, sigma) {

	      return Math.exp(-(x * x) / (2.0 * sigma * sigma));
	    }

	    var i,
	        values,
	        sum,
	        halfWidth,
	        kMaxKernelSize = 25,
	        kernelSize = 2 * Math.ceil(sigma * 3.0) + 1;

	    if (kernelSize > kMaxKernelSize) kernelSize = kMaxKernelSize;
	    halfWidth = (kernelSize - 1) * 0.5;

	    values = new Array(kernelSize);
	    sum = 0.0;
	    for (i = 0; i < kernelSize; ++i) {

	      values[i] = gauss(i - halfWidth, sigma);
	      sum += values[i];
	    }

	    // normalize the kernel

	    for (i = 0; i < kernelSize; ++i) {
	      values[i] /= sum;
	    }return values;
	  }

	};

/***/ },
/* 179 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Dot screen shader
	 * based on glfx.js sepia shader
	 * https://github.com/evanw/glfx.js
	 */

	THREE.DotScreenShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"tSize": { type: "v2", value: new THREE.Vector2(256, 256) },
			"center": { type: "v2", value: new THREE.Vector2(0.5, 0.5) },
			"angle": { type: "f", value: 1.57 },
			"scale": { type: "f", value: 1.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform vec2 center;", "uniform float angle;", "uniform float scale;", "uniform vec2 tSize;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "float pattern() {", "float s = sin( angle ), c = cos( angle );", "vec2 tex = vUv * tSize - center;", "vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;", "return ( sin( point.x ) * sin( point.y ) ) * 4.0;", "}", "void main() {", "vec4 color = texture2D( tDiffuse, vUv );", "float average = ( color.r + color.g + color.b ) / 3.0;", "gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );", "}"].join("\n")

	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author felixturner / http://airtight.cc/
	 *
	 * RGB Shift Shader
	 * Shifts red and blue channels from center in opposite directions
	 * Ported from http://kriss.cx/tom/2009/05/rgb-shift/
	 * by Tom Butterworth / http://kriss.cx/tom/
	 *
	 * amount: shift distance (1 is width of input)
	 * angle: shift angle in radians
	 */

	THREE.RGBShiftShader = {

		uniforms: {

			"tDiffuse": { type: "t", value: null },
			"amount": { type: "f", value: 0.005 },
			"angle": { type: "f", value: 0.0 }

		},

		vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

		fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float amount;", "uniform float angle;", "varying vec2 vUv;", "void main() {", "vec2 offset = amount * vec2( cos(angle), sin(angle));", "vec4 cr = texture2D(tDiffuse, vUv + offset);", "vec4 cga = texture2D(tDiffuse, vUv);", "vec4 cb = texture2D(tDiffuse, vUv - offset);", "gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);", "}"].join("\n")

	};

/***/ },
/* 181 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.EffectComposer = function (renderer, renderTarget) {

		this.renderer = renderer;

		if (renderTarget === undefined) {

			var pixelRatio = renderer.getPixelRatio();

			var width = Math.floor(renderer.context.canvas.width / pixelRatio) || 1;
			var height = Math.floor(renderer.context.canvas.height / pixelRatio) || 1;
			var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };

			renderTarget = new THREE.WebGLRenderTarget(width, height, parameters);
		}

		this.renderTarget1 = renderTarget;
		this.renderTarget2 = renderTarget.clone();

		this.writeBuffer = this.renderTarget1;
		this.readBuffer = this.renderTarget2;

		this.passes = [];

		if (THREE.CopyShader === undefined) console.error("THREE.EffectComposer relies on THREE.CopyShader");

		this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
	};

	THREE.EffectComposer.prototype = {

		swapBuffers: function swapBuffers() {

			var tmp = this.readBuffer;
			this.readBuffer = this.writeBuffer;
			this.writeBuffer = tmp;
		},

		addPass: function addPass(pass) {

			this.passes.push(pass);
		},

		insertPass: function insertPass(pass, index) {

			this.passes.splice(index, 0, pass);
		},

		render: function render(delta) {

			this.writeBuffer = this.renderTarget1;
			this.readBuffer = this.renderTarget2;

			var maskActive = false;

			var pass,
			    i,
			    il = this.passes.length;

			for (i = 0; i < il; i++) {

				pass = this.passes[i];

				if (!pass.enabled) continue;

				pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);

				if (pass.needsSwap) {

					if (maskActive) {

						var context = this.renderer.context;

						context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);

						this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);

						context.stencilFunc(context.EQUAL, 1, 0xffffffff);
					}

					this.swapBuffers();
				}

				if (pass instanceof THREE.MaskPass) {

					maskActive = true;
				} else if (pass instanceof THREE.ClearMaskPass) {

					maskActive = false;
				}
			}
		},

		reset: function reset(renderTarget) {

			if (renderTarget === undefined) {

				renderTarget = this.renderTarget1.clone();

				var pixelRatio = this.renderer.getPixelRatio();

				renderTarget.width = Math.floor(this.renderer.context.canvas.width / pixelRatio);
				renderTarget.height = Math.floor(this.renderer.context.canvas.height / pixelRatio);
			}

			this.renderTarget1 = renderTarget;
			this.renderTarget2 = renderTarget.clone();

			this.writeBuffer = this.renderTarget1;
			this.readBuffer = this.renderTarget2;
		},

		setSize: function setSize(width, height) {

			var renderTarget = this.renderTarget1.clone();

			renderTarget.width = width;
			renderTarget.height = height;

			this.reset(renderTarget);
		}

	};

/***/ },
/* 182 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {

		this.scene = scene;
		this.camera = camera;

		this.overrideMaterial = overrideMaterial;

		this.clearColor = clearColor;
		this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 1;

		this.oldClearColor = new THREE.Color();
		this.oldClearAlpha = 1;

		this.enabled = true;
		this.clear = true;
		this.needsSwap = false;
	};

	THREE.RenderPass.prototype = {

		render: function render(renderer, writeBuffer, readBuffer, delta) {

			this.scene.overrideMaterial = this.overrideMaterial;

			if (this.clearColor) {

				this.oldClearColor.copy(renderer.getClearColor());
				this.oldClearAlpha = renderer.getClearAlpha();

				renderer.setClearColor(this.clearColor, this.clearAlpha);
			}

			renderer.render(this.scene, this.camera, readBuffer, this.clear);

			if (this.clearColor) {

				renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
			}

			this.scene.overrideMaterial = null;
		}

	};

/***/ },
/* 183 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.BloomPass = function (strength, kernelSize, sigma, resolution) {

	  strength = strength !== undefined ? strength : 1;
	  kernelSize = kernelSize !== undefined ? kernelSize : 25;
	  sigma = sigma !== undefined ? sigma : 4.0;
	  resolution = resolution !== undefined ? resolution : 256;

	  // render targets

	  var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };

	  this.renderTargetX = new THREE.WebGLRenderTarget(resolution, resolution, pars);
	  this.renderTargetY = new THREE.WebGLRenderTarget(resolution, resolution, pars);

	  // copy material

	  if (THREE.CopyShader === undefined) console.error("THREE.BloomPass relies on THREE.CopyShader");

	  var copyShader = THREE.CopyShader;

	  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);

	  this.copyUniforms["opacity"].value = strength;

	  this.materialCopy = new THREE.ShaderMaterial({

	    uniforms: this.copyUniforms,
	    vertexShader: copyShader.vertexShader,
	    fragmentShader: copyShader.fragmentShader,
	    blending: THREE.AdditiveBlending,
	    transparent: true

	  });

	  // convolution material

	  if (THREE.ConvolutionShader === undefined) console.error("THREE.BloomPass relies on THREE.ConvolutionShader");

	  var convolutionShader = THREE.ConvolutionShader;

	  this.convolutionUniforms = THREE.UniformsUtils.clone(convolutionShader.uniforms);

	  this.convolutionUniforms["uImageIncrement"].value = THREE.BloomPass.blurX;
	  this.convolutionUniforms["cKernel"].value = THREE.ConvolutionShader.buildKernel(sigma);

	  this.materialConvolution = new THREE.ShaderMaterial({

	    uniforms: this.convolutionUniforms,
	    vertexShader: convolutionShader.vertexShader,
	    fragmentShader: convolutionShader.fragmentShader,
	    defines: {
	      "KERNEL_SIZE_FLOAT": kernelSize.toFixed(1),
	      "KERNEL_SIZE_INT": kernelSize.toFixed(0)
	    }

	  });

	  this.enabled = true;
	  this.needsSwap = false;
	  this.clear = false;

	  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
	  this.scene = new THREE.Scene();

	  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
	  this.scene.add(this.quad);
	};

	THREE.BloomPass.prototype = {

	  render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {

	    if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);

	    // Render quad with blured scene into texture (convolution pass 1)

	    this.quad.material = this.materialConvolution;

	    this.convolutionUniforms["tDiffuse"].value = readBuffer;
	    this.convolutionUniforms["uImageIncrement"].value = THREE.BloomPass.blurX;

	    renderer.render(this.scene, this.camera, this.renderTargetX, true);

	    // Render quad with blured scene into texture (convolution pass 2)

	    this.convolutionUniforms["tDiffuse"].value = this.renderTargetX;
	    this.convolutionUniforms["uImageIncrement"].value = THREE.BloomPass.blurY;

	    renderer.render(this.scene, this.camera, this.renderTargetY, true);

	    // Render original scene with superimposed blur to texture

	    this.quad.material = this.materialCopy;

	    this.copyUniforms["tDiffuse"].value = this.renderTargetY;

	    if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);

	    renderer.render(this.scene, this.camera, readBuffer, this.clear);
	  }

	};

	THREE.BloomPass.blurX = new THREE.Vector2(0.001953125, 0.0);
	THREE.BloomPass.blurY = new THREE.Vector2(0.0, 0.001953125);

/***/ },
/* 184 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	THREE.MaskPass = function (scene, camera) {

		this.scene = scene;
		this.camera = camera;

		this.enabled = true;
		this.clear = true;
		this.needsSwap = false;

		this.inverse = false;
	};

	THREE.MaskPass.prototype = {

		render: function render(renderer, writeBuffer, readBuffer, delta) {

			var context = renderer.context;

			// don't update color or depth

			context.colorMask(false, false, false, false);
			context.depthMask(false);

			// set up stencil

			var writeValue, clearValue;

			if (this.inverse) {

				writeValue = 0;
				clearValue = 1;
			} else {

				writeValue = 1;
				clearValue = 0;
			}

			context.enable(context.STENCIL_TEST);
			context.stencilOp(context.REPLACE, context.REPLACE, context.REPLACE);
			context.stencilFunc(context.ALWAYS, writeValue, 0xffffffff);
			context.clearStencil(clearValue);

			// draw into the stencil buffer

			renderer.render(this.scene, this.camera, readBuffer, this.clear);
			renderer.render(this.scene, this.camera, writeBuffer, this.clear);

			// re-enable update of color and depth

			context.colorMask(true, true, true, true);
			context.depthMask(true);

			// only render where stencil is set to 1

			context.stencilFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1
			context.stencilOp(context.KEEP, context.KEEP, context.KEEP);
		}

	};

	THREE.ClearMaskPass = function () {

		this.enabled = true;
	};

	THREE.ClearMaskPass.prototype = {

		render: function render(renderer, writeBuffer, readBuffer, delta) {

			var context = renderer.context;

			context.disable(context.STENCIL_TEST);
		}

	};

/***/ },
/* 185 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @authod mrdoob / http://mrdoob.com/
	 * @authod arodic / http://aleksandarrodic.com/
	 * @authod fonserbc / http://fonserbc.github.io/
	*/

	THREE.StereoEffect = function (renderer) {

	  var _stereo = new THREE.StereoCamera();
	  _stereo.aspect = 0.5;

	  this.setSize = function (width, height) {

	    renderer.setSize(width, height);
	  };

	  this.render = function (scene, camera) {

	    scene.updateMatrixWorld();

	    if (camera.parent === null) camera.updateMatrixWorld();

	    _stereo.update(camera);

	    var size = renderer.getSize();

	    renderer.setScissorTest(true);
	    renderer.clear();

	    renderer.setScissor(0, 0, size.width / 2, size.height);
	    renderer.setViewport(0, 0, size.width / 2, size.height);
	    renderer.render(scene, _stereo.cameraL);

	    renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);
	    renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);
	    renderer.render(scene, _stereo.cameraR);

	    renderer.setScissorTest(false);
	  };
	};

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 */

	// This set of controls performs orbiting, dollying (zooming), and panning.
	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
	//
	//    Orbit - left mouse / touch: one finger move
	//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
	//    Pan - right mouse, or arrow keys / touch: three finter swipe

	THREE.OrbitControls = function (object, domElement) {

	  this.object = object;

	  this.domElement = domElement !== undefined ? domElement : document;

	  // Set to false to disable this control
	  this.enabled = true;

	  // "target" sets the location of focus, where the object orbits around
	  this.target = new THREE.Vector3();

	  // How far you can dolly in and out ( PerspectiveCamera only )
	  this.minDistance = 0;
	  this.maxDistance = Infinity;

	  // How far you can zoom in and out ( OrthographicCamera only )
	  this.minZoom = 0;
	  this.maxZoom = Infinity;

	  // How far you can orbit vertically, upper and lower limits.
	  // Range is 0 to Math.PI radians.
	  this.minPolarAngle = 0; // radians
	  this.maxPolarAngle = Math.PI; // radians

	  // How far you can orbit horizontally, upper and lower limits.
	  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
	  this.minAzimuthAngle = -Infinity; // radians
	  this.maxAzimuthAngle = Infinity; // radians

	  // Set to true to enable damping (inertia)
	  // If damping is enabled, you must call controls.update() in your animation loop
	  this.enableDamping = false;
	  this.dampingFactor = 0.25;

	  // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
	  // Set to false to disable zooming
	  this.enableZoom = true;
	  this.zoomSpeed = 1.0;

	  // Set to false to disable rotating
	  this.enableRotate = true;
	  this.rotateSpeed = 1.0;

	  // Set to false to disable panning
	  this.enablePan = true;
	  this.keyPanSpeed = 7.0; // pixels moved per arrow key push

	  // Set to true to automatically rotate around the target
	  // If auto-rotate is enabled, you must call controls.update() in your animation loop
	  this.autoRotate = false;
	  this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	  // Set to false to disable use of the keys
	  this.enableKeys = true;

	  // The four arrow keys
	  this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

	  // Mouse buttons
	  this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

	  // for reset
	  this.target0 = this.target.clone();
	  this.position0 = this.object.position.clone();
	  this.zoom0 = this.object.zoom;

	  //
	  // public methods
	  //

	  this.getPolarAngle = function () {

	    return phi;
	  };

	  this.getAzimuthalAngle = function () {

	    return theta;
	  };

	  this.reset = function () {

	    scope.target.copy(scope.target0);
	    scope.object.position.copy(scope.position0);
	    scope.object.zoom = scope.zoom0;

	    scope.object.updateProjectionMatrix();
	    scope.dispatchEvent(changeEvent);

	    scope.update();

	    state = STATE.NONE;
	  };

	  // this method is exposed, but perhaps it would be better if we can make it private...
	  this.update = function () {

	    var offset = new THREE.Vector3();

	    // so camera.up is the orbit axis
	    var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));
	    var quatInverse = quat.clone().inverse();

	    var lastPosition = new THREE.Vector3();
	    var lastQuaternion = new THREE.Quaternion();

	    return function () {

	      var position = scope.object.position;

	      offset.copy(position).sub(scope.target);

	      // rotate offset to "y-axis-is-up" space
	      offset.applyQuaternion(quat);

	      // angle from z-axis around y-axis

	      theta = Math.atan2(offset.x, offset.z);

	      // angle from y-axis

	      phi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);

	      if (scope.autoRotate && state === STATE.NONE) {

	        rotateLeft(getAutoRotationAngle());
	      }

	      theta += thetaDelta;
	      phi += phiDelta;

	      // restrict theta to be between desired limits
	      theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, theta));

	      // restrict phi to be between desired limits
	      phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, phi));

	      // restrict phi to be betwee EPS and PI-EPS
	      phi = Math.max(EPS, Math.min(Math.PI - EPS, phi));

	      var radius = offset.length() * scale;

	      // restrict radius to be between desired limits
	      radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, radius));

	      // move target to panned location
	      scope.target.add(panOffset);

	      offset.x = radius * Math.sin(phi) * Math.sin(theta);
	      offset.y = radius * Math.cos(phi);
	      offset.z = radius * Math.sin(phi) * Math.cos(theta);

	      // rotate offset back to "camera-up-vector-is-up" space
	      offset.applyQuaternion(quatInverse);

	      position.copy(scope.target).add(offset);

	      scope.object.lookAt(scope.target);

	      if (scope.enableDamping === true) {

	        thetaDelta *= 1 - scope.dampingFactor;
	        phiDelta *= 1 - scope.dampingFactor;
	      } else {

	        thetaDelta = 0;
	        phiDelta = 0;
	      }

	      scale = 1;
	      panOffset.set(0, 0, 0);

	      // update condition is:
	      // min(camera displacement, camera rotation in radians)^2 > EPS
	      // using small-angle approximation cos(x/2) = 1 - x^2 / 8

	      if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

	        scope.dispatchEvent(changeEvent);

	        lastPosition.copy(scope.object.position);
	        lastQuaternion.copy(scope.object.quaternion);
	        zoomChanged = false;

	        return true;
	      }

	      return false;
	    };
	  }();

	  this.dispose = function () {

	    scope.domElement.removeEventListener('contextmenu', onContextMenu, false);
	    scope.domElement.removeEventListener('mousedown', onMouseDown, false);
	    scope.domElement.removeEventListener('mousewheel', onMouseWheel, false);
	    scope.domElement.removeEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox

	    scope.domElement.removeEventListener('touchstart', onTouchStart, false);
	    scope.domElement.removeEventListener('touchend', onTouchEnd, false);
	    scope.domElement.removeEventListener('touchmove', onTouchMove, false);

	    document.removeEventListener('mousemove', onMouseMove, false);
	    document.removeEventListener('mouseup', onMouseUp, false);
	    document.removeEventListener('mouseout', onMouseUp, false);

	    window.removeEventListener('keydown', onKeyDown, false);

	    //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
	  };

	  //
	  // internals
	  //

	  var scope = this;

	  var changeEvent = { type: 'change' };
	  var startEvent = { type: 'start' };
	  var endEvent = { type: 'end' };

	  var STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };

	  var state = STATE.NONE;

	  var EPS = 0.000001;

	  // current position in spherical coordinates
	  var theta;
	  var phi;

	  var phiDelta = 0;
	  var thetaDelta = 0;
	  var scale = 1;
	  var panOffset = new THREE.Vector3();
	  var zoomChanged = false;

	  var rotateStart = new THREE.Vector2();
	  var rotateEnd = new THREE.Vector2();
	  var rotateDelta = new THREE.Vector2();

	  var panStart = new THREE.Vector2();
	  var panEnd = new THREE.Vector2();
	  var panDelta = new THREE.Vector2();

	  var dollyStart = new THREE.Vector2();
	  var dollyEnd = new THREE.Vector2();
	  var dollyDelta = new THREE.Vector2();

	  function getAutoRotationAngle() {

	    return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
	  }

	  function getZoomScale() {

	    return Math.pow(0.95, scope.zoomSpeed);
	  }

	  function rotateLeft(angle) {

	    thetaDelta -= angle;
	  }

	  function rotateUp(angle) {

	    phiDelta -= angle;
	  }

	  var panLeft = function () {

	    var v = new THREE.Vector3();

	    return function panLeft(distance, objectMatrix) {

	      var te = objectMatrix.elements;

	      // get X column of objectMatrix
	      v.set(te[0], te[1], te[2]);

	      v.multiplyScalar(-distance);

	      panOffset.add(v);
	    };
	  }();

	  var panUp = function () {

	    var v = new THREE.Vector3();

	    return function panUp(distance, objectMatrix) {

	      var te = objectMatrix.elements;

	      // get Y column of objectMatrix
	      v.set(te[4], te[5], te[6]);

	      v.multiplyScalar(distance);

	      panOffset.add(v);
	    };
	  }();

	  // deltaX and deltaY are in pixels; right and down are positive
	  var pan = function () {

	    var offset = new THREE.Vector3();

	    return function (deltaX, deltaY) {

	      var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

	      if (scope.object instanceof THREE.PerspectiveCamera) {

	        // perspective
	        var position = scope.object.position;
	        offset.copy(position).sub(scope.target);
	        var targetDistance = offset.length();

	        // half of the fov is center to top of screen
	        targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);

	        // we actually don't use screenWidth, since perspective camera is fixed to screen height
	        panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
	        panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
	      } else if (scope.object instanceof THREE.OrthographicCamera) {

	        // orthographic
	        panLeft(deltaX * (scope.object.right - scope.object.left) / element.clientWidth, scope.object.matrix);
	        panUp(deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight, scope.object.matrix);
	      } else {

	        // camera neither orthographic nor perspective
	        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
	        scope.enablePan = false;
	      }
	    };
	  }();

	  function dollyIn(dollyScale) {

	    if (scope.object instanceof THREE.PerspectiveCamera) {

	      scale /= dollyScale;
	    } else if (scope.object instanceof THREE.OrthographicCamera) {

	      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
	      scope.object.updateProjectionMatrix();
	      zoomChanged = true;
	    } else {

	      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
	      scope.enableZoom = false;
	    }
	  }

	  function dollyOut(dollyScale) {

	    if (scope.object instanceof THREE.PerspectiveCamera) {

	      scale *= dollyScale;
	    } else if (scope.object instanceof THREE.OrthographicCamera) {

	      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
	      scope.object.updateProjectionMatrix();
	      zoomChanged = true;
	    } else {

	      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
	      scope.enableZoom = false;
	    }
	  }

	  //
	  // event callbacks - update the object state
	  //

	  function handleMouseDownRotate(event) {

	    //console.log( 'handleMouseDownRotate' );

	    rotateStart.set(event.clientX, event.clientY);
	  }

	  function handleMouseDownDolly(event) {

	    //console.log( 'handleMouseDownDolly' );

	    dollyStart.set(event.clientX, event.clientY);
	  }

	  function handleMouseDownPan(event) {

	    //console.log( 'handleMouseDownPan' );

	    panStart.set(event.clientX, event.clientY);
	  }

	  function handleMouseMoveRotate(event) {

	    //console.log( 'handleMouseMoveRotate' );

	    rotateEnd.set(event.clientX, event.clientY);
	    rotateDelta.subVectors(rotateEnd, rotateStart);

	    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

	    // rotating across whole screen goes 360 degrees around
	    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);

	    // rotating up and down along whole screen attempts to go 360, but limited to 180
	    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);

	    rotateStart.copy(rotateEnd);

	    scope.update();
	  }

	  function handleMouseMoveDolly(event) {

	    //console.log( 'handleMouseMoveDolly' );

	    dollyEnd.set(event.clientX, event.clientY);

	    dollyDelta.subVectors(dollyEnd, dollyStart);

	    if (dollyDelta.y > 0) {

	      dollyIn(getZoomScale());
	    } else if (dollyDelta.y < 0) {

	      dollyOut(getZoomScale());
	    }

	    dollyStart.copy(dollyEnd);

	    scope.update();
	  }

	  function handleMouseMovePan(event) {

	    //console.log( 'handleMouseMovePan' );

	    panEnd.set(event.clientX, event.clientY);

	    panDelta.subVectors(panEnd, panStart);

	    pan(panDelta.x, panDelta.y);

	    panStart.copy(panEnd);

	    scope.update();
	  }

	  function handleMouseUp(event) {

	    //console.log( 'handleMouseUp' );

	  }

	  function handleMouseWheel(event) {

	    //console.log( 'handleMouseWheel' );

	    var delta = 0;

	    if (event.wheelDelta !== undefined) {

	      // WebKit / Opera / Explorer 9

	      delta = event.wheelDelta;
	    } else if (event.detail !== undefined) {

	      // Firefox

	      delta = -event.detail;
	    }

	    if (delta > 0) {

	      dollyOut(getZoomScale());
	    } else if (delta < 0) {

	      dollyIn(getZoomScale());
	    }

	    scope.update();
	  }

	  function handleKeyDown(event) {

	    //console.log( 'handleKeyDown' );

	    switch (event.keyCode) {

	      case scope.keys.UP:
	        pan(0, scope.keyPanSpeed);
	        scope.update();
	        break;

	      case scope.keys.BOTTOM:
	        pan(0, -scope.keyPanSpeed);
	        scope.update();
	        break;

	      case scope.keys.LEFT:
	        pan(scope.keyPanSpeed, 0);
	        scope.update();
	        break;

	      case scope.keys.RIGHT:
	        pan(-scope.keyPanSpeed, 0);
	        scope.update();
	        break;

	    }
	  }

	  function handleTouchStartRotate(event) {

	    //console.log( 'handleTouchStartRotate' );

	    rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);
	  }

	  function handleTouchStartDolly(event) {

	    //console.log( 'handleTouchStartDolly' );

	    var dx = event.touches[0].pageX - event.touches[1].pageX;
	    var dy = event.touches[0].pageY - event.touches[1].pageY;

	    var distance = Math.sqrt(dx * dx + dy * dy);

	    dollyStart.set(0, distance);
	  }

	  function handleTouchStartPan(event) {

	    //console.log( 'handleTouchStartPan' );

	    panStart.set(event.touches[0].pageX, event.touches[0].pageY);
	  }

	  function handleTouchMoveRotate(event) {

	    //console.log( 'handleTouchMoveRotate' );

	    rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);
	    rotateDelta.subVectors(rotateEnd, rotateStart);

	    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

	    // rotating across whole screen goes 360 degrees around
	    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);

	    // rotating up and down along whole screen attempts to go 360, but limited to 180
	    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);

	    rotateStart.copy(rotateEnd);

	    scope.update();
	  }

	  function handleTouchMoveDolly(event) {

	    //console.log( 'handleTouchMoveDolly' );

	    var dx = event.touches[0].pageX - event.touches[1].pageX;
	    var dy = event.touches[0].pageY - event.touches[1].pageY;

	    var distance = Math.sqrt(dx * dx + dy * dy);

	    dollyEnd.set(0, distance);

	    dollyDelta.subVectors(dollyEnd, dollyStart);

	    if (dollyDelta.y > 0) {

	      dollyOut(getZoomScale());
	    } else if (dollyDelta.y < 0) {

	      dollyIn(getZoomScale());
	    }

	    dollyStart.copy(dollyEnd);

	    scope.update();
	  }

	  function handleTouchMovePan(event) {

	    //console.log( 'handleTouchMovePan' );

	    panEnd.set(event.touches[0].pageX, event.touches[0].pageY);

	    panDelta.subVectors(panEnd, panStart);

	    pan(panDelta.x, panDelta.y);

	    panStart.copy(panEnd);

	    scope.update();
	  }

	  function handleTouchEnd(event) {}

	  //console.log( 'handleTouchEnd' );

	  //
	  // event handlers - FSM: listen for events and reset state
	  //

	  function onMouseDown(event) {

	    if (scope.enabled === false) return;

	    event.preventDefault();

	    if (event.button === scope.mouseButtons.ORBIT) {

	      if (scope.enableRotate === false) return;

	      handleMouseDownRotate(event);

	      state = STATE.ROTATE;
	    } else if (event.button === scope.mouseButtons.ZOOM) {

	      if (scope.enableZoom === false) return;

	      handleMouseDownDolly(event);

	      state = STATE.DOLLY;
	    } else if (event.button === scope.mouseButtons.PAN) {

	      if (scope.enablePan === false) return;

	      handleMouseDownPan(event);

	      state = STATE.PAN;
	    }

	    if (state !== STATE.NONE) {

	      document.addEventListener('mousemove', onMouseMove, false);
	      document.addEventListener('mouseup', onMouseUp, false);
	      document.addEventListener('mouseout', onMouseUp, false);

	      scope.dispatchEvent(startEvent);
	    }
	  }

	  function onMouseMove(event) {

	    if (scope.enabled === false) return;

	    event.preventDefault();

	    if (state === STATE.ROTATE) {

	      if (scope.enableRotate === false) return;

	      handleMouseMoveRotate(event);
	    } else if (state === STATE.DOLLY) {

	      if (scope.enableZoom === false) return;

	      handleMouseMoveDolly(event);
	    } else if (state === STATE.PAN) {

	      if (scope.enablePan === false) return;

	      handleMouseMovePan(event);
	    }
	  }

	  function onMouseUp(event) {

	    if (scope.enabled === false) return;

	    handleMouseUp(event);

	    document.removeEventListener('mousemove', onMouseMove, false);
	    document.removeEventListener('mouseup', onMouseUp, false);
	    document.removeEventListener('mouseout', onMouseUp, false);

	    scope.dispatchEvent(endEvent);

	    state = STATE.NONE;
	  }

	  function onMouseWheel(event) {

	    if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;

	    event.preventDefault();
	    event.stopPropagation();

	    handleMouseWheel(event);

	    scope.dispatchEvent(startEvent); // not sure why these are here...
	    scope.dispatchEvent(endEvent);
	  }

	  function onKeyDown(event) {

	    if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;

	    handleKeyDown(event);
	  }

	  function onTouchStart(event) {

	    if (scope.enabled === false) return;

	    switch (event.touches.length) {

	      case 1:
	        // one-fingered touch: rotate

	        if (scope.enableRotate === false) return;

	        handleTouchStartRotate(event);

	        state = STATE.TOUCH_ROTATE;

	        break;

	      case 2:
	        // two-fingered touch: dolly

	        if (scope.enableZoom === false) return;

	        handleTouchStartDolly(event);

	        state = STATE.TOUCH_DOLLY;

	        break;

	      case 3:
	        // three-fingered touch: pan

	        if (scope.enablePan === false) return;

	        handleTouchStartPan(event);

	        state = STATE.TOUCH_PAN;

	        break;

	      default:

	        state = STATE.NONE;

	    }

	    if (state !== STATE.NONE) {

	      scope.dispatchEvent(startEvent);
	    }
	  }

	  function onTouchMove(event) {

	    if (scope.enabled === false) return;

	    event.preventDefault();
	    event.stopPropagation();

	    switch (event.touches.length) {

	      case 1:
	        // one-fingered touch: rotate

	        if (scope.enableRotate === false) return;
	        if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...

	        handleTouchMoveRotate(event);

	        break;

	      case 2:
	        // two-fingered touch: dolly

	        if (scope.enableZoom === false) return;
	        if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...

	        handleTouchMoveDolly(event);

	        break;

	      case 3:
	        // three-fingered touch: pan

	        if (scope.enablePan === false) return;
	        if (state !== STATE.TOUCH_PAN) return; // is this needed?...

	        handleTouchMovePan(event);

	        break;

	      default:

	        state = STATE.NONE;

	    }
	  }

	  function onTouchEnd(event) {

	    if (scope.enabled === false) return;

	    handleTouchEnd(event);

	    scope.dispatchEvent(endEvent);

	    state = STATE.NONE;
	  }

	  function onContextMenu(event) {

	    event.preventDefault();
	  }

	  //

	  scope.domElement.addEventListener('contextmenu', onContextMenu, false);

	  scope.domElement.addEventListener('mousedown', onMouseDown, false);
	  scope.domElement.addEventListener('mousewheel', onMouseWheel, false);
	  scope.domElement.addEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox

	  scope.domElement.addEventListener('touchstart', onTouchStart, false);
	  scope.domElement.addEventListener('touchend', onTouchEnd, false);
	  scope.domElement.addEventListener('touchmove', onTouchMove, false);

	  window.addEventListener('keydown', onKeyDown, false);

	  // force an update at start

	  this.update();
	};

	THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);
	THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;

	Object.defineProperties(THREE.OrbitControls.prototype, {

	  center: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .center has been renamed to .target');
	      return this.target;
	    }

	  },

	  // backward compatibility

	  noZoom: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
	      return !this.enableZoom;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
	      this.enableZoom = !value;
	    }

	  },

	  noRotate: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
	      return !this.enableRotate;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
	      this.enableRotate = !value;
	    }

	  },

	  noPan: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
	      return !this.enablePan;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
	      this.enablePan = !value;
	    }

	  },

	  noKeys: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
	      return !this.enableKeys;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
	      this.enableKeys = !value;
	    }

	  },

	  staticMoving: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
	      return !this.constraint.enableDamping;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
	      this.constraint.enableDamping = !value;
	    }

	  },

	  dynamicDampingFactor: {

	    get: function get() {

	      console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
	      return this.constraint.dampingFactor;
	    },

	    set: function set(value) {

	      console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
	      this.constraint.dampingFactor = value;
	    }

	  }

	});

/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.playSfx = playSfx;
	function playSfx() {
	  var id = arguments.length <= 0 || arguments[0] === undefined ? 'sfx01' : arguments[0];
	  var volume = arguments.length <= 1 || arguments[1] === undefined ? 0.4 : arguments[1];

	  var audio = document.getElementById(id);
	  audio.currentTime = 0;
	  audio.volume = volume;
	  audio.play();
	}

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactMotion = __webpack_require__(189);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MotionButton = function (_Component) {
	  _inherits(MotionButton, _Component);

	  function MotionButton(props) {
	    _classCallCheck(this, MotionButton);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MotionButton).call(this, props));

	    _this.mouseover = _this.mouseover.bind(_this);
	    _this.mouseout = _this.mouseout.bind(_this);

	    _this.state = {
	      mouseover: false
	    };
	    return _this;
	  }

	  _createClass(MotionButton, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var mouseover = this.state.mouseover;

	      var springParams = { stiffness: 800, damping: 20 };
	      var springParamsAlt = { stiffness: 20, damping: 20 };

	      return _react2.default.createElement(
	        _reactMotion.Motion,
	        {
	          defaultStyle: {
	            scale: 1,
	            x: 0,
	            borderRadius: 2,
	            opacity: .2,
	            borderColor: 'rgba(255, 255, 255, 0)'
	          },
	          style: {
	            x: mouseover ? (0, _reactMotion.spring)() : (0, _reactMotion.spring)(0),
	            scale: mouseover ? (0, _reactMotion.spring)(1.25, springParams) : (0, _reactMotion.spring)(1, springParams),
	            borderRadius: mouseover ? (0, _reactMotion.spring)(25) : (0, _reactMotion.spring)(2),
	            opacity: mouseover ? (0, _reactMotion.spring)(0) : (0, _reactMotion.spring)(.125)
	          } },
	        function (values) {
	          return _react2.default.createElement(
	            'button',
	            _extends({}, _this2.props, {
	              style: {
	                transform: 'scale(' + values.scale + ')',
	                border: '1px solid rgba(255, 255, 255, ' + values.opacity + ')',
	                borderRadius: values.borderRadius
	              },
	              onMouseOver: _this2.mouseover,
	              onMouseOut: _this2.mouseout }),
	            _react2.default.createElement(
	              _reactMotion.Motion,
	              {
	                defaultStyle: {
	                  scale: 1,
	                  letterSpacing: 2
	                },
	                style: {
	                  scale: mouseover ? (0, _reactMotion.spring)(0.8, springParamsAlt) : (0, _reactMotion.spring)(1, springParamsAlt),
	                  letterSpacing: mouseover ? (0, _reactMotion.spring)(6, springParamsAlt) : (0, _reactMotion.spring)(2, springParamsAlt)
	                } },
	              function (values) {
	                return _react2.default.createElement(
	                  'span',
	                  {
	                    style: {
	                      display: 'inline-block',
	                      transform: 'scale(' + values.scale + ')',
	                      pointerEvents: 'none',
	                      letterSpacing: values.letterSpacing
	                    },
	                    className: 'gt-button__label' },
	                  _this2.props.label
	                );
	              }
	            )
	          );
	        }
	      );
	    }
	  }, {
	    key: 'mouseover',
	    value: function mouseover(e) {
	      this.setState({
	        mouseover: true
	      });
	      this.props.onMouseOver && this.props.onMouseOver();
	    }
	  }, {
	    key: 'mouseout',
	    value: function mouseout() {
	      console.log('mouseout');
	      this.setState({
	        mouseover: false
	      });
	      this.props.onMouseOut && this.props.onMouseOut();
	    }
	  }, {
	    key: 'show',
	    value: function show() {}
	  }, {
	    key: 'hide',
	    value: function hide() {}
	  }]);

	  return MotionButton;
	}(_react.Component);

	exports.default = MotionButton;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _Motion = __webpack_require__(190);

	exports.Motion = _interopRequire(_Motion);

	var _StaggeredMotion = __webpack_require__(197);

	exports.StaggeredMotion = _interopRequire(_StaggeredMotion);

	var _TransitionMotion = __webpack_require__(198);

	exports.TransitionMotion = _interopRequire(_TransitionMotion);

	var _spring = __webpack_require__(200);

	exports.spring = _interopRequire(_spring);

	var _presets = __webpack_require__(201);

	exports.presets = _interopRequire(_presets);

	// deprecated, dummy warning function

	var _reorderKeys = __webpack_require__(202);

	exports.reorderKeys = _interopRequire(_reorderKeys);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(191);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(192);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(193);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(194);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(195);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(196);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var msPerFrame = 1000 / 60;

	var Motion = _react2['default'].createClass({
	  displayName: 'Motion',

	  propTypes: {
	    // TOOD: warn against putting a config in here
	    defaultStyle: _react.PropTypes.objectOf(_react.PropTypes.number),
	    style: _react.PropTypes.objectOf(_react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object])).isRequired,
	    children: _react.PropTypes.func.isRequired,
	    onRest: _react.PropTypes.func
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;

	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  },

	  wasAnimating: false,
	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyle: null,
	  // after checking for unreadPropStyle != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(destStyle) {
	    var dirty = false;
	    var _state = this.state;
	    var currentStyle = _state.currentStyle;
	    var currentVelocity = _state.currentVelocity;
	    var lastIdealStyle = _state.lastIdealStyle;
	    var lastIdealVelocity = _state.lastIdealVelocity;

	    for (var key in destStyle) {
	      if (!destStyle.hasOwnProperty(key)) {
	        continue;
	      }

	      var styleValue = destStyle[key];
	      if (typeof styleValue === 'number') {
	        if (!dirty) {
	          dirty = true;
	          currentStyle = _extends({}, currentStyle);
	          currentVelocity = _extends({}, currentVelocity);
	          lastIdealStyle = _extends({}, lastIdealStyle);
	          lastIdealVelocity = _extends({}, lastIdealVelocity);
	        }

	        currentStyle[key] = styleValue;
	        currentVelocity[key] = 0;
	        lastIdealStyle[key] = styleValue;
	        lastIdealVelocity[key] = 0;
	      }
	    }

	    if (dirty) {
	      this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	    }
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function () {
	      // check if we need to animate in the first place
	      var propsStyle = _this.props.style;
	      if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	        if (_this.wasAnimating && _this.props.onRest) {
	          _this.props.onRest();
	        }

	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.wasAnimating = false;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      _this.wasAnimating = true;

	      var currentTime = _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var newLastIdealStyle = {};
	      var newLastIdealVelocity = {};
	      var newCurrentStyle = {};
	      var newCurrentVelocity = {};

	      for (var key in propsStyle) {
	        if (!propsStyle.hasOwnProperty(key)) {
	          continue;
	        }

	        var styleValue = propsStyle[key];
	        if (typeof styleValue === 'number') {
	          newCurrentStyle[key] = styleValue;
	          newCurrentVelocity[key] = 0;
	          newLastIdealStyle[key] = styleValue;
	          newLastIdealVelocity[key] = 0;
	        } else {
	          var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	          var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	          for (var i = 0; i < framesToCatchUp; i++) {
	            var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            newLastIdealStyleValue = _stepper[0];
	            newLastIdealVelocityValue = _stepper[1];
	          }

	          var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	          var nextIdealX = _stepper2[0];
	          var nextIdealV = _stepper2[1];

	          newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	          newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	          newLastIdealStyle[key] = newLastIdealStyleValue;
	          newLastIdealVelocity[key] = newLastIdealVelocityValue;
	        }
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyle: newCurrentStyle,
	        currentVelocity: newCurrentVelocity,
	        lastIdealStyle: newLastIdealStyle,
	        lastIdealVelocity: newLastIdealVelocity
	      });

	      _this.unreadPropStyle = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }

	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = Motion;
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports) {

	

	// currently used to initiate the velocity style object to 0
	'use strict';

	exports.__esModule = true;
	exports['default'] = mapToZero;

	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports) {

	
	// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by
	// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}

	'use strict';

	exports.__esModule = true;
	exports['default'] = stripStyle;

	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!style.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}

	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports) {

	

	// stepper is used a lot. Saves allocation to return the same array wrapper.
	// This is fine and danger-free against mutations because the callsite
	// immediately destructures it and gets the numbers inside without passing the
	"use strict";

	exports.__esModule = true;
	exports["default"] = stepper;

	var reusedTuple = [];

	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2

	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);

	  // Damping, in kg / s
	  var Fdamper = -b * v;

	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;

	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;

	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }

	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}

	module.exports = exports["default"];
	// array reference around.

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(194)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}

	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function() {
	  root.requestAnimationFrame = raf
	  root.cancelAnimationFrame = caf
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 196 */
/***/ function(module, exports) {

	

	// usage assumption: currentStyle values have already been rendered but it says
	// nothing of whether currentStyle is stale (see unreadPropStyle)
	'use strict';

	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;

	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!style.hasOwnProperty(key)) {
	      continue;
	    }

	    if (currentVelocity[key] !== 0) {
	      return false;
	    }

	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(191);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(192);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(193);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _performanceNow = __webpack_require__(194);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(195);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(196);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var msPerFrame = 1000 / 60;

	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	var StaggeredMotion = _react2['default'].createClass({
	  displayName: 'StaggeredMotion',

	  propTypes: {
	    // TOOD: warn against putting a config in here
	    defaultStyles: _react.PropTypes.arrayOf(_react.PropTypes.objectOf(_react.PropTypes.number)),
	    styles: _react.PropTypes.func.isRequired,
	    children: _react.PropTypes.func.isRequired
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;

	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  },

	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyles: null,
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {
	    var _state = this.state;
	    var currentStyles = _state.currentStyles;
	    var currentVelocities = _state.currentVelocities;
	    var lastIdealStyles = _state.lastIdealStyles;
	    var lastIdealVelocities = _state.lastIdealVelocities;

	    var someDirty = false;
	    for (var i = 0; i < unreadPropStyles.length; i++) {
	      var unreadPropStyle = unreadPropStyles[i];
	      var dirty = false;

	      for (var key in unreadPropStyle) {
	        if (!unreadPropStyle.hasOwnProperty(key)) {
	          continue;
	        }

	        var styleValue = unreadPropStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            someDirty = true;
	            currentStyles[i] = _extends({}, currentStyles[i]);
	            currentVelocities[i] = _extends({}, currentVelocities[i]);
	            lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	            lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	          }
	          currentStyles[i][key] = styleValue;
	          currentVelocities[i][key] = 0;
	          lastIdealStyles[i][key] = styleValue;
	          lastIdealVelocities[i][key] = 0;
	        }
	      }
	    }

	    if (someDirty) {
	      this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	    }
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function () {
	      var destStyles = _this.props.styles(_this.state.lastIdealStyles);

	      // check if we need to animate in the first place
	      if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      var currentTime = _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var newLastIdealStyles = [];
	      var newLastIdealVelocities = [];
	      var newCurrentStyles = [];
	      var newCurrentVelocities = [];

	      for (var i = 0; i < destStyles.length; i++) {
	        var destStyle = destStyles[i];
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};

	        for (var key in destStyle) {
	          if (!destStyle.hasOwnProperty(key)) {
	            continue;
	          }

	          var styleValue = destStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	            for (var j = 0; j < framesToCatchUp; j++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        newCurrentStyles[i] = newCurrentStyle;
	        newCurrentVelocities[i] = newCurrentVelocity;
	        newLastIdealStyles[i] = newLastIdealStyle;
	        newLastIdealVelocities[i] = newLastIdealVelocity;
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyles: newCurrentStyles,
	        currentVelocities: newCurrentVelocities,
	        lastIdealStyles: newLastIdealStyles,
	        lastIdealVelocities: newLastIdealVelocities
	      });

	      _this.unreadPropStyles = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mapToZero = __webpack_require__(191);

	var _mapToZero2 = _interopRequireDefault(_mapToZero);

	var _stripStyle = __webpack_require__(192);

	var _stripStyle2 = _interopRequireDefault(_stripStyle);

	var _stepper3 = __webpack_require__(193);

	var _stepper4 = _interopRequireDefault(_stepper3);

	var _mergeDiff = __webpack_require__(199);

	var _mergeDiff2 = _interopRequireDefault(_mergeDiff);

	var _performanceNow = __webpack_require__(194);

	var _performanceNow2 = _interopRequireDefault(_performanceNow);

	var _raf = __webpack_require__(195);

	var _raf2 = _interopRequireDefault(_raf);

	var _shouldStopAnimation = __webpack_require__(196);

	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var msPerFrame = 1000 / 60;

	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  if (unreadPropStyles == null) {
	    // $FlowFixMe
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    // $FlowFixMe
	    for (var j = 0; j < unreadPropStyles.length; j++) {
	      // $FlowFixMe
	      if (unreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          // $FlowFixMe
	          key: unreadPropStyles[j].key,
	          data: unreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    // $FlowFixMe
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}

	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }

	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }

	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }

	  return true;
	}

	// core key merging logic

	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key

	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });

	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;

	      // $FlowFixMe
	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }

	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}

	var TransitionMotion = _react2['default'].createClass({
	  displayName: 'TransitionMotion',

	  propTypes: {
	    defaultStyles: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      key: _react.PropTypes.string.isRequired,
	      data: _react.PropTypes.any,
	      style: _react.PropTypes.objectOf(_react.PropTypes.number).isRequired
	    })),
	    styles: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      key: _react.PropTypes.string.isRequired,
	      data: _react.PropTypes.any,
	      style: _react.PropTypes.objectOf(_react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.object])).isRequired
	    }))]).isRequired,
	    children: _react.PropTypes.func.isRequired,
	    willLeave: _react.PropTypes.func,
	    willEnter: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;

	    var destStyles = typeof styles === 'function' ? styles() : styles;

	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      // $FlowFixMe
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });

	    var _mergeAndSync = mergeAndSync(
	    // $FlowFixMe
	    willEnter,
	    // $FlowFixMe
	    willLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);

	    var mergedPropsStyles = _mergeAndSync[0];
	    var currentStyles = _mergeAndSync[1];
	    var currentVelocities = _mergeAndSync[2];
	    var lastIdealStyles = _mergeAndSync[3];
	    var lastIdealVelocities = _mergeAndSync[4];
	    // oldLastIdealVelocities really

	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  },

	  animationID: null,
	  prevTime: 0,
	  accumulatedTime: 0,
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	  unreadPropStyles: null,
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	  clearUnreadPropStyle: function clearUnreadPropStyle(unreadPropStyles) {
	    var _mergeAndSync2 = mergeAndSync(
	    // $FlowFixMe
	    this.props.willEnter,
	    // $FlowFixMe
	    this.props.willLeave, this.state.mergedPropsStyles, unreadPropStyles, this.state.currentStyles, this.state.currentVelocities, this.state.lastIdealStyles, this.state.lastIdealVelocities);

	    var mergedPropsStyles = _mergeAndSync2[0];
	    var currentStyles = _mergeAndSync2[1];
	    var currentVelocities = _mergeAndSync2[2];
	    var lastIdealStyles = _mergeAndSync2[3];
	    var lastIdealVelocities = _mergeAndSync2[4];

	    for (var i = 0; i < unreadPropStyles.length; i++) {
	      var unreadPropStyle = unreadPropStyles[i].style;
	      var dirty = false;

	      for (var key in unreadPropStyle) {
	        if (!unreadPropStyle.hasOwnProperty(key)) {
	          continue;
	        }

	        var styleValue = unreadPropStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyles[i] = _extends({}, currentStyles[i]);
	            currentVelocities[i] = _extends({}, currentVelocities[i]);
	            lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	            lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            mergedPropsStyles[i] = {
	              key: mergedPropsStyles[i].key,
	              data: mergedPropsStyles[i].data,
	              style: _extends({}, mergedPropsStyles[i].style)
	            };
	          }
	          currentStyles[i][key] = styleValue;
	          currentVelocities[i][key] = 0;
	          lastIdealStyles[i][key] = styleValue;
	          lastIdealVelocities[i][key] = 0;
	          mergedPropsStyles[i].style[key] = styleValue;
	        }
	      }
	    }

	    // unlike the other 2 components, we can't detect staleness and optionally
	    // opt out of setState here. each style object's data might contain new
	    // stuff we're not/cannot compare
	    this.setState({
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      mergedPropsStyles: mergedPropsStyles,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities
	    });
	  },

	  startAnimationIfNecessary: function startAnimationIfNecessary() {
	    var _this = this;

	    // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	    // call cb? No, otherwise accidental parent rerender causes cb trigger
	    this.animationID = _raf2['default'](function () {
	      var propStyles = _this.props.styles;
	      var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;

	      // check if we need to animate in the first place
	      if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.accumulatedTime = 0;
	        return;
	      }

	      var currentTime = _performanceNow2['default']();
	      var timeDelta = currentTime - _this.prevTime;
	      _this.prevTime = currentTime;
	      _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	      // more than 10 frames? prolly switched browser tab. Restart
	      if (_this.accumulatedTime > msPerFrame * 10) {
	        _this.accumulatedTime = 0;
	      }

	      if (_this.accumulatedTime === 0) {
	        // no need to cancel animationID here; shouldn't have any in flight
	        _this.animationID = null;
	        _this.startAnimationIfNecessary();
	        return;
	      }

	      var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	      var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	      var _mergeAndSync3 = mergeAndSync(
	      // $FlowFixMe
	      _this.props.willEnter,
	      // $FlowFixMe
	      _this.props.willLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	      var newMergedPropsStyles = _mergeAndSync3[0];
	      var newCurrentStyles = _mergeAndSync3[1];
	      var newCurrentVelocities = _mergeAndSync3[2];
	      var newLastIdealStyles = _mergeAndSync3[3];
	      var newLastIdealVelocities = _mergeAndSync3[4];

	      for (var i = 0; i < newMergedPropsStyles.length; i++) {
	        var newMergedPropsStyle = newMergedPropsStyles[i].style;
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};

	        for (var key in newMergedPropsStyle) {
	          if (!newMergedPropsStyle.hasOwnProperty(key)) {
	            continue;
	          }

	          var styleValue = newMergedPropsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = newLastIdealStyles[i][key];
	            var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	            for (var j = 0; j < framesToCatchUp; j++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        newLastIdealStyles[i] = newLastIdealStyle;
	        newLastIdealVelocities[i] = newLastIdealVelocity;
	        newCurrentStyles[i] = newCurrentStyle;
	        newCurrentVelocities[i] = newCurrentVelocity;
	      }

	      _this.animationID = null;
	      // the amount we're looped over above
	      _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	      _this.setState({
	        currentStyles: newCurrentStyles,
	        currentVelocities: newCurrentVelocities,
	        lastIdealStyles: newLastIdealStyles,
	        lastIdealVelocities: newLastIdealVelocities,
	        mergedPropsStyles: newMergedPropsStyles
	      });

	      _this.unreadPropStyles = null;

	      _this.startAnimationIfNecessary();
	    });
	  },

	  componentDidMount: function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    if (typeof props.styles === 'function') {
	      // $FlowFixMe
	      this.unreadPropStyles = props.styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = props.styles;
	    }

	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  },

	  render: function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  }
	});

	exports['default'] = TransitionMotion;
	module.exports = exports['default'];

	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function

	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives

/***/ },
/* 199 */
/***/ function(module, exports) {

	

	// core keys merging algorithm. If previous render's keys are [a, b], and the
	// next render's [c, b, d], what's the final merged keys and ordering?

	// - c and a must both be before b
	// - b before d
	// - ordering between a and c ambiguous

	// this reduces to merging two partially ordered lists (e.g. lists where not
	// every item has a definite ordering, like comparing a and c above). For the
	// ambiguous ordering we deterministically choose to place the next render's
	// item after the previous'; so c after a

	// this is called a topological sorting. Except the existing algorithms don't
	// work well with js bc of the amount of allocation, and isn't optimized for our
	// current use-case bc the runtime is linear in terms of edges (see wiki for
	// meaning), which is huge when two lists have many common elements
	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeDiff;

	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster

	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }

	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!nextKeyIndex.hasOwnProperty(prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }

	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];

	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev

	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!prevKeyIndex.hasOwnProperty(pivot)) {
	          continue;
	        }

	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!prevKeyIndex.hasOwnProperty(pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}

	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = spring;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presets = __webpack_require__(201);

	var _presets2 = _interopRequireDefault(_presets);

	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});

	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}

	module.exports = exports['default'];

/***/ },
/* 201 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = reorderKeys;

	var hasWarned = false;

	function reorderKeys() {
	  if (process.env.NODE_ENV === 'development') {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactMotion = __webpack_require__(189);

	var _IcosahedronButton = __webpack_require__(204);

	var _IcosahedronButton2 = _interopRequireDefault(_IcosahedronButton);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var items = [{
	  title: "The Project",
	  href: "#project"
	}, {
	  title: "Artists",
	  href: "#artists"
	}, {
	  title: "Get the Album",
	  href: "#listen"
	}, {
	  title: "Gallery",
	  href: "#gallery"
	}];

	var Navigation = function (_Component) {
	  _inherits(Navigation, _Component);

	  function Navigation(props) {
	    _classCallCheck(this, Navigation);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Navigation).call(this, props));

	    _this.show = _this.show.bind(_this);
	    _this.hide = _this.hide.bind(_this);

	    _this.state = {
	      show: false
	    };
	    return _this;
	  }

	  _createClass(Navigation, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var show = this.state.show;

	      var springParams = { stiffness: 280, damping: 30 };
	      var springParamsAlt = { stiffness: 200, damping: 30 };

	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_IcosahedronButton2.default, { onClick: this.show }),
	        _react2.default.createElement(
	          _reactMotion.Motion,
	          {
	            defaultStyle: {
	              y: -100,
	              opacity: 0
	            },
	            style: {
	              y: show ? (0, _reactMotion.spring)(0, springParamsAlt) : (0, _reactMotion.spring)(-100, springParamsAlt),
	              opacity: show ? (0, _reactMotion.spring)(1) : (0, _reactMotion.spring)(0)
	            } },
	          function (values) {
	            return _react2.default.createElement(
	              'div',
	              _extends({}, _this2.props, {
	                style: {
	                  transform: 'translate3d(0, ' + values.y + '%, 0)',
	                  opacity: values.opacity,
	                  position: 'fixed',
	                  display: 'flex',
	                  alignItems: 'center',
	                  top: 0,
	                  left: 0,
	                  width: '100%',
	                  height: '100%',
	                  backgroundColor: 'rgba(0, 0, 0, .85)',
	                  color: '#ababab',
	                  paddingLeft: '10%'
	                } }),
	              _react2.default.createElement(
	                'div',
	                { style: {
	                    flex: 1
	                  } },
	                _react2.default.createElement(
	                  'p',
	                  { style: {
	                      fontSize: '1.25em',
	                      fontWeight: 100,
	                      cursor: 'pointer',
	                      marginLeft: -28,
	                      marginBottom: 40 },
	                    onClick: _this2.hide },
	                  '← Back'
	                ),
	                show && _react2.default.createElement(
	                  _reactMotion.StaggeredMotion,
	                  {
	                    defaultStyles: [{ y: -100, opacity: 0 }, { y: -200, opacity: 0 }, { y: -300, opacity: 0 }, { y: -400, opacity: 0 }],
	                    styles: function styles(prevInterpolatedStyles) {
	                      return prevInterpolatedStyles.map(function (_, i) {
	                        return i === 0 ? { y: (0, _reactMotion.spring)(0, springParams), opacity: (0, _reactMotion.spring)(1, springParams) } : {
	                          opacity: (0, _reactMotion.spring)(prevInterpolatedStyles[i - 1].opacity, springParams),
	                          y: (0, _reactMotion.spring)(prevInterpolatedStyles[i - 1].y, springParams)
	                        };
	                      });
	                    } },
	                  function (interpolatingStyles) {
	                    return _react2.default.createElement(
	                      'div',
	                      null,
	                      interpolatingStyles.map(function (style, i) {
	                        return _react2.default.createElement(
	                          'div',
	                          { key: i, style: {
	                              paddingTop: 8,
	                              paddingBottom: 8,
	                              fontSize: '1.75em',
	                              fontWeight: 100,
	                              opacity: style.opacity,
	                              transform: 'translate3d(0, ' + style.y + 'px, 0)'
	                            } },
	                          _react2.default.createElement(
	                            'a',
	                            { href: '#', style: { color: '#EB5033', textDecoration: 'none' } },
	                            items[i].title
	                          )
	                        );
	                      })
	                    );
	                  }
	                )
	              )
	            );
	          }
	        )
	      );
	    }
	  }, {
	    key: 'show',
	    value: function show(e) {
	      this.setState({
	        show: true
	      });
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.setState({
	        show: false
	      });
	    }
	  }]);

	  return Navigation;
	}(_react.Component);

	exports.default = Navigation;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _ThreeScene = __webpack_require__(162);

	var _ThreeScene2 = _interopRequireDefault(_ThreeScene);

	var _three = __webpack_require__(163);

	var _three2 = _interopRequireDefault(_three);

	var _tween = __webpack_require__(164);

	var _tween2 = _interopRequireDefault(_tween);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var IcosahedronButton = function (_Component) {
	  _inherits(IcosahedronButton, _Component);

	  function IcosahedronButton(props) {
	    _classCallCheck(this, IcosahedronButton);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(IcosahedronButton).call(this, props));

	    _this.state = {
	      mouseover: false
	    };

	    _this.mouseOver = _this.mouseOver.bind(_this);
	    _this.mouseOut = _this.mouseOut.bind(_this);

	    _this.animate = _this.animate.bind(_this);
	    _this.renderScene = _this.renderScene.bind(_this);
	    return _this;
	  }

	  _createClass(IcosahedronButton, [{
	    key: 'mouseOver',
	    value: function mouseOver() {
	      this.setState({
	        mouseover: true
	      });
	    }
	  }, {
	    key: 'mouseOut',
	    value: function mouseOut() {
	      this.setState({
	        mouseover: false
	      });
	    }
	  }, {
	    key: 'renderScene',
	    value: function renderScene(scene, camera, renderer) {
	      this.mesh = this.drawIco();
	      scene.add(this.mesh);
	    }
	  }, {
	    key: 'drawIco',
	    value: function drawIco() {
	      var geometry = new _three2.default.IcosahedronGeometry(320);
	      //const geometry = new THREE.TorusKnotGeometry(320, 40, 120, 4)
	      var material = new _three2.default.MeshPhongMaterial({
	        color: this.props.color || 0xffffff,
	        wireframe: true
	      });
	      // transparent: true,
	      // opacity: 1.0
	      var mesh = new _three2.default.Mesh(geometry, material);
	      mesh.scale.x = mesh.scale.y = mesh.scale.z = 1;
	      return mesh;
	    }
	  }, {
	    key: 'drawMenu',
	    value: function drawMenu() {
	      var geometry = new _three2.default.Geometry();
	      geometry.vertices.push(new _three2.default.Vector3(-200, 0, 0), new _three2.default.Vector3(200, 0, 0), new _three2.default.Vector3(-200, 120, 0), new _three2.default.Vector3(200, 120, 0), new _three2.default.Vector3(-200, 240, 0), new _three2.default.Vector3(200, 240, 0));

	      var material = new _three2.default.LineBasicMaterial({
	        color: 0xffffff
	      });

	      var lineSegments = new _three2.default.LineSegments(geometry, material);
	      return lineSegments;
	    }
	  }, {
	    key: 'animate',
	    value: function animate(scene, camera) {

	      if (this.state.mouseover) {

	        // const lineSegments = this.drawMenu()

	        // this.mesh.geometry.vertices.forEach((v, i) => {
	        //   if(lineSegments.geometry.vertices[i]) {
	        //     v.x += lineSegments.geometry.vertices[i].x
	        //     v.y += lineSegments.geometry.vertices[i].y
	        //     v.z += lineSegments.geometry.vertices[i].z
	        //   } else {
	        //     this.mesh.geometry.vertices.pop()
	        //   }

	        //   this.mesh.geometry.dynamic = true;
	        //   this.mesh.geometry.verticesNeedUpdate = true;
	        // })
	        scene.rotation.x += 0.01;
	        scene.rotation.y += 0.01;
	        scene.rotation.z += 0.01;
	      }

	      //TWEEN.udpate()
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      return _react2.default.createElement(
	        'div',
	        {
	          onMouseOver: this.mouseOver,
	          onMouseOut: this.mouseOut,
	          onClick: this.props.onClick,
	          style: { cursor: 'pointer' } },
	        _react2.default.createElement(_ThreeScene2.default, {
	          ambientLightColor: 0xffffff,
	          fogColor: 0x35013F,
	          height: 96,
	          width: 96,
	          initScene: this.renderScene,
	          animate: this.animate,
	          alpha: true })
	      );
	    }
	  }]);

	  return IcosahedronButton;
	}(_react.Component);

	exports.default = IcosahedronButton;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(206);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(208)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./home.css", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./home.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(207)();
	// imports


	// module
	exports.push([module.id, "\n.gt-screen--home {\n  height: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background: rgba(255, 255, 255, .12);\n  position: relative;\n  z-index: 1;\n}\n\n#visualization canvas {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n.gt-screen__icosahedron {\n  position: fixed;\n  top: .5em;\n  left: 0;\n  z-index: 1000;\n}\n\n@media screen and (min-width: 768px) {\n  .gt-screen__icosahedron {\n    top: 4em;\n    left: 4em;\n  }\n}\n\n.gt-screen__title {\n  font-size: 2.5em;\n  text-transform: uppercase;\n  font-weight: 600;\n  margin: 0;\n  letter-spacing: 0em;\n  margin-top: auto;\n}\n\n.gt-screen__title span span {\n  /*border-bottom: 2px solid #fff;*/\n  display: inline-block;\n  min-width: 40px;\n  text-align: center;\n}\n\n.gt-screen__action {\n  margin-top: 2em;\n  text-align: center;\n}\n\n.gt-screen__footer {\n  margin-top: auto;\n}\n\n.gt-button--launch {\n  color: #fff;\n  text-decoration: none;\n  background: transparent;\n  border-top: 1px solid rgba(255, 255, 255, 0);\n  border-left: 1px solid rgba(255, 255, 255, 0);\n  border-right: 1px solid rgba(255, 255, 255, 0);\n  border-bottom: 1px solid rgba(255, 255, 255, 0);\n  display: inline-block;\n  padding: 1.25em 2em;\n  border-radius: 0;\n  text-transform: uppercase;\n  font-size: .7em;\n  /*letter-spacing: .15em;*/\n  min-width: 100px;\n  text-align: center;\n  /*transition: all .8s ease-out;*/\n}\n\n/*.gt-button--launch:hover {\n  border-top: 1px solid rgba(255, 255, 255, .25);\n  border-left: 1px solid rgba(255, 255, 255, .25);\n  border-right: 1px solid rgba(255, 255, 255, .25);\n  border-bottom: 1px solid rgba(255, 255, 255, .25);\n  border-radius: 25px;\n  letter-spacing: .275em;\n}*/\n\n.gt-screen--project {\n  min-height: 100vh;\n  position: relative;\n  z-index: 10;\n  background: rgba(255, 255, 255, .12);\n  display: flex;\n}\n\n.gt-screen__left,\n.gt-screen__right {\n  flex: 2;\n}\n\n.gt-screen__right {\n  flex: 3;\n}\n\n.gt-screen__left-title {\n  padding: 2em 1em;\n  font-weight: 100;\n  font-size: 4em;\n}\n\n.gt-screen__right {\n  /*background: #fff;*/\n}\n\nh1,\nh2,\nh3 {\n  margin: 0;\n}\n\nh2 {\n  font-weight: 400;\n  text-transform: uppercase;\n  font-size: .75em;\n}\n\nh2 span span {\n  width: 20px;\n  display: inline-block;\n  text-align: center;\n}\n\n.gt-text--secondary {\n  font-size: .9em;\n}\n\n.gt-text--small {\n  font-size: .85em;\n  opacity: .75;\n  font-weight: 100;\n}\n\n.gt-text--body {\n  padding: 4em 6em 4em;\n  line-height: 1.5;\n  font-size: 1.5em;\n  font-weight: 100;\n  color: rgba(255, 255, 255, .9);\n  -webkit-font-smoothing: antialiased;\n}", ""]);

	// exports


/***/ },
/* 207 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(210);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(208)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./normalize.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./normalize.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(207)();
	// imports


	// module
	exports.push([module.id, "/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n\n[hidden],\ntemplate {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\n\na:active,\na:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\n\nb,\nstrong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\n\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\n\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit; /* 1 */\n  font: inherit; /* 2 */\n  margin: 0; /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\n\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton,\nhtml input[type=\"button\"], /* 1 */\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n  cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\ninput {\n  line-height: normal;\n}\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  box-sizing: content-box; /* 2 */\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\n\nlegend {\n  border: 0; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}", ""]);

	// exports


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(212);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(208)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./body.css", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./body.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(207)();
	// imports


	// module
	exports.push([module.id, "html,\nbody {\n  font-family:Apercu, Proxima Nova, Fira Sans, Work Sans, Apercu, Helvetica Neue;\n  color: #fff;\n  /*background-image: url(/assets/imgs/bg@2x.jpg);*/\n  background-size: cover;\n  position: relative;\n}\n\n\nbody:after {\n  content: \"\";\n  position: absolute;\n  /*background: rgba(10, 0, 6, .9);*/\n  background: linear-gradient(#35013F, #EB5033);\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\na,\na:link {\n  color: #fff;\n}\n\n/*canvas {\n  position: fixed;\n  top: 0;\n  z-index: 1;\n}*/", ""]);

	// exports


/***/ }
/******/ ]);